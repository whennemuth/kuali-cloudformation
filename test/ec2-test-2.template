{
	"AWSTemplateFormatVersion" : "2010-09-09",

	"Description" : "Create a new micro EC2 ecs-optimized instance to test out UserData and MetaData settings of the cor-main app",

	"Parameters" : {
		"EC2InstanceType" : {
		    "Type" : "String",
            "AllowedValues" : [ "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge" ],
            "Default" : "t2.micro"
		},
		"Landscape" : {
			"Description": "Specify which landscape to build into the VPC",
			"Type": "String",
			"AllowedValues" : [ "sb", "ci", "qa", "stg", "prod" ],
			"ConstraintDescription" : "This parameter is restricted to the following values: sb, ci, qa, stg, prod",
			"Default" : "sb"
		},
		"ConfigBucket" : {
            "Type" : "String",
			"Description" : "The S3 bucket where our config files, keys, etc. are stored",
			"Default" : "kuali-research-ec2-setup"
        },
		"DockerRepositoryURI" : {
			"Type" : "String",
			"Description" : "The URI to for the docker repository containing the docker image we need to run a container",
			"Default" : "730096353738.dkr.ecr.us-east-1.amazonaws.com/core"
		},
		"DockerImageTag" : {
			"Type" : "String",
			"Description" : "The version of the cor-main docker image to pull from the docker registry",
			"Default" : "1810.0020"
		}
	},

    "Metadata" : {
		"NOTES-1" : "To get the ec2 instance into the BU VPC, add the following to MyMicro.Properties: \"SubnetId\" : \"subnet-61377139\","
	},

	"Resources" : {
		"MyMicro" : {
			"Type" : "AWS::EC2::Instance",
            "Description" : "Micro instance for testing UserData and MetaData settings.",
			"Properties" : {
				"Tags" : [ { "Key" : "Name", "Value" : "buaws-wrh-ecs-ec2-test1" } ],
				"ImageId" : "ami-00129b193dc81bc31",
				"InstanceType" : { "Ref" : "EC2InstanceType" },
                "SecurityGroups" : [ { "Ref" : "MyMicroSecurityGroup" } ],
				"KeyName" : "buaws-kuali-rsa-warren",
                "IamInstanceProfile" : { "Ref" : "MyMicroProfile" },
                "UserData" : { "Fn::Base64" : { "Fn::Join" : [ "\n", [
					"#!/bin/bash",
					"yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm",
					"yum install -y aws-cfn-bootstrap",
					"yum install -y git",
					"",
					"# Modify the sudoers file so that anyone in the wheel group can be a sudoer",
					"chmod u+w /etc/sudoers && \\",
					"echo -e \"%wheel\\tALL=(ALL)\\tNOPASSWD: ALL\" >> /etc/sudoers && \\",
					"chmod u-w /etc/sudoers && \\",
					"",
					"# NOTE: Creating users here and not in Metadata.AWS::CloudFormation::Init.config.users due to restrictions: ",
					"# \"Users are created as non-interactive system users with a shell of /sbin/nologin. This is by design and cannot be modified.\"",
					"users=(wrh mukadder dhaywood mkousheh)",
					"for user in ${users[@]}; do",
					"   adduser -m $user && \\",
					"   usermod -aG root $user && \\",
					"   usermod -aG docker $user && \\",
					"   usermod -aG wheel $user && \\",
					"   mkdir /home/$user/.ssh && \\",
					"   chmod 700 /home/$user/.ssh && \\",
					"   chown -R $user:$user /home/$user",
					"done",
					"",
					"# Implement all the metadata in AWS::CloudFormation::Init",
					"/opt/aws/bin/cfn-init \\",
					"   -v \\",
					"   --configsets AllConfigs \\",
					{ "Fn::Sub" : "   --region ${AWS::Region} \\" },
					{ "Fn::Sub" : "   --stack ${AWS::StackName} \\" },
					"   --resource MyMicro"
				]]}}
			},
            "Metadata" : {
				"AWS::CloudFormation::Authentication": {
                    "S3AccessCreds": {
                        "type": "S3",
                        "roleName": {
                            "Ref": "MyMicroS3Role"
                        },
						"buckets" : [ { "Ref" : "ConfigBucket" } ]
                    }
                },
				"AWS::CloudFormation::Init" : {
					"configSets" : {
						"AllConfigs" : [ "getFiles", "runCommands" ],
						"OnlyCommands" : [ "runCommands" ]
					}, 
					"getFiles" : {
						"packages" : {
							"yum" : {
								"awslogs" : []
							}
						},
						"files" : {
							"/home/wrh/.ssh/authorized_keys" : {
								"mode" : "000600",
								"owner" : "wrh",
								"group" : "wrh",
								"source" : { "Fn::Sub" : "https://s3.amazonaws.com/${ConfigBucket}/ecs/ssh-keys/rsa-key-wrh.pub" }
							},
							"/home/mkousheh/.ssh/authorized_keys" : {
								"mode" : "000600",
								"owner" : "mkousheh",
								"group" : "mkousheh",
								"source" : { "Fn::Sub" : "https://s3.amazonaws.com/${ConfigBucket}/ecs/ssh-keys/rsa-key-mkousheh.pub" }
							},
							"/home/mukadder/.ssh/authorized_keys" : {
								"mode" : "000600",
								"owner" : "mukadder",
								"group" : "mukadder",
								"source" : { "Fn::Sub" : "https://s3.amazonaws.com/${ConfigBucket}/ecs/ssh-keys/rsa-key-mukadder.pub" }
							},
							"/home/dhaywood/.ssh/authorized_keys" : {
								"mode" : "000600",
								"owner" : "dhaywood",
								"group" : "dhaywood",
								"source" : { "Fn::Sub" : "https://s3.amazonaws.com/${ConfigBucket}/ecs/ssh-keys/rsa-key-dhaywood.pub" }
							},
							"/var/kuali/README.txt" : {
								"content" : { "Fn::Join" : [ "\n", [
									"This directory contains the \"environment\" for each app to run in a docker container that it needs.",
									"This includes env-file, configuration files, keys, etc.",
                                    { "Fn::Sub" : "These are specific to the ${Landscape} landscape." }
								]]},
								"mode" : "000775",
								"owner" : "root",
								"group" : "root"
							},
							"/root/.ssh/git_rsa_key" : {
								"mode" : "000600",
								"owner" : "root",
								"group" : "root",
								"source" : { "Fn::Sub" : "https://s3.amazonaws.com/${ConfigBucket}/bu_github_id_docker_rsa"}
							},
							"/var/kuali/scripts/s3.download.configs.sh" : {
								"content" : { "Fn::Join" : [ "\n", [
									"#!/bin/bash",
									"",
									"echo \"Downloading all configurations for the container from the s3 bucket\"",
									"[ ! -d /var/kuali/s3 ] && mkdir /var/kuali/s3",
									"cd /var/kuali/s3",
									"aws s3 sync --delete s3://kuali-research-ec2-setup/${LANDSCAPE}/core/ ."
								]]},
								"mode" : "000775",
								"owner" : "root",
								"group" : "root"
							},
							"/var/kuali/scripts/process.env.file.sh" : {
								"content" : { "Fn::Join" : [ "\n", [
									"#!/bin/bash",
									"",
									"# Turn a name=value line into an \"export name=value\" line",
									"getLineExport() {",
									"  local line=$(echo -n \"$1\" | xargs) # Use xargs to trim the line.",
									"  # Return and empty string if the line is a properties file comment", 
									"  [ \"${line:0:1}\" == \"#\" ] && echo \"\" && exit 0;",
									"  [ -z \"$line\" ] && echo \"\" && exit 0;",
									"  echo \"export $line\"",
									"}",
									"",
									"# Create a script to export all environment variables in the mounted directory before starting node",
									"if [ ! -f $ENV_FILE_FROM_S3 ] ; then",
									"  echo \"ERROR! MISSING $ENV_FILE_FROM_S3\"",
									"  exit 1",
									"else",
									"  cd $(dirname $ENV_FILE_FROM_S3)",
									"  CORE_HOST=$(cat /var/kuali/public-dns-name)",
									"  rm -f export.sh",
									"  echo \"Creating $(pwd)/export.sh...\"",
									"  while read line ; do",
									"    expline=\"$(getLineExport \"$line\")\" ",
									"    [ -z \"$expline\" ] && continue",
									"    prop=$(echo \"$expline\" | cut -f1 -d '=') ",
									"    # Override some of the existing environment variables",
									"    [ \"${prop^^}\" == \"CORE_HOST\" ] && expline=\"CORE_HOST=${CORE_HOST}\"",
									"    [ \"${prop^^}\" == \"SHIB_HOST\" ] && expline=\"SHIB_HOST=\"",
									"    [ \"${prop^^}\" == \"ROOT_DIR\" ]  && expline=\"ROOT_DIR=/var/core-temp\"",
									"    echo \"Setting env var $prop\" ",
									"    echo \"$expline\" >> export.sh",
									"  done < $ENV_FILE_FROM_S3",
									"",
									"  echo \"# Testing: CORE_HOST=http://$(curl -s http://169.254.169.254/latest/meta-data/public-hostname)\"",
									"fi",
									"",
									"exit 0"
								]]},
								"mode" : "000775",
								"owner" : "root",
								"group" : "root"
							},
							"/var/kuali/scripts/start.app.sh" : {
								"content" : { "Fn::Join" : [ "\n", [
										"#!/bin/bash",
										"",
										"echo \"Running docker container\"",
										"",
										"$(aws ecr get-login --no-include-email --region ${AWS::Region})",
										"",
										"docker run \\",
										"  -d \\",
										"  -p 3000:3000 \\",
										"  -p 27017:27017 \\",
										"  -p 9229:9229 \\",
										"  --restart unless-stopped \\",
										"  --name=core \\",
										"  -v /var/kuali/s3:/var/core-config \\",
										"  -v /var/kuali/scripts:/var/bash-scripts \\",
										"  $DOCKER_IMAGE_NAME"
									]]},
									"mode" : "000775",
									"owner" : "root",
									"group" : "root"
							}
						}
					},
					"runCommands" : {
						"commands" : {
							"01_get_configs_from_s3" : {
								"cwd" : "/var/kuali/scripts",
								"env" : { "LANDSCAPE" : { "Fn::Sub" : "${Landscape}" } },
								"command" : "bash s3.download.configs.sh"
							},
							"02_get_public_dns_name" : {
								"cwd" : "/var/kuali",
								"command" : "curl -s http://169.254.169.254/latest/meta-data/public-hostname > public-dns-name"
							},
							"03_create_env_exports_file" : {
								"cwd" : "/var/kuali/scripts",
								"env" : { "ENV_FILE_FROM_S3" : "/var/kuali/s3/environment.variables.s3" },
								"command" : "bash process.env.file.sh"
							},
							"04_docker_run_container" : {
								"cwd" : "/var/kuali/scripts",
								"env" : {
									"DOCKER_IMAGE_NAME" : { "Fn::Sub" : "${DockerRepositoryURI}:${DockerImageTag}" }
								},
								"command" : "bash start.app.sh"
							}
						}
					}
				}
			}
		},
        "MyMicroSecurityGroup" : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
				"GroupDescription" : "Warrens security group for a test t2.micro ec2 instance",
                "GroupName" : "WarrensT2.micro.SG",
                "Tags" : [ { "Key" : "Name", "Value" : "buaws-wrh-ecs-ec2-test1.SG" } ],
                "SecurityGroupIngress" : [
					{
						"IpProtocol" : "tcp",
                        "FromPort" : "22",
                        "ToPort" : "22",
                        "CidrIp" : "0.0.0.0/0"
					},
					{
						"IpProtocol" : "tcp",
                        "FromPort" : "80",
                        "ToPort" : "80",
                        "CidrIp" : "0.0.0.0/0"
					}
				]
            }
        },
		"MyMicroProfile" : {
			"Type": "AWS::IAM::InstanceProfile",
            "Properties" : {
				"InstanceProfileName" : "Profile-for-MyMicroS3Role",
                "Path" : "/",
                "Roles" : [ { "Ref" : "MyMicroS3Role" } ]
			}
		},
		"MyMicroS3Role" : {
		    "Type" : "AWS::IAM::Role",
		    "Properties" : {
				"RoleName" : "MyMicroS3Role",
		        "AssumeRolePolicyDocument" : {
					"Statement": [{
						"Effect" : "Allow",
						"Principal" : {
							"Service" : [ "ec2.amazonaws.com" ]
						},
                        "Action" : [ "sts:AssumeRole" ]
					}]
		        },
                "Path" : "/",
                "ManagedPolicyArns" : [
					"arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess",
					"arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
				]
		    }
		}
	},

	"Outputs" : {
		"PublicIP" : {
		    "Value" : {"Fn::GetAtt" : [ "MyMicro", "PublicIp"]}
		},
		"PublicDnsName" : {
			"Value" : {"Fn::GetAtt" : [ "MyMicro", "PublicDnsName"]}
		}
	}
}
