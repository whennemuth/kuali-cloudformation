{
	"AWSTemplateFormatVersion" : "2010-09-09",

	"Description" : "Create a new T2 EC2 ecs-optimized instance to test out UserData and MetaData settings of the cor-main app",

	"Parameters" : {
		"EC2InstanceType" : {
		    "Type" : "String",
            "AllowedValues" : [ "t2.small", "t2.medium", "t2.large", "t2.xlarge" ],
            "Default" : "t2.small"
		},
		"Landscape" : {
			"Description": "Specify which landscape to build into the VPC",
			"Type": "String",
			"AllowedValues" : [ "sb", "ci", "qa", "stg", "prod" ],
			"ConstraintDescription" : "This parameter is restricted to the following values: sb, ci, qa, stg, prod",
			"Default" : "sb"
		},
		"ConfigBucket" : {
            "Type" : "String",
			"Description" : "The S3 bucket where our config files, keys, etc. are stored",
			"Default" : "kuali-research-ec2-setup"
        },
		"DockerRepositoryURI" : {
			"Type" : "String",
			"Description" : "The URI to for the docker repository containing the docker image we need to run a container",
			"Default" : "730096353738.dkr.ecr.us-east-1.amazonaws.com/core"
		},
		"DockerImageTag" : {
			"Type" : "String",
			"Description" : "The version of the cor-main docker image to pull from the docker registry",
			"Default" : "1810.0020"
		}
	},

    "Metadata" : {
		"NOTES-1" : "To get the ec2 instance into the BU VPC, add the following to MyEC2Instance.Properties: \"SubnetId\" : \"subnet-61377139\","
	},

	"Resources" : {
		"MyEC2Instance" : {
			"Type" : "AWS::EC2::Instance",
            "Description" : "T2nstance for testing UserData and MetaData settings.",
			"Properties" : {
				"Tags" : [ { "Key" : "Name", "Value" : "buaws-wrh-ecs-ec2-test1" } ],
				"ImageId" : "ami-00129b193dc81bc31",
				"InstanceType" : { "Ref" : "EC2InstanceType" },
                "SecurityGroups" : [ { "Ref" : "MyEC2InstanceSecurityGroup" } ],
				"KeyName" : "buaws-kuali-rsa-warren",
                "IamInstanceProfile" : { "Ref" : "MyEC2InstanceProfile" },
                "UserData" : { "Fn::Base64" : { "Fn::Join" : [ "\n", [
					"#!/bin/bash",
					"yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm",
					"yum install -y aws-cfn-bootstrap",
					"yum install -y git",
					"# Add perl and zip libraries needed to unpack and run custom metric monitoring for cloudwatch.",
					"yum install -y perl-Switch perl-DateTime perl-Sys-Syslog perl-LWP-Protocol-https perl-Digest-SHA.x86_64",
					"yum install -y zip unzip",
					"yum install -y sysstat",
					"yum install -y jq",
					"",
					"# Modify the sudoers file so that anyone in the wheel group can be a sudoer",
					"chmod u+w /etc/sudoers && \\",
					"echo -e \"%wheel\\tALL=(ALL)\\tNOPASSWD: ALL\" >> /etc/sudoers && \\",
					"chmod u-w /etc/sudoers && \\",
					"",
					"# NOTE: Creating users here and not in Metadata.AWS::CloudFormation::Init.config.users due to restrictions: ",
					"# \"Users are created as non-interactive system users with a shell of /sbin/nologin. This is by design and cannot be modified.\"",
					"users=(wrh mukadder dhaywood mkousheh)",
					"for user in ${users[@]}; do",
					"   adduser -m $user && \\",
					"   usermod -aG root $user && \\",
					"   usermod -aG docker $user && \\",
					"   usermod -aG wheel $user && \\",
					"   mkdir /home/$user/.ssh && \\",
					"   chmod 700 /home/$user/.ssh && \\",
					"   chown -R $user:$user /home/$user",
					"done",
					"",
					"# Install required packages for scripts that will monitor and upload custom metrics to cloudwatch.",
					"curl https://aws-cloudwatch.s3.amazonaws.com/downloads/CloudWatchMonitoringScripts-1.2.2.zip -o /var/lib/ && CloudWatchMonitoringScripts-1.2.2.zip",
					"unzip -d /var/lib/ CloudWatchMonitoringScripts-1.2.2.zip",
					"rm -f /var/lib/CloudWatchMonitoringScripts-1.2.2.zip",
					"",
					"# Implement all the metadata in AWS::CloudFormation::Init",
					"/opt/aws/bin/cfn-init \\",
					"   -v \\",
					"   --configsets AllConfigs \\",
					{ "Fn::Sub" : "   --region ${AWS::Region} \\" },
					{ "Fn::Sub" : "   --stack ${AWS::StackName} \\" },
					"   --resource MyEC2Instance",
					"",
					"# Now that all initialization is done signal success",
					"/opt/aws/bin/cfn-signal \\",
					"   -e $? \\",
					{ "Fn::Sub" : "   --region ${AWS::Region} \\" },
					{ "Fn::Sub" : "   --stack ${AWS::StackName} \\" },
					"   --resource MyEC2Instance"
				]]}}
			},
            "Metadata" : {
				"AWS::CloudFormation::Authentication": {
                    "S3AccessCreds": {
                        "type": "S3",
                        "roleName": {
                            "Ref": "MyEC2Role"
                        },
						"buckets" : [ { "Ref" : "ConfigBucket" } ]
                    }
                },
				"AWS::CloudFormation::Init" : {
					"configSets" : {
						"AllConfigs" : [ "getFiles", { "ConfigSet" : "RunCommands" } ],
						"GetFiles" : [ "getFiles" ],
						"RunCommands" : [ 
							{ "ConfigSet" : "cmd01"}, 
							{ "ConfigSet" : "cmd02"}, 
							{ "ConfigSet" : "cmd03"} 
						],
						"cmd01" : [ "01_get_configs_from_s3" ],
						"cmd02" : [ "02_create_env_exports_file" ], 
						"cmd03" : [ "03_docker_run_container" ],
						"cmd04" : [ "04_start_cron_for_custom_cloudwatch_metrics" ]
					}, 
					"getFiles" : {
						"packages" : {
							"yum" : {
								"awslogs" : []
							}
						},
						"files" : {
							"/home/wrh/.ssh/authorized_keys" : {
								"mode" : "000600",
								"owner" : "wrh",
								"group" : "wrh",
								"source" : { "Fn::Sub" : "https://s3.amazonaws.com/${ConfigBucket}/ecs/ssh-keys/rsa-key-wrh.pub" }
							},
							"/home/mkousheh/.ssh/authorized_keys" : {
								"mode" : "000600",
								"owner" : "mkousheh",
								"group" : "mkousheh",
								"source" : { "Fn::Sub" : "https://s3.amazonaws.com/${ConfigBucket}/ecs/ssh-keys/rsa-key-mkousheh.pub" }
							},
							"/home/mukadder/.ssh/authorized_keys" : {
								"mode" : "000600",
								"owner" : "mukadder",
								"group" : "mukadder",
								"source" : { "Fn::Sub" : "https://s3.amazonaws.com/${ConfigBucket}/ecs/ssh-keys/rsa-key-mukadder.pub" }
							},
							"/home/dhaywood/.ssh/authorized_keys" : {
								"mode" : "000600",
								"owner" : "dhaywood",
								"group" : "dhaywood",
								"source" : { "Fn::Sub" : "https://s3.amazonaws.com/${ConfigBucket}/ecs/ssh-keys/rsa-key-dhaywood.pub" }
							},
							"/var/kuali/README.txt" : {
								"content" : { "Fn::Join" : [ "\n", [
									"This directory contains the \"environment\" for each app to run in a docker container that it needs.",
									"This includes env-file, configuration files, keys, etc.",
                                    { "Fn::Sub" : "These are specific to the ${Landscape} landscape." }
								]]},
								"mode" : "000775",
								"owner" : "root",
								"group" : "root"
							},
							"/root/.ssh/git_rsa_key" : {
								"mode" : "000600",
								"owner" : "root",
								"group" : "root",
								"source" : { "Fn::Sub" : "https://s3.amazonaws.com/${ConfigBucket}/bu_github_id_docker_rsa"}
							},
							"/root/crontab" : {
								"content" : { "Fn::Join" : [ "\n", [
									"SHELL=/bin/bash",
									"PATH=/sbin:/bin:/usr/sbin:/usr/bin",
									"MAILTO=root",
									"HOME=/",
									"",
									"# Send custom metrics to cloudwatch once every minute",
									"# NOTE: The cronjob will start, but it does nothing until you uncomment the 1 or more of the 3 lines below.",
									"#       This is a test ec2 instance, so defaulting to running these scripts manually while shelled in.",
									"# Check the system log for any errors this script encounters",
									"# * * * * * /root/send-custom-cloudwatch-metrics1.sh",
									"# * * * * * /root/send-custom-cloudwatch-metrics2.sh",
									"# * * * * * /root/send-psuedo-cloudwatch-metrics.sh",
									""
								]]},
								"mode" : "000644",
								"owner" : "root",
								"group" : "root"
							},
							"/root/send-special-cloudwatch-metrics1.sh" : {
								"content" : { "Fn::Join" : [ "\n", [
									"#!/bin/bash",
									"# Adding additional cloudwatch metrics that include memory utilization.",
									"# See: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/mon-scripts.html",
									"/var/lib/aws-scripts-mon/mon-put-instance-data.pl \\",
									"  --mem-used-incl-cache-buff \\",
									"  --mem-util \\",
									"  --mem-avail \\",
									"  --disk-space-util \\",
									"  --disk-path=/ \\",
									"  --from-cron",
									""
								]]},
								"mode" : "000744",
								"owner" : "root",
								"group" : "root"
							},
							"/root/send-custom-cloudwatch-metrics2.sh" : {
								"content" : { "Fn::Join" : [ "\n", [
									"#!/bin/bash",
									"# Cloudwatch metrics alternative that include are custom and cover all needed measurments.",
									"# Use this method as a replacement for the mon-put-instance-data.pl approach.",
									"# See: https://aws.amazon.com/premiumsupport/knowledge-center/cloudwatch-custom-metrics/",
									"export AWS_DEFAULT_REGION=us-east-1",
									"INSTANCEID=$(curl http://169.254.169.254/latest/meta-data/instance-id)",
									"USEDMEMORY_PERCENT=$(free -m | awk 'NR==2{printf \"%.2f\t\", $3*100/$2 }')",
									"USEDDISK_PERCENT=$(df / | awk 'NR==2{print $5}' | sed 's/\%//g')",
									"TCP_CONN=$(netstat -an | wc -l)",
									"TCP_CONN_PORT_80=$(netstat -an | grep 80 | wc -l)",
									"USERS=$(uptime | awk '{ print $4 }')",
									"IO_WAIT_PERCENT=$(iostat | awk 'NR==4 {print $4}')",
									"  # If no average cpu record, then take the cpu as of this moment",
									"[ -z \"$((cat /tmp/average.cpu | grep -P '^\d+(\.\d+)?$') 2> /dev/null)\" ] && grep 'cpu ' /proc/stat | awk '{print ($2+$4)*100/($2+$4+$5)}' > /tmp/average.cpu",
									"AVERAGE_CPU=$(cat /tmp/average.cpu)",
									"  # Compute the average cpu utilization by taking a reading every 2seconds for a 58 seconds and taking their average.",
									"  # The cron job is on a minute schedule, so 58 seconds will ensure that a new average will be recorded BEFORE the next cron cycle.",
									"NEXT_AVERAGE_CPU=$(n=0 && cat <(echo \"$(while [ $n -lt 4 ] ; do grep 'cpu ' /proc/stat && sleep 2 && n=$((n+1)) ; done)\") | awk '{c++; t += ($2+$4)*100/($2+$4+$5)} END {print t/c}')",
									"echo $NEXT_AVERAGE_CPU > /tmp/average.cpu",
									"",
									"aws cloudwatch put-metric-data --dimensions Instance=$INSTANCEID --namespace \"EC2TestCustomMetrics\" --metric-name cpu-usage --value $AVERAGE_CPU",
									"aws cloudwatch put-metric-data --dimensions Instance=$INSTANCEID --namespace \"EC2TestCustomMetrics\" --metric-name memory-usage --value $USEDMEMORY_PERCENT",
									"aws cloudwatch put-metric-data --dimensions Instance=$INSTANCEID --namespace \"EC2TestCustomMetrics\" --metric-name disk-usage --value $USEDDISK_PERCENT",
									"aws cloudwatch put-metric-data --dimensions Instance=$INSTANCEID --namespace \"EC2TestCustomMetrics\" --metric-name tcp_connections --value $TCP_CONN",
									"aws cloudwatch put-metric-data --dimensions Instance=$INSTANCEID --namespace \"EC2TestCustomMetrics\" --metric-name tcp_connection_on_port_80 --value $TCP_CONN_PORT_80",
									"aws cloudwatch put-metric-data --dimensions Instance=$INSTANCEID --namespace \"EC2TestCustomMetrics\" --metric-name nbr_of_users --value $USERS",
									"aws cloudwatch put-metric-data --dimensions Instance=$INSTANCEID --namespace \"EC2TestCustomMetrics\" --metric-name io_wait --value $IO_WAIT_PERCENT",
									""
								]]},
								"mode" : "000744",
								"owner" : "root",
								"group" : "root"
							},
							"/root/send-psuedo-cloudwatch-metrics.sh" : {
								"content" : { "Fn::Join" : [ "\n", [
									"#!/bin/bash",
									"",
									""
								]]},
								"mode" : "000744",
								"owner" : "root",
								"group" : "root"
							},
							"/etc/cfn/cfn-hup.conf" : {
								"mode" : "000400",
								"owner" : "root",
								"group" : "root",
								"content" : { "Fn::Join" : [ "\n", [
									"[main]",
									{ "Fn::Sub" : "stack=${AWS::StackId}" },
									{ "Fn::Sub" : "region=${AWS::Region} "}
								]]}
							},
							"/etc/cfn/hooks.d/cfn-auto-reloader.conf" : {
								"content" : { "Fn::Join" : [ "\n", [
									"[cfn-auto-reloader-hook]",
									"triggers=post.update",
									"path=Resources.MyEC2Instance.Metadata.AWS::CloudFormation::Init",
									{ "Fn::Sub" : "action=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource MyEC2Instance" }
								]]}
							},
							"/etc/awslogs/awscli.conf" : {
								"content" : { "Fn::Join" : [ "\n", [
									"[plugins]",
									"cwlogs = cwlogs",
									"[default]",
									{ "Fn::Sub" : "region = ${AWS::Region}" }
								]]}
							},
							"/etc/awslogs/awslogs.conf" : {
								"content" : { "Fn::Join" : [ "\n", [
									"[general]",
									"state_file = /var/lib/awslogs/agent-state",
									"",
									"[/var/log/dmesg]",
									"file = /var/log/dmesg",
									"log_group_name = MyEC2InstanceLogsGroup",
									"log_stream_name = /var/log/dmesg",
									"",
									"[/var/log/messages]",
									"file = /var/log/messages",
									"log_group_name = MyEC2InstanceLogsGroup",
									"log_stream_name = /var/log/messages",
									"datetime_format = %b %d %H:%M:%S",
									"",
									"[/var/log/docker]",
									"file = /var/log/docker",
									"log_group_name = MyEC2InstanceLogsGroup",
									"log_stream_name = /var/log/docker",
									"datetime_format = %Y-%m-%dT%H:%M:%S.%f"
								]]}
							},
							"/var/kuali/scripts/s3.download.configs.sh" : {
								"content" : { "Fn::Join" : [ "\n", [
									"#!/bin/bash",
									"",
									"echo \"Downloading all configurations for the container from the s3 bucket\"",
									"[ ! -d /var/kuali/s3 ] && mkdir /var/kuali/s3",
									"cd /var/kuali/s3",
									"aws s3 sync --delete s3://kuali-research-ec2-setup/${LANDSCAPE}/core/ ."
								]]},
								"mode" : "000775",
								"owner" : "root",
								"group" : "root"
							},
							"/var/kuali/scripts/process.env.file.sh" : {
								"content" : { "Fn::Join" : [ "\n", [
									"#!/bin/bash",
									"",
									"# Turn a name=value line into an \"export name=\"value\"\" line",
									"getLineExport() {",
									"  local line=$(echo -n \"$1\" | xargs) # Use xargs to trim the line.",
									"  # Return and empty string if the line is a properties file comment", 
									"  [ \"${line:0:1}\" == \"#\" ] && echo \"\" && exit 0;",
									"  [ -z \"$line\" ] && echo \"\" && exit 0;",
									"  if [ -n \"$(echo $testline | grep -P '\\x22')\" ] ; then", 
									"    echo \"export $line\"",
									"  else",
									"    # Put double quotes around the exported variable value",
									"    echo \"export $(echo $line | sed 's/=/=\"/1')\\\"\"",
									"  fi",
									"}",
									"",
									"# Create a script to export all environment variables in the mounted directory before starting node",
									"if [ ! -f $ENV_FILE_FROM_S3 ] ; then",
									"  echo \"ERROR! MISSING $ENV_FILE_FROM_S3\"",
									"  exit 1",
									"else",
									"  cd $(dirname $ENV_FILE_FROM_S3)",
									"  CORE_HOST=$(curl -s http://169.254.169.254/latest/meta-data/public-hostname)",
									"  rm -f export.sh",
									"  echo \"Creating $(pwd)/export.sh...\"",
									"  while read line ; do",
									"    expline=\"$(getLineExport \"$line\")\" ",
									"    [ -z \"$expline\" ] && continue",
									"    prop=$(echo \"$line\" | cut -f1 -d '=') ",
									"    # Override some of the existing environment variables",
									"    [ \"${prop^^}\" == \"CORE_HOST\" ] && expline=\"export CORE_HOST=${CORE_HOST}\"",
									"    [ \"${prop^^}\" == \"SHIB_HOST\" ] && expline=\"export SHIB_HOST=\"",
									"    [ \"${prop^^}\" == \"ROOT_DIR\" ]  && expline=\"export ROOT_DIR=/var/core-temp\"",
									"    echo \"Setting env var $prop\" ",
									"    echo \"$expline\" >> export.sh",
									"  done < $ENV_FILE_FROM_S3",
									"  # In case the file from s3 originated on a windows file system, remove return carriage chars",
									"  sed -i 's/\\r//g' export.sh",
									"fi",
									"",
									"exit 0"
								]]},
								"mode" : "000775",
								"owner" : "root",
								"group" : "root"
							},
							"/var/kuali/scripts/start.docker.container.sh" : {
								"content" : { "Fn::Join" : [ "\n", [
										"#!/bin/bash",
										"",
										"docker rm -f core 2> /dev/null || true",
										"echo \"Running new core docker container\"",
										"",
										{ "Fn::Sub" : "$(aws ecr get-login --no-include-email --region ${AWS::Region})" },
										"",
										"docker run \\",
										"  -d \\",
										"  -p 80:3000 \\",
										"  -p 27017:27017 \\",
										"  -p 9229:9229 \\",
										"  --restart unless-stopped \\",
										"  --name=core \\",
										"  -v /var/kuali/s3:/var/core-config \\",
										"  --log-driver=awslogs \\",
										{ "Fn::Sub" : "  --log-opt awslogs-region=${AWS::Region} \\" },
										"  --log-opt awslogs-group=MyEC2InstanceLogsGroup \\",
										"  --log-opt awslogs-stream=core-docker-container \\",
										"  --log-opt awslogs-create-group=false \\",
										"  $DOCKER_IMAGE_NAME"
									]]},
									"mode" : "000775",
									"owner" : "root",
									"group" : "root"
							}
						}
					},
					"01_get_configs_from_s3" : {
						"commands" : {
							"cmd01" : {
								"cwd" : "/var/kuali/scripts",
								"env" : { "LANDSCAPE" : { "Fn::Sub" : "${Landscape}" } },
								"command" : "bash s3.download.configs.sh"
							}
						}
					},
					"02_create_env_exports_file" : {
						"commands" : {
							"cmd01" : {
								"cwd" : "/var/kuali/scripts",
								"env" : { "ENV_FILE_FROM_S3" : "/var/kuali/s3/environment.variables.s3" },
								"command" : "bash process.env.file.sh"
							}
						}
					},
					"03_docker_run_container" : {
						"commands" : {
							"cmd01" : {
								"cwd" : "/var/kuali/scripts",
								"env" : {
									"DOCKER_IMAGE_NAME" : { "Fn::Sub" : "${DockerRepositoryURI}:${DockerImageTag}" }
								},
								"command" : "bash start.docker.container.sh"
							}
						},
						"services" : {
							"sysvinit" : {
								"cfn-hup" : {
									"enabled": "true",
									"ensureRunning" : "true",
									"files" : [
										"/etc/cfn/cfn-hup.conf",
										"/etc/cfn/hooks.d/cfn-auto-reloader.conf"
									]
								},
								"awslogs" : {
									"enabled": "true",
									"ensureRunning" : "true",
									"files" : [
										"/etc/awslogs/awslogs.conf",
										"/etc/awslogs/awscli.conf"
									]
								}
							}
						}
					},
					"04_start_cron_for_custom_cloudwatch_metrics" : {
						"commands" : {
							"cmd01" : "crontab -u root /root/crontab"
						}
					}
				}
			}
		},
		"MyEC2Role" : {
		    "Type" : "AWS::IAM::Role",
		    "Properties" : {
                "Path" : "/",
				"RoleName" : "MyEC2Role",
		        "AssumeRolePolicyDocument" : {
					"Statement": [{
                        "Action" : [ "sts:AssumeRole" ],
						"Effect" : "Allow",
						"Principal" : { "Service" : [ "ec2.amazonaws.com" ] }
					}]
		        },
                "ManagedPolicyArns" : [
					"arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess",
					"arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly",
					"arn:aws:iam::aws:policy/CloudWatchFullAccess"
				]
		    }
		},
		"MyEC2InstanceProfile" : {
			"Type": "AWS::IAM::InstanceProfile",
            "Properties" : {
				"InstanceProfileName" : "Profile-for-MyEC2Role",
                "Path" : "/",
                "Roles" : [ { "Ref" : "MyEC2Role" } ]
			}
		},
		"MyEC2InstanceLogsGroup" : {
		    "Type" : "AWS::Logs::LogGroup",
		    "Properties" : {
				"LogGroupName" : "MyEC2InstanceLogsGroup",
                "RetentionInDays" : 30
		    }
		},
        "MyEC2InstanceSecurityGroup" : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
				"GroupDescription" : "Warrens security group for a test t2 ec2 instance",
                "GroupName" : "MyEC2Instance.SG",
                "Tags" : [ { "Key" : "Name", "Value" : "buaws-wrh-ecs-ec2-test1.SG" } ],
                "SecurityGroupIngress" : [
					{
						"IpProtocol" : "tcp",
                        "FromPort" : "22",
                        "ToPort" : "22",
                        "CidrIp" : "0.0.0.0/0"
					},
					{
						"IpProtocol" : "tcp",
                        "FromPort" : "80",
                        "ToPort" : "80",
                        "CidrIp" : "0.0.0.0/0"
					},
					{
						"IpProtocol" : "tcp",
                        "FromPort" : "3000",
                        "ToPort" : "3000",
                        "CidrIp" : "0.0.0.0/0"
					},
					{
						"IpProtocol" : "tcp",
                        "FromPort" : "27017",
                        "ToPort" : "27017",
                        "CidrIp" : "0.0.0.0/0"
					},
					{
						"IpProtocol" : "tcp",
                        "FromPort" : "9229",
                        "ToPort" : "9229",
                        "CidrIp" : "0.0.0.0/0"
					}
				]
            }
        }
	},

	"Outputs" : {
		"PublicIP" : {
		    "Value" : {"Fn::GetAtt" : [ "MyEC2Instance", "PublicIp"]}
		},
		"PublicDnsName" : {
			"Value" : {"Fn::GetAtt" : [ "MyEC2Instance", "PublicDnsName"]}
		}
	}
}
