AWSTemplateFormatVersion: 2010-09-09


Description: >
  Create a new ec2 instance with the kuali suite of modules deployed as containers and proxied with nginx.


Parameters:

  GlobalTag:
    Type: String
    Description: >
      A common value that all resources in this template will have prefixed to
      their name and attached as a tag to establish a bundling through naming convention.
    Default: kuali-ec2

  Landscape:
    Description: Specify which landscape to build into the VPC (currently just a label - kc-config.xml is hard-coded for now).
    Type: String
    AllowedValues:
    - sb
    - ci
    - qa
    - stg
    - prod
    ConstraintDescription: >
      This parameter is restricted to the following values: sb, ci, qa, stg, prod
    Default: sb

  EC2InstanceType:
    Type: String
    Description: What type of EC2 instance should be used for hosting?
    AllowedValues:
    - t2.small
    - t2.medium
    - t2.large
    - t2.xlarge
    - t3.small
    - t3.medium
    - t3.large
    - t3.xlarge
    - m4.large
    - m4.xlarge
    - m5.large
    - m5.xlarge
    ConstraintDescription: Specified instance type is not within selection list.
    Default: m4.large

  EC2KeypairName:
    Type: String
    Description: The keypair for ssh use against the ec2 instance

  BucketName:
    Type: String
    Description: The S3 bucket kuali research cloudformation templates, config files, keys, etc. are stored
    Default: kuali-research-ec2-setup

  CoreImage:
    Type: String
    Description: 'Example: 730096353738.dkr.ecr.us-east-1.amazonaws.com/core:2001.0040'

  KcImage:
    Type: String
    Description: 'Example: 730096353738.dkr.ecr.us-east-1.amazonaws.com/coeus:2001.0040'

  PortalImage:
    Type: String
    Description: 'Example: 730096353738.dkr.ecr.us-east-1.amazonaws.com/portal:2001.0040'

  PdfImage:
    Type: String
    Description: 'Example: 730096353738.dkr.ecr.us-east-1.amazonaws.com/research-pdf:2002.0003'

  EnableNewRelicAPM:
    Type: String
    Description: Is newrelic APM to be enabled for this landscape?
    Default: "false"
    AllowedValues:
    - "true"
    - "false"
    ConstraintDescription: Enter "true" or "false" only.
    Default: "false"

  EnableNewRelicInfrastructure:
    Type: String
    Description: Is newrelic infrastructure (with logging) to be enabled for this landscape?
    Default: "false"
    AllowedValues:
    - "true"
    - "false"
    ConstraintDescription: Enter "true" or "false" only.
    Default: "false"

# Each of these subnets will get the ec2 instance into the proper BU VPC.
# This is necessary to gain access to the oracle databases, which cannot be accessed from outside the VPC
# Also, you need to apply the specific vpc id to the security group being created here so it does not land in the default VPC.
# Mappings:
#   SubnetIdMap:
#     sb:
#       vpc: "vpc-abdf0ccc"
#       subnet: "subnet-61377139"
#     ci:
#       vpc: "vpc-abdf0ccc"
#       subnet: "subnet-86f2d8f0"
#     qa:
#       vpc: "vpc-abdf0ccc"
#       subnet: "subnet-3a215b10"
#     stg:
#       vpc: "vpc-abdf0ccc"
#       subnet: "subnet-28235902"
#     prod:
#       vpc: "vpc-27114f40"
#       subnet: "subnet-7dfb1350"

Resources:

  Utils:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: 
        !Sub https://s3.amazonaws.com/${BucketName}/cloudformation/lambda/ami-lookup.yaml
      Parameters:
        GlobalPrefix:
          ECS-test

  AMIInfo:
    Type: Custom::AMIInfo
    Properties:
      ServiceToken:
        !GetAtt Utils.Outputs.AMIInfoFunctionArn
      Region:
        Ref: AWS::Region
      InstanceType:
        !Ref EC2InstanceType   

  EC2Instance:
    Type: AWS::EC2::Instance
    Description: EC2 instance for hosting kuali research modules.
    DependsOn: EC2InstanceSecurityGroup

    Properties:
      Tags:
      - Key: Name
        Value: !Sub ${GlobalTag}-instance
      ImageId: 
        # ami-00129b193dc81bc31
        !GetAtt AMIInfo.Id
      InstanceType:
        !Ref EC2InstanceType
      SecurityGroupIds:
      - !GetAtt  EC2InstanceSecurityGroup.GroupId
      KeyName: !Ref EC2KeypairName
      IamInstanceProfile:
        !Ref EC2InstanceProfile
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 64
            DeleteOnTermination: true
      # SubnetId: !FindInMapn
      #   - SubnetIdMap
      #   - !Ref Landscape
      #   - subnet

      UserData: 
        "Fn::Base64": !Sub |
          #!/bin/bash
          yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
          yum install -y aws-cfn-bootstrap
          yum install -y git
          # Add perl and zip libraries needed to unpack and run custom metric monitoring for cloudwatch.
          yum install -y perl-Switch perl-DateTime perl-Sys-Syslog perl-LWP-Protocol-https perl-Digest-SHA.x86_64
          yum install -y zip unzip
          yum install -y sysstat
          yum install -y jq
          # Install and run docker
          amazon-linux-extras install -y docker
          service docker start
          usermod -a -G docker ec2-user
          chkconfig docker on
          # Install docker-compose
          curl \
            -L https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) \
            -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
          
          # # Modify the sudoers file so that anyone in the wheel group can be a sudoer
          # chmod u+w /etc/sudoers && \
          # echo -e "%wheel\tALL=(ALL)\tNOPASSWD: ALL" >> /etc/sudoers && \
          # chmod u-w /etc/sudoers && \
          
          # # NOTE: Creating users here and not in Metadata.AWS::CloudFormation::Init.config.users due to restrictions: 
          # # Users are created as non-interactive system users with a shell of /sbin/nologin. This is by design and cannot be modified.
          # for user in wrh mukadder dhaywood mkousheh ; do
          #   adduser -m $user && \
          #   usermod -aG root $user && \
          #   usermod -aG docker $user && \
          #   usermod -aG wheel $user && \
          #   mkdir /home/$user/.ssh && \
          #   chmod 700 /home/$user/.ssh && \
          #   chown -R $user:$user /home/$user
          # done
          
          # Create certificates for ssl
          mkdir -p /opt/kuali/nginx/certs
          openssl req -newkey rsa:4096 \
            -x509 \
            -sha256 \
            -days 3650 \
            -nodes \
            -out /opt/kuali/nginx/certs/myec2.crt \
            -keyout /opt/kuali/nginx/certs/myec2.key \
            -subj "/C=US/ST=MA/L=Boston/O=BU/OU=IST/CN=Ec2Instance"

          # Install required packages for scripts that will monitor and upload custom metrics to cloudwatch.
          curl https://aws-cloudwatch.s3.amazonaws.com/downloads/CloudWatchMonitoringScripts-1.2.2.zip \
            -o /var/lib/ && CloudWatchMonitoringScripts-1.2.2.zip
          unzip -d /var/lib/ CloudWatchMonitoringScripts-1.2.2.zip
          rm -f /var/lib/CloudWatchMonitoringScripts-1.2.2.zip
          
          # Implement all the metadata in AWS::CloudFormation::Init
          /opt/aws/bin/cfn-init \
            -v \
            --configsets AllConfigs \
            --region ${AWS::Region} \
            --stack ${AWS::StackName} \
            --resource EC2Instance
            
          # Now that all initialization is done signal success
          /opt/aws/bin/cfn-signal \
            -e $? \
            --region ${AWS::Region} \
            --stack ${AWS::StackName} \
            --resource EC2Instance

    Metadata:
      AWS::CloudFormation::Authentication:
        S3AccessCreds:
          type: S3
          roleName:
            !Ref EC2Role
          buckets:
          - !Ref BucketName
      AWS::CloudFormation::Init:
        configSets:
          AllConfigs:
          - getFiles
          - ConfigSet: RunCommands
          GetFiles:
          - getFiles
          RunCommands:
          - ConfigSet: cmd01
          - ConfigSet: cmd02
          - ConfigSet: cmd03
          # - ConfigSet: cmd04
          cmd01:
          - 01_get_configs_from_s3
          cmd02:
          - 02_create_env_exports_file
          cmd03:
          - 03_docker_run_container
          cmd04:
          - 04_start_cron_for_custom_cloudwatch_metrics
        getFiles:
          packages:
            yum:
              awslogs: []
          files:
            # /home/wrh/.ssh/authorized_keys:
            #   mode: "000600"
            #   owner: wrh
            #   group: wrh
            #   source:
            #     !Sub https://s3.amazonaws.com/${BucketName}/ecs/ssh-keys/rsa-key-wrh.pub
            # /home/mkousheh/.ssh/authorized_keys:
            #   mode: "000600"
            #   owner: mkousheh
            #   group: mkousheh
            #   source:
            #     !Sub https://s3.amazonaws.com/${BucketName}/ecs/ssh-keys/rsa-key-mkousheh.pub
            # /home/mukadder/.ssh/authorized_keys:
            #   mode: "000600"
            #   owner: mukadder
            #   group: mukadder
            #   source:
            #     !Sub https://s3.amazonaws.com/${BucketName}/ecs/ssh-keys/rsa-key-mukadder.pub
            # /home/dhaywood/.ssh/authorized_keys:
            #   mode: "000600"
            #   owner: dhaywood
            #   group: dhaywood
            #   source:
            #     !Sub https://s3.amazonaws.com/${BucketName}/ecs/ssh-keys/rsa-key-dhaywood.pub
            # /root/.ssh/git_rsa_key:
            #   mode: "000600"
            #   owner: root
            #   group: root
            #   source:
            #     !Sub https://s3.amazonaws.com/${BucketName}/bu_github_id_docker_rsa
            /opt/kuali/README.txt:
              content: !Sub |
                This directory contains the "environment" for each app to run
                in a docker container that it needs.
                This includes env-file, configuration files, keys, etc.
                These are specific to the ${Landscape} landscape.
              mode: "000775"
              owner: root
              group: root
            /opt/kuali/scripts/crontab:
              content: |
                SHELL=/bin/bash
                PATH=/sbin:/bin:/usr/sbin:/usr/bin
                MAILTO=root
                HOME=/
                
                # Send custom metrics to cloudwatch once every minute
                # NOTE: The cronjob will start, but it does nothing until you uncomment the 1 or more of the 3 lines below.
                # This is a test ec2 instance, so defaulting to running these scripts manually while shelled in."
                # Check the system log for any errors this script encounters"
                # * * * * * /opt/kuali/scripts/send-custom-cloudwatch-metrics1.sh
                # * * * * * /opt/kuali/scripts/send-custom-cloudwatch-metrics2.sh
                # * * * * * /opt/kuali/scripts/send-psuedo-cloudwatch-metrics.sh
                #
                0 3 * * * /bin/bash /opt/kuali/scripts/stopinstance.sh
              mode: "000644"
              owner: root
              group: root
            /opt/kuali/scripts/send-custom-cloudwatch-metrics1.sh:
              content: |
                #!/bin/bash
                # Adding additional cloudwatch metrics that include memory utilization.
                # See: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/mon-scripts.html
                /var/lib/aws-scripts-mon/mon-put-instance-data.pl \
                  --mem-used-incl-cache-buff \
                  --mem-util \
                  --mem-avail \
                  --disk-space-util \
                  --disk-path=/ \
                  --from-cron
              mode: "000744"
              owner: root
              group: root
            /opt/kuali/scripts/send-custom-cloudwatch-metrics2.sh:
              content: |
                #!/bin/bash
                # Cloudwatch metrics alternative that include are custom and cover all needed measurments.
                # Use this method as a replacement for the mon-put-instance-data.pl approach.
                # See: https://aws.amazon.com/premiumsupport/knowledge-center/cloudwatch-custom-metrics/
                export AWS_DEFAULT_REGION=us-east-1
                INSTANCEID=$(curl http://169.254.169.254/latest/meta-data/instance-id)
                USEDMEMORY_PERCENT=$(free -m | awk 'NR==2{printf "%.2f\t", $3*100/$2 }')
                USEDDISK_PERCENT=$(df / | awk 'NR==2{print $5}' | sed 's/\%//g')
                TCP_CONN=$(netstat -an | wc -l)
                TCP_CONN_PORT_80=$(netstat -an | grep 80 | wc -l)
                USERS=$(uptime | awk '{ print $4 }')
                IO_WAIT_PERCENT=$(iostat | awk 'NR==4 {print $4}')
                # If no average cpu record, then take the cpu as of this moment
                [ -z "$((cat /tmp/average.cpu | grep -P '^\d+(\.\d+)?$') 2> /dev/null)" ] && grep 'cpu ' /proc/stat | awk '{print ($2+$4)*100/($2+$4+$5)}' > /tmp/average.cpu
                AVERAGE_CPU=$(cat /tmp/average.cpu)
                # Compute the average cpu utilization by taking a reading every 2 seconds for 58 seconds and taking their average.
                # The cron job is on a minute schedule, so 58 seconds will ensure that a new average will be recorded BEFORE the next cron cycle.
                NEXT_AVERAGE_CPU=$(n=0 && cat <(echo "$(while [ $n -lt 4 ] ; do grep 'cpu ' /proc/stat && sleep 2 && n=$((n+1)) ; done)") | awk '{c++; t += ($2+$4)*100/($2+$4+$5)} END {print t/c}')
                echo $NEXT_AVERAGE_CPU > /tmp/average.cpu
                
                aws cloudwatch put-metric-data --dimensions Instance=$INSTANCEID --namespace "EC2TestCustomMetrics" --metric-name cpu-usage --value $AVERAGE_CPU
                aws cloudwatch put-metric-data --dimensions Instance=$INSTANCEID --namespace "EC2TestCustomMetrics" --metric-name memory-usage --value $USEDMEMORY_PERCENT
                aws cloudwatch put-metric-data --dimensions Instance=$INSTANCEID --namespace "EC2TestCustomMetrics" --metric-name disk-usage --value $USEDDISK_PERCENT
                aws cloudwatch put-metric-data --dimensions Instance=$INSTANCEID --namespace "EC2TestCustomMetrics" --metric-name tcp_connections --value $TCP_CONN
                aws cloudwatch put-metric-data --dimensions Instance=$INSTANCEID --namespace "EC2TestCustomMetrics" --metric-name tcp_connection_on_port_80 --value $TCP_CONN_PORT_80
                aws cloudwatch put-metric-data --dimensions Instance=$INSTANCEID --namespace "EC2TestCustomMetrics" --metric-name nbr_of_users --value $USERS
                aws cloudwatch put-metric-data --dimensions Instance=$INSTANCEID --namespace "EC2TestCustomMetrics" --metric-name io_wait --value $IO_WAIT_PERCENT
              mode: "000744"
              owner: root
              group: root
            /opt/kuali/scripts/send-psuedo-cloudwatch-metrics.sh:
              content: !Sub |
                #!/bin/bash
                
                # This function streams a json file from s3 that indicates dummy metrics to send to cloudwatch.
                # The purpose is to simulate higher (or lower) thresholds that would trigger alarms to engage
                # a scale-in or scale-out policy for auto-scaling activity.
                sendDummyMetrics() {
                  # local json=$(cat /c/whennemuth/workspaces/ecs_workspace/dummy-metrics/dummy-ec2-metrics.json)
                  local json=$(aws s3 cp s3://${BucketName}/dummydata/dummy-ec2-metrics.json)
                  local namespace=$(echo "$json" | jq -r '.Namespace')
                  local instances=$(echo $json | jq -r -c '.Instances[]')
                  local evals=()
                  while read -r instance; do
                    local instanceId=$(echo "$instance" | jq -r '.InstanceId')
                    local metrics=$(echo $instance | jq -r -c '.Metrics[]')
                    while read -r metric; do
                      local name=$(echo "$metric" | jq -r '.MetricName')
                      local baseline=$(echo "$metric" | jq -r '.BaselineValue')
                      local deviation=$(echo "$metric" | jq -r '.DeviationValue')
                      # Examples to set until to a value offset from current UTC time
                      # date +%s --date='+5 minute'
                      # date +%s --date='-1 hour'
                      local until=$(echo "$metric" | jq -r '.DeviateUntil')
                      local value=$baseline
                      local now=$(date +%s)
                      [ $until -gt $now ] && value=$deviation
                      local evalstr="$(cat <<EOF
                        aws cloudwatch put-metric-data \
                          --region ${AWS::Region} \
                          --dimensions Instance=$instanceId \
                          --namespace "$namespace" \
                          --metric-name $name \
                          --value $value
                EOF
                      )"
                      evals=("${!evals[@]}" "$(echo "$evalstr" | sed -E 's/[[:space:]]+/ /g' | xargs)")
                    done <<< "$metrics"
                  done <<< "$instances"
                
                  for cmd in "${!evals[@]}" ; do
                    echo "$cmd"
                    eval "$cmd"
                  done
                }
                
                sendDummyMetrics
              mode: "000744"
              owner: root
              group: root
            /etc/cfn/cfn-hup.conf:
              mode: "000400"
              owner: root
              group: root
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                # Change interval from default 15 minutes to 5
                interval=5
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.EC2Instance.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource EC2Instance --configsets AllConfigs
            /etc/awslogs/awscli.conf:
              content: !Sub |
                [plugins]
                cwlogs = cwlogs
                [default]
                region = ${AWS::Region}
            /etc/awslogs/awslogs.conf:
              content: !Sub |
                [general]
                state_file = /var/lib/awslogs/agent-state
                
                [/var/log/dmesg]
                file = /var/log/dmesg
                log_group_name = ${GlobalTag}-LG
                log_stream_name = /var/log/dmesg
                
                [/var/log/messages]
                file = /var/log/messages
                log_group_name = ${GlobalTag}-LG
                log_stream_name = /var/log/messages
                datetime_format = %b %d %H:%M:%S
                
                # [/var/log/docker]
                # file = /var/log/docker
                # log_group_name = ${GlobalTag}-LG
                # log_stream_name = /var/log/docker
                # datetime_format = %Y-%m-%dT%H:%M:%S.%f
            /opt/kuali/scripts/s3.download.configs.sh:
              content: !Sub |
                #!/bin/bash                
                echo "Downloading all configurations for containers from the s3 bucket, landscape ${!LANDSCAPE}"
                
                [ ! -d /opt/kuali/s3 ] && mkdir -p /opt/kuali/s3
                cd /opt/kuali/s3
                aws s3 sync --delete \
                  --exclude "*" \
                  --include "core/*" \
                  --include "portal/*" \
                  --include "pdf/*" \
                  --include "kuali/main/config/kc-config-rds.xml" \
                  s3://${BucketName}/${!LANDSCAPE}/ .
                mv /opt/kuali/s3/kuali/main/config/kc-config-rds.xml /opt/kuali/s3/kuali/main/config/kc-config.xml
                aws s3 cp s3://${BucketName}/rice.cer /opt/kuali/s3/kuali/main/config/
                aws s3 cp s3://${BucketName}/rice.keystore /opt/kuali/s3/kuali/main/config/
              mode: "000775"
              owner: root
              group: root
            /opt/kuali/scripts/process.env.file.sh:
              content: |
                #!/bin/bash                
                # Turn a name=value line into an "export name='value'" line
                getLineExport() {
                  local line=$(echo -n "$1" | xargs) # Use xargs to trim the line.
                  # Return an empty string if the line is a properties file comment
                  [ "${line:0:1}" == "#" ] && echo "" && exit 0;
                  [ -z "$line" ] && echo "" && exit 0;
                  if [ -n "$(echo $testline | grep -P '\x22')" ] ; then
                    echo "export $line"
                  else
                    # Put double quotes around the exported variable value
                    echo "export $(echo $line | sed 's/=/="/1')\""
                  fi
                }
                  
                # Create a script to export all environment variables in the mounted directory before starting node
                createExportFile() {
                  local ENV_FILE_FROM_S3="$1"
                  if [ ! -f $ENV_FILE_FROM_S3 ] ; then
                    echo "ERROR! MISSING $ENV_FILE_FROM_S3"
                    exit 1
                  else
                    cd $(dirname $ENV_FILE_FROM_S3)
                    rm -f export.sh
                    echo "Creating $(pwd)/export.sh..."
                    while read line ; do
                      expline="$(getLineExport "$line")"
                      [ -z "$expline" ] && continue
                      prop=$(echo "$line" | cut -f1 -d '=')
                      # Override some of the existing environment variables
                      [ "${prop^^}" == "SHIB_HOST" ] && expline="export SHIB_HOST="
                      [ "${prop^^}" == "ROOT_DIR" ]  && expline="export ROOT_DIR=/var/core-temp"
                      echo "Setting env var $prop"
                      echo "$expline" >> export.sh
                    done < $ENV_FILE_FROM_S3
                    # In case the file from s3 originated on a windows file system, remove return carriage chars
                    sed -i 's/\r//g' export.sh
                  fi
                }

                export EC2_HOST=$(curl -s http://169.254.169.254/latest/meta-data/public-hostname)
                DOMAIN_NAME=$(echo ${EC2_HOST} | cut -d'/' -f3) # Strips off the "http://" portion and trailing "/"

                # Perform a replacement in kc-config.xml of application.host parameter value with this ec2 public host name.
                sed -i "s/APPLICATION_HOST/$DOMAIN_NAME/" /opt/kuali/s3/kuali/main/config/kc-config.xml

                # Perform a replacement in all environment.variables.s3 files of existing application host entries with this ec2 public host name.
                for f in $(env | grep 'ENV_FILE_FROM_S3') ; do
                  envfile="$(echo $f | cut -d'=' -f2)"
                  # Replace the standard kuali-research-[env].bu.edu references with the public host name of this ec2 instance.
                  sed -i -r "s/kuali-research.*.bu.edu/$DOMAIN_NAME/g" "$envfile"
                  # Create the export.sh file
                  createExportFile "$envfile"
                done

                exit 0
              mode: "000775"
              owner: root
              group: root
            /opt/kuali/scripts/start.docker.containers.sh:
              content: !Sub |
                #!/bin/bash
                
                # Prepare directories for mounting to kuali-research container
                [ ! -d /opt/kuali/kc_printing ] && mkdir -p /opt/kuali/kc_printing
                [ ! -d /opt/kuali/kc_javamelody ] && mkdir -p /opt/kuali/kc_javamelody
                [ ! -d /opt/kuali/kc_attachments ] && mkdir -p /opt/kuali/kc_attachments
                [ ! -d /opt/kuali/kc_tomcat_logs ] && mkdir -p /opt/kuali/kc_tomcat_logs
                [ ! -d /opt/kuali/kc_newrelic_logs ] && mkdir -p /opt/kuali/kc_newrelic_logs

                # Set these environment variables for the kuali-research container
                # These should have been passed in by configset command.
                #  - LANDSCAPE
                #  - NEW_RELIC_LICENSE_KEY
                #  - NEW_RELIC_AGENT_ENABLED
                #  - JAVA_ENV
                # But not this one, so set it here:
                export EC2_HOST=$(curl -s http://169.254.169.254/latest/meta-data/public-hostname)

                # Perform a placeholder replacement in nginx.conf with this ec2 public host name
                sed -i "s/EC2_HOST/$(echo ${!EC2_HOST} | sed 's/\//\\\//g')/g" /opt/kuali/nginx/nginx.conf

                # Remove all existing containers
                /usr/local/bin/docker-compose down 2> /dev/null || true

                # Log into the docker registry
                $(aws ecr get-login --no-include-email --region ${AWS::Region})

                # Create the nginx log files to mount to if none exist
                [ ! -f /opt/kuali/nginx/error.log ] && touch /opt/kuali/nginx/error.log
                [ ! -f /opt/kuali/nginx/access.log ] && touch /opt/kuali/nginx/access.log

                /usr/local/bin/docker-compose up --detach
                
              mode: "000775"
              owner: root
              group: root
            /opt/kuali/scripts/docker-compose.yaml:
              content: !Sub |
                version: '3'
                services:

                  proxy: 
                    image: nginx:latest
                    container_name: reverse-proxy
                    restart: unless-stopped
                    volumes:
                      - /opt/kuali/nginx/nginx.conf:/etc/nginx/nginx.conf
                      - /opt/kuali/nginx/error.log:/etc/nginx/error.log
                      - /opt/kuali/nginx/access.log:/etc/nginx/access.log
                      - /opt/kuali/nginx/certs/:/etc/nginx/ssl/
                    ports:
                      - 80:80
                      - 443:443

                  cor-main:
                    image: ${!CORE_IMAGE}
                    container_name: cor-main
                    restart: unless-stopped
                    env_file: /opt/kuali/s3/core/environment.variables.s3
                    volumes:
                      - /opt/kuali/s3/core:/var/core-config
                    logging:
                      driver: awslogs
                      options:
                        awslogs-region: ${AWS::Region}
                        awslogs-group: ${GlobalTag}-LG
                        awslogs-stream: core-docker-container
                        awslogs-create-group: "true"
                    expose:
                      - "3000"

                  kuali-research:
                    image: ${!KC_IMAGE}
                    container_name: kuali-research
                    restart: unless-stopped
                    volumes:
                      - /opt/kuali/s3/kuali/main/config:/opt/kuali/main/config
                      - /opt/kuali/kc_printing:/opt/kuali/logs/printing/logs
                      - /opt/kuali/kc_javamelody:/var/log/javamelody
                      - /opt/kuali/kc_attachments:/opt/tomcat/temp/dev/attachments
                      - /opt/kuali/kc_tomcat_logs:/opt/tomcat/logs
                      - /opt/kuali/kc_newrelic_logs:/var/log/newrelic
                    environment:
                      - NEW_RELIC_LICENSE_KEY=${!NEW_RELIC_LICENSE_KEY}
                      - NEW_RELIC_AGENT_ENABLED=${!NEW_RELIC_AGENT_ENABLED}
                      - JAVA_ENV=${!NEW_RELIC_ENVIRONMENT}
                      - EC2_HOSTNAME=${!EC2_HOST}
                    logging:
                      driver: awslogs
                      options:
                        awslogs-region: ${AWS::Region}
                        awslogs-group: ${GlobalTag}-LG
                        awslogs-stream: kc-docker-container
                        awslogs-create-group: "true"
                    expose:
                      - "8080"
                    # ports:
                    #   - 8080:8080
                    #   - 8009:8009

                  research-portal:
                    image: ${!PORTAL_IMAGE}
                    container_name: research-portal
                    restart: unless-stopped
                    volumes:
                      - /opt/kuali/s3/portal:/var/portal-config
                    env_file: /opt/kuali/s3/portal/environment.variables.s3 
                    logging:
                      driver: awslogs
                      options:
                        awslogs-region: ${AWS::Region}
                        awslogs-group: ${GlobalTag}-LG
                        awslogs-stream: portal-docker-container
                        awslogs-create-group: "true"
                    expose:
                    - "3005"

                  research-pdf:
                    image: ${!PDF_IMAGE}
                    container_name: research-pdf
                    restart: unless-stopped
                    env_file: /opt/kuali/s3/pdf/environment.variables.s3
                    logging:
                      driver: awslogs
                      options:
                        awslogs-region: ${AWS::Region}
                        awslogs-group: ${GlobalTag}-LG
                        awslogs-stream: pdf-docker-container
                        awslogs-create-group: "true"
                    expose:
                    - "3006"

              mode: "000775"
              owner: root
              group: root
            /opt/kuali/nginx/nginx.conf:
              content: !Sub |
                # https://www.domysee.com/blogposts/reverse-proxy-nginx-docker-compose
                # https://linuxize.com/post/nginx-reverse-proxy/

                events { }

                http {
                  access_log /etc/nginx/access.log;
                  error_log /etc/nginx/error.log warn;
                  client_max_body_size 20m;
                  include mime.types;

                  upstream docker-kc {
                    server kuali-research:8080;
                  }
                  upstream docker-core {
                    server cor-main:3000;
                  }
                  upstream docker-portal {
                    server research-portal:3005;
                  }
                  upstream docker-pdf {
                    server research-pdf:3006;
                  }

                  server { 
                    # Example: http://ec2-3-91-98-11.compute-1.amazonaws.com/ 
                    server_name EC2_HOST;
                    listen 80;

                    # Handle health check requests directly 
                    location /health-check {
                      proxy_pass http://docker-kc/index.jsp;
                    }

                    # Redirect all remaining http requests to https  
                    location / {  
                        return 301 https://$server_name$request_uri;  
                    }
                  }

                  server {
                    server_name EC2_HOST;
                    listen 443 ssl http2;
                    ssl on;
                    ssl_certificate /etc/nginx/ssl/myec2.crt;
                    ssl_certificate_key /etc/nginx/ssl/myec2.key;

                    # Paths to kc
                    location = / {
                      return 301 https://$server_name/kc;
                    }
                    location /kc {
                      # proxy_set_header Host $host;
                      proxy_pass http://docker-kc;
                      rewrite ^/(.*)$ /$1 break;
                    }
                    
                    # Paths to dashboard
                    location ~ ^/dashboard/?$ {
                      # Redirect basic dashboard uri to 
                      return 301 https://$server_name/dashboard/common-tasks;
                    }
                    location /dashboard {
                      proxy_pass http://docker-portal;
                    }
                    location /api/v1/dashboard {
                      proxy_pass http://docker-portal;
                    }

                    # Paths to research-pdf
                    location /pdf {
                      proxy_pass http://docker-pdf;
                    }
                    location /api/v1/pdf {
                      proxy_pass http://docker-pdf;
                    }

                    # Path to core
                    location = /apps {
                      proxy_pass http://docker-core/cor/main/?p=/apps;
                    }
                    location ~ ^/((img)|(js)|(css)|(font))$ {
                      proxy_pass http://docker-core;
                      rewrite ^/(.*)$ /cor/main/$1 break;
                    }
                    location / {
                      # Anything left over goes to cor-main
                      proxy_pass http://docker-core;
                    }
                  }                  
                }
            /opt/kuali/scripts/stopinstance.sh:
              content: !Sub |
                #!/bin/bash
                # Target this script with a crontab and the instance will be shutdown on the crontab schedule.
                # You can skip the next scheduled shutdown by creating a /tmp/skipshutdown file.
                if [ -f /tmp/skipshutdown ] ; then
                  echo "$(date) Skipping shutdown for today - skip file found." >>  /usr/local/sbin/cronlog
                  rm -f /tmp/skipshutdown
                  exit 0
                fi
                echo "$(date) Stopping instance per cron schedule..." >> /usr/local/sbin/cronlog
                aws ec2 stop-instances --region ${AWS::Region} --instance-ids $(curl http://169.254.169.254/latest/meta-data/instance-id) >> /usr/local/sbin/cronlog 2>&1
              mode: "000775"
              owner: root
              group: root
        01_get_configs_from_s3:
          commands:
            cmd01:
              cwd: /opt/kuali/scripts
              env:
                LANDSCAPE: !Sub "${Landscape}"
              command: bash s3.download.configs.sh
        02_create_env_exports_file:
          commands:
            cmd01:
              cwd: /opt/kuali/scripts
              env:
                ENV_FILE_FROM_S3_CORE: /opt/kuali/s3/core/environment.variables.s3
                ENV_FILE_FROM_S3_PORTAL: /opt/kuali/s3/portal/environment.variables.s3
                ENV_FILE_FROM_S3_PDF: /opt/kuali/s3/pdf/environment.variables.s3
              command: bash process.env.file.sh
        03_docker_run_container:
          commands:
            cmd01:
              cwd: /opt/kuali/scripts
              env:
                LANDSCAPE: !Sub "${Landscape}"
                JAVA_ENV: !Sub "${Landscape}"
                NEW_RELIC_ENVIRONMENT: !Sub "${Landscape}"
                NEW_RELIC_LICENSE_KEY: !Sub "{NewrelicLicsenseKey}"
                NEW_RELIC_AGENT_ENABLED: !Sub "${EnableNewRelicAPM}"
                KC_IMAGE: !Sub "${KcImage}"
                CORE_IMAGE: !Sub "${CoreImage}"
                PORTAL_IMAGE: !Sub "${PortalImage}"
                PDF_IMAGE: !Sub "${PdfImage}"
              command: bash start.docker.containers.sh
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                - /etc/cfn/cfn-hup.conf
                - /etc/cfn/hooks.d/cfn-auto-reloader.conf
              # awslogs:
              # NOTE: If you are using Amazon Linux 2, the awslogs service is now called "awslogsd"
              awslogs:
                enabled: true
                ensureRunning: true
                files:
                - /etc/awslogs/awslogs.conf
                - /etc/awslogs/awscli.conf
        04_start_cron_for_custom_cloudwatch_metrics:
          commands:
            cmd01:
              command: crontab -u root /opt/kuali/scripts/crontab
              env:
                LANDSCAPE: !Sub "${Landscape}"

  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      RoleName: !Sub ${GlobalTag}-role
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
      - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      - arn:aws:iam::aws:policy/CloudWatchFullAccess
      Policies:
      - PolicyName:
          !Sub "stop-ec2-instance-policy"
        PolicyDocument:
          Statement:
          - Effect: Allow
            Resource: "arn:aws:ec2:*:*:instance/${ec2:SourceInstanceARN}"
            Action:
            - ec2:StopInstances
          - Effect: Allow
            Resource:
            - arn:aws:s3:::kuali-research-ec2-setup*
            - arn:aws:s3:::kuali-docker-run-stdout*
            - arn:aws:s3:::kuali-research-pdf-*
            Action: "*"


  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub ${GlobalTag}-profile
      Path: "/"
      Roles:
      - !Ref EC2Role

  EC2InstanceLogsGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub ${GlobalTag}-LG
      RetentionInDays: 30
      
  EC2InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Warrens security group for a test t2 ec2 instance
      GroupName: !Sub ${GlobalTag}-SG1
      # VpcId: !FindInMap
      #   - SubnetIdMap
      #   - !Ref Landscape
      #   - vpc
      Tags:
      - Key: Name
        Value: !Sub ${GlobalTag}.SG
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: "0.0.0.0/0"
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: "0.0.0.0/0"
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: "0.0.0.0/0"
      - IpProtocol: tcp
        FromPort: 1043
        ToPort: 1043
        CidrIp: "0.0.0.0/0"

  EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      InstanceId: !Ref EC2Instance

Outputs:
  PublicIP:
    Value:
      !GetAtt EC2Instance.PublicIp
  PublicDnsName:
    Value:
      !GetAtt EC2Instance.PublicDnsName
