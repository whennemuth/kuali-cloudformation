AWSTemplateFormatVersion: 2010-09-09


Description: >
  Create a new ec2 instance with the kuali suite of modules deployed as containers and proxied with nginx.
  https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Scenario1.html


Parameters:

  GlobalTag:
    Type: String
    Description: >
      A common value that all resources in this template will have prefixed to
      their name and attached as a tag to establish a bundling through naming convention.
    Default: kuali-ec2

  BucketName:
    Type: String
    Description: The S3 bucket kuali research cloudformation templates, config files, keys, etc. are stored
    Default: kuali-conf

  Landscape:
    Description: Specify which landscape to build into the VPC (currently just a label - kc-config.xml is hard-coded for now).
    Type: String
    AllowedValues:
    - sb
    - ci
    - qa
    - stg
    - prod
    ConstraintDescription: >
      This parameter is restricted to the following values: sb, ci, qa, stg, prod
    Default: sb

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: The id of the vpc to deploy to.

  CampusSubnet:
    Type: AWS::EC2::Subnet::Id
    Description: Id of the private application subnet that admits access from bu vpns through transit gateway attachment.

  # https://docs.aws.amazon.com/AmazonECS/latest/developerguide/retrieve-ecs-optimized_AMI.html
  ECSAMI:
    Description: AMI ID
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id

  EC2InstanceType:
    Type: String
    Description: What type of EC2 instance should be used for hosting?
    AllowedValues:
    - t2.large
    - t2.xlarge
    - t3.large
    - t3.xlarge
    - m4.large
    - m4.xlarge
    - m5.large
    - m5.xlarge
    - c5.large
    - c5.xlarge
    ConstraintDescription: Specified instance type is not within selection list.
    Default: m4.large

  # NOTE: The type below triggers a check by aws for existence of the keypair as part of a validation check.
  # However, this makes the parameter required, even for stack updates. Use "String" as type to forego the
  # validation check and allow the parameter to be optional during updates.
  EC2KeypairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: The keypair for ssh use against the ec2 instance

  CoreImage:
    Type: String
    Description: 'Example: 770203350335.dkr.ecr.us-east-1.amazonaws.com/kuali-core:2001.0040'

  KcImage:
    Type: String
    Description: 'Example: 770203350335.dkr.ecr.us-east-1.amazonaws.com/kuali-coeus:2001.0040'

  PortalImage:
    Type: String
    Description: 'Example: 770203350335.dkr.ecr.us-east-1.amazonaws.com/kuali-portal:2001.0040'

  PdfImage:
    Type: String
    Description: 'Example: 770203350335.dkr.ecr.us-east-1.amazonaws.com/kuali-research-pdf:2002.0003'

  PdfS3BucketName:
    Type: String
    Description: |
      Provide the name of the s3 bucket the pdf service is to use. Else type "cancel" if it 
      already exists or you are not using the pdf service and want to skip bucket creation.
    Default: "auto"

  EnableNewRelicAPM:
    Type: String
    Description: Is newrelic APM to be enabled for this landscape?
    Default: "false"
    AllowedValues:
    - "true"
    - "false"
    ConstraintDescription: Enter "true" or "false" only.

  EnableNewRelicInfrastructure:
    Type: String
    Description: Is newrelic infrastructure (with logging) to be enabled for this landscape?
    Default: "false"
    AllowedValues:
    - "true"
    - "false"
    ConstraintDescription: Enter "true" or "false" only.


Conditions:
  pdfS3AutoName: !Equals [!Ref PdfS3BucketName, auto]
  pdfS3NoBucket: !Equals [!Ref PdfS3BucketName, cancel]
  createPdfS3bBucket: !Not [!Equals [!Ref PdfS3BucketName, cancel]]

Mappings:
  2faCidrs:
    first:
      cidr: "168.122.81.0/24"
    second:
      cidr: "168.122.82.0/23"
    third:
      cidr: "168.122.76.0/24"
    fourth:
      cidr: "168.122.68.0/24"
    fifth:
      cidr: "168.122.69.0/24"
    sixth:
      cidr: "10.1.0.0/21"

      
Resources:

  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      RoleName: !Sub ${GlobalTag}-${Landscape}-ec2-role
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      - arn:aws:iam::aws:policy/AWSCloudFormationReadOnlyAccess
      - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
      - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      - arn:aws:iam::aws:policy/CloudWatchFullAccess
      Policies:
      - PolicyName:
          !Sub ${GlobalTag}-${Landscape}-stop-ec2-instance
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - ec2:StopInstances
            Resource: 
            - arn:aws:ec2:*:*:instance/*
            Condition:
              StringLike:
                ec2:ResourceTag/Name:
                  !Sub ${GlobalTag}-${Landscape}-instance
              StringEquals:
                ec2:ResourceTag/self-stoppable:
                  'true'
      - PolicyName:
          !Sub "${GlobalTag}-${Landscape}-read-s3-content"
        PolicyDocument:
          Statement:
          - Effect: Allow
            Resource: "*"
            Action:
            - ec2:DescribeTags
          - Effect: Allow
            Resource:
            - arn:aws:s3:::kuali-conf*
            - arn:aws:s3:::kuali-docker-run-stdout*
            - !Sub arn:aws:s3:::${PdfS3BucketName}*
            Action: "*"
      - PolicyName:
          !Sub "${GlobalTag}-${Landscape}-read-secrets"
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - secretsmanager:GetResourcePolicy
            - secretsmanager:GetSecretValue
            - secretsmanager:DescribeSecret
            - secretsmanager:ListSecretVersionIds
            Resource:
            - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:kuali/${Landscape}/*
      - PolicyName:
          !Sub "${GlobalTag}-${Landscape}-read-rds-metadata"
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - rds:Describe*
            - rds:ListTagsForResource
            Resource:
            - !Sub arn:aws:rds:${AWS::Region}:${AWS::AccountId}:db:kuali-oracle-${Landscape}


  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub ${GlobalTag}-${Landscape}-profile
      Path: "/"
      Roles:
      - !Ref EC2Role

  S3BucketForPDF:
    Type: AWS::S3::Bucket
    Condition: createPdfS3bBucket
    Properties:
      AccessControl: Private
      BucketName: !If
        - pdfS3AutoName
        - !Sub kuali-pdf-${Landscape}
        - !Ref PdfS3BucketName
      LifecycleConfiguration:
        Rules:
        - Id: OneZoneIARule
          Status: Enabled
          ExpirationInDays: '365'
          Transitions:
            - TransitionInDays: '30'
              StorageClass: ONEZONE_IA

  EC2InstanceLogsGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub ${GlobalTag}-${Landscape}
      RetentionInDays: 30
      
  EC2Instance:
    Type: AWS::EC2::Instance
    Description: EC2 instance for hosting kuali research modules.
    Properties:
      Tags:
      - Key: Name
        Value: !Sub ${GlobalTag}-${Landscape}-instance
      - Key: self-stoppable
        Value: 'false'
      ImageId: 
        !Ref ECSAMI
      InstanceType:
        !Ref EC2InstanceType
      SecurityGroupIds:
      - !GetAtt  EC2InstanceSecurityGroup.GroupId
      KeyName: !Ref EC2KeypairName
      IamInstanceProfile:
        !Ref EC2InstanceProfile
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 64
            DeleteOnTermination: true
      SubnetId: !Ref CampusSubnet

      UserData: 
        "Fn::Base64": !Sub |
          #!/bin/bash
          yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
          yum install -y aws-cfn-bootstrap
          yum install -y git
          # Add perl and zip libraries needed to unpack and run custom metric monitoring for cloudwatch.
          yum install -y perl-Switch perl-DateTime perl-Sys-Syslog perl-LWP-Protocol-https perl-Digest-SHA.x86_64
          yum install -y zip unzip
          yum install -y sysstat
          yum install -y jq
          # Install and run docker
          amazon-linux-extras install -y docker
          service docker start
          usermod -a -G docker ec2-user
          chkconfig docker on
          # Install docker-compose
          curl \
            -L https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) \
            -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
          
          # Create certificates for ssl
          mkdir -p /opt/kuali/nginx/certs
          openssl req -newkey rsa:4096 \
            -x509 \
            -sha256 \
            -days 3650 \
            -nodes \
            -out /opt/kuali/nginx/certs/myec2.crt \
            -keyout /opt/kuali/nginx/certs/myec2.key \
            -subj "/C=US/ST=MA/L=Boston/O=BU/OU=IST/CN=Ec2Instance"

          # Install required packages for scripts that will monitor and upload custom metrics to cloudwatch.
          curl https://aws-cloudwatch.s3.amazonaws.com/downloads/CloudWatchMonitoringScripts-1.2.2.zip \
            -o /var/lib/ && CloudWatchMonitoringScripts-1.2.2.zip
          unzip -d /var/lib/ CloudWatchMonitoringScripts-1.2.2.zip
          rm -f /var/lib/CloudWatchMonitoringScripts-1.2.2.zip
          
          # Implement all the metadata in AWS::CloudFormation::Init
          /opt/aws/bin/cfn-init \
            -v \
            --configsets AllConfigs \
            --region ${AWS::Region} \
            --stack ${AWS::StackName} \
            --resource EC2Instance
            
          # Now that all initialization is done signal success
          /opt/aws/bin/cfn-signal \
            -e $? \
            --region ${AWS::Region} \
            --stack ${AWS::StackName} \
            --resource EC2Instance

    Metadata:
      AWS::CloudFormation::Authentication:
        # This authentication will make possible replacing inline file content with paths to files in s3
        # https://aws.amazon.com/blogs/devops/authenticated-file-downloads-with-cloudformation/
        S3AccessCreds:
          type: S3
          roleName:
            !Ref EC2Role
          buckets:
          - !Ref BucketName

      AWS::CloudFormation::Init:
        configSets:
          AllConfigs:
          - getFiles
          - ConfigSet: RunCommands
          GetFiles:
          - getFiles
          RunCommands:
          - ConfigSet: cmd01
          - ConfigSet: cmd02
          - ConfigSet: cmd03
          # - ConfigSet: cmd04
          cmd01:
          - 01_get_configs_from_s3
          cmd02:
          - 02_create_env_exports_file
          cmd03:
          - 03_process_kc-config_file
          cmd04:
          - 04_docker_run_container
          cmd05:
          - 05_start_cron_for_custom_cloudwatch_metrics
        getFiles:
          packages:
            yum:
              awslogs: []
          files:
            /opt/kuali/README.txt:
              content: !Sub |
                This directory contains the "environment" for each app to run
                in a docker container that it needs.
                This includes env-file, configuration files, keys, etc.
                These are specific to the ${Landscape} landscape.
              mode: "000775"
              owner: root
              group: root
            /opt/kuali/scripts/crontab:
              content: !Sub |
                SHELL=/bin/bash
                PATH=/sbin:/bin:/usr/sbin:/usr/bin
                MAILTO=root
                HOME=/
                
                # Send custom metrics to cloudwatch once every minute
                # NOTE: The cronjob will start, but it does nothing until you uncomment the 1 or more of the 3 lines below.
                # This is a test ec2 instance, so defaulting to running these scripts manually while shelled in."
                # Check the system log for any errors this script encounters"
                # * * * * * /opt/kuali/scripts/send-custom-cloudwatch-metrics.sh "custom1"
                # * * * * * /opt/kuali/scripts/send-custom-cloudwatch-metrics.sh "custom2" "ec2"
                # * * * * * /opt/kuali/scripts/send-custom-cloudwatch-metrics.sh "psuedo"  "ec2" "${BucketName}" "${AWS::Region}"
                #
                0 8 * * * /bin/bash /opt/kuali/scripts/stop-instance.sh ${AWS::Region}
              mode: "000644"
              owner: root
              group: root
            /etc/cfn/cfn-hup.conf:
              mode: "000400"
              owner: root
              group: root
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                # Change interval from default 15 minutes to 5
                interval=5
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.EC2Instance.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource EC2Instance --configsets AllConfigs
            /etc/awslogs/awscli.conf:
              content: !Sub |
                [plugins]
                cwlogs = cwlogs
                [default]
                region = ${AWS::Region}
            /etc/awslogs/awslogs.conf:
              content: !Sub |
                [general]
                state_file = /var/lib/awslogs/agent-state
                
                [/var/log/dmesg]
                file = /var/log/dmesg
                log_group_name = ${GlobalTag}-${Landscape}-LG
                log_stream_name = /var/log/dmesg
                
                [/var/log/messages]
                file = /var/log/messages
                log_group_name = ${GlobalTag}-${Landscape}-LG
                log_stream_name = /var/log/messages
                datetime_format = %b %d %H:%M:%S
                
                [/var/log/docker]
                file = /var/log/docker
                log_group_name = ${GlobalTag}-${Landscape}-LG
                log_stream_name = /var/log/docker
                datetime_format = %Y-%m-%dT%H:%M:%S.%f
            /opt/kuali/scripts/process-configs.sh:
              source: !Sub http://${BucketName}.s3.amazonaws.com/cloudformation/scripts/ec2/process-configs.sh
              content: !Sub |
              mode: "000775"
              owner: root
              group: root
            /opt/kuali/scripts/stop-instance.sh:
              source: !Sub http://${BucketName}.s3.amazonaws.com/cloudformation/scripts/ec2/stop-instance.sh
              content: !Sub |
              mode: "000775"
              owner: root
              group: root
            /opt/kuali/scripts/send-custom-cloudwatch-metrics.sh:
              source: !Sub http://${BucketName}.s3.amazonaws.com/cloudformation/scripts/ec2/cloudwatch-metrics.sh
              mode: "000744"
              owner: root
              group: root
            /opt/kuali/scripts/start.docker.containers.sh:
              content: !Sub |
                #!/bin/bash
                
                # Prepare directories for mounting to kuali-research container
                [ ! -d /opt/kuali/kc_printing ] && mkdir -p /opt/kuali/kc_printing
                [ ! -d /opt/kuali/kc_javamelody ] && mkdir -p /opt/kuali/kc_javamelody
                [ ! -d /opt/kuali/kc_attachments ] && mkdir -p /opt/kuali/kc_attachments
                [ ! -d /opt/kuali/kc_tomcat_logs ] && mkdir -p /opt/kuali/kc_tomcat_logs
                [ ! -d /opt/kuali/kc_newrelic_logs ] && mkdir -p /opt/kuali/kc_newrelic_logs

                # Set these environment variables for the kuali-research container
                # These should have been passed in by configset command.
                #  - LANDSCAPE
                #  - NEW_RELIC_LICENSE_KEY
                #  - NEW_RELIC_AGENT_ENABLED
                #  - JAVA_ENV
                # But not this one, so set it here:
                # export EC2_HOST=$(curl -s http://169.254.169.254/latest/meta-data/public-hostname)
                export EC2_HOST=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)

                # Perform a placeholder replacement in nginx.conf with this ec2 public host name
                sed -i "s/EC2_HOST/$(echo ${!EC2_HOST} | sed 's/\//\\\//g')/g" /opt/kuali/nginx/nginx.conf

                # Remove all existing containers
                /usr/local/bin/docker-compose down 2> /dev/null || true

                # Log into the docker registry
                $(aws ecr get-login --no-include-email --region ${AWS::Region})

                # Create the nginx log files to mount to if none exist
                [ ! -f /opt/kuali/nginx/error.log ] && touch /opt/kuali/nginx/error.log
                [ ! -f /opt/kuali/nginx/access.log ] && touch /opt/kuali/nginx/access.log

                /usr/local/bin/docker-compose up --detach
                
              mode: "000775"
              owner: root
              group: root
            /opt/kuali/scripts/docker-compose.yaml:
              content: !Sub |
                version: '3'
                services:

                  proxy: 
                    image: nginx:latest
                    container_name: reverse-proxy
                    restart: unless-stopped
                    volumes:
                      - /opt/kuali/nginx/nginx.conf:/etc/nginx/nginx.conf
                      - /opt/kuali/nginx/error.log:/etc/nginx/error.log
                      - /opt/kuali/nginx/access.log:/etc/nginx/access.log
                      - /opt/kuali/nginx/certs/:/etc/nginx/ssl/
                    ports:
                      - 80:80
                      - 443:443

                  cor-main:
                    image: ${!CORE_IMAGE}
                    container_name: cor-main
                    restart: unless-stopped
                    env_file: /opt/kuali/s3/core/environment.variables.s3
                    volumes:
                      - /opt/kuali/s3/core:/var/core-config
                    logging:
                      driver: awslogs
                      options:
                        awslogs-region: ${AWS::Region}
                        awslogs-group: ${GlobalTag}-${Landscape}
                        awslogs-stream: core-docker-container
                        awslogs-create-group: "true"
                    expose:
                      - "3000"

                  kuali-research:
                    image: ${!KC_IMAGE}
                    container_name: kuali-research
                    restart: unless-stopped
                    volumes:
                      - /opt/kuali/s3/kc:/opt/kuali/main/config
                      - /opt/kuali/kc_printing:/opt/kuali/logs/printing/logs
                      - /opt/kuali/kc_javamelody:/var/log/javamelody
                      - /opt/kuali/kc_attachments:/opt/tomcat/temp/dev/attachments
                      - /opt/kuali/kc_tomcat_logs:/opt/tomcat/logs
                      - /opt/kuali/kc_newrelic_logs:/var/log/newrelic
                    environment:
                      - NEW_RELIC_LICENSE_KEY=${!NEW_RELIC_LICENSE_KEY}
                      - NEW_RELIC_AGENT_ENABLED=${!NEW_RELIC_AGENT_ENABLED}
                      - JAVA_ENV=${!NEW_RELIC_ENVIRONMENT}
                      - EC2_HOSTNAME=${!EC2_HOST}
                    logging:
                      driver: awslogs
                      options:
                        awslogs-region: ${AWS::Region}
                        awslogs-group: ${GlobalTag}-${Landscape}
                        awslogs-stream: kc-docker-container
                        awslogs-create-group: "true"
                    expose:
                      - "8080"
                    # ports:
                    #   - 8080:8080
                    #   - 8009:8009

                  research-portal:
                    image: ${!PORTAL_IMAGE}
                    container_name: research-portal
                    restart: unless-stopped
                    volumes:
                      - /opt/kuali/s3/portal:/var/portal-config
                    env_file: /opt/kuali/s3/portal/environment.variables.s3 
                    logging:
                      driver: awslogs
                      options:
                        awslogs-region: ${AWS::Region}
                        awslogs-group: ${GlobalTag}-${Landscape}
                        awslogs-stream: portal-docker-container
                        awslogs-create-group: "true"
                    expose:
                    - "3005"

                  research-pdf:
                    image: ${!PDF_IMAGE}
                    container_name: research-pdf
                    restart: unless-stopped
                    env_file: /opt/kuali/s3/pdf/environment.variables.s3
                    logging:
                      driver: awslogs
                      options:
                        awslogs-region: ${AWS::Region}
                        awslogs-group: ${GlobalTag}-${Landscape}
                        awslogs-stream: pdf-docker-container
                        awslogs-create-group: "true"
                    expose:
                    - "3006"

              mode: "000775"
              owner: root
              group: root
            /opt/kuali/nginx/nginx.conf:
              content: !Sub |
                # https://www.domysee.com/blogposts/reverse-proxy-nginx-docker-compose
                # https://linuxize.com/post/nginx-reverse-proxy/

                events { }

                http {
                  access_log /etc/nginx/access.log;
                  error_log /etc/nginx/error.log warn;
                  client_max_body_size 20m;
                  include mime.types;

                  upstream docker-kc {
                    server kuali-research:8080;
                  }
                  upstream docker-core {
                    server cor-main:3000;
                  }
                  upstream docker-portal {
                    server research-portal:3005;
                  }
                  upstream docker-pdf {
                    server research-pdf:3006;
                  }

                  server { 
                    # Example: http://ec2-3-91-98-11.compute-1.amazonaws.com/ 
                    server_name EC2_HOST;
                    listen 80;

                    # Handle health check requests directly 
                    location /health-check {
                      proxy_pass http://docker-kc/index.jsp;
                    }

                    # Redirect all remaining http requests to https  
                    location / {  
                        return 301 https://$server_name$request_uri;  
                    }
                  }

                  server {
                    server_name EC2_HOST;
                    listen 443 ssl http2;
                    ssl on;
                    ssl_certificate /etc/nginx/ssl/myec2.crt;
                    ssl_certificate_key /etc/nginx/ssl/myec2.key;

                    # Paths to kc
                    location = / {
                      return 301 https://$server_name/kc;
                    }
                    location /kc {
                      # proxy_set_header Host $host;
                      proxy_pass http://docker-kc;
                      rewrite ^/(.*)$ /$1 break;
                    }
                    
                    # Paths to dashboard
                    location ~ ^/dashboard/?$ {
                      # Redirect basic dashboard uri to 
                      return 301 https://$server_name/dashboard/common-tasks;
                    }
                    location /dashboard {
                      proxy_pass http://docker-portal;
                    }
                    location /api/v1/dashboard {
                      proxy_pass http://docker-portal;
                    }

                    # Paths to research-pdf
                    location /pdf {
                      proxy_pass http://docker-pdf;
                    }
                    location /api/v1/pdf {
                      proxy_pass http://docker-pdf;
                    }

                    # Path to core
                    location = /apps {
                      proxy_pass http://docker-core/cor/main/?p=/apps;
                    }
                    location ~ ^/((img)|(js)|(css)|(font))$ {
                      proxy_pass http://docker-core;
                      rewrite ^/(.*)$ /cor/main/$1 break;
                    }
                    location / {
                      # Anything left over goes to cor-main
                      proxy_pass http://docker-core;
                    }
                  }                  
                }
        01_get_configs_from_s3:
          commands:
            cmd01:
              cwd: /opt/kuali/scripts
              env:
                TASK: get_configs_from_s3             
                LANDSCAPE: !Sub "${Landscape}"
                BUCKET_NAME: !Sub "${BucketName}"
              command: bash process-configs.sh
        02_create_env_exports_file:
          commands:
            cmd01:
              cwd: /opt/kuali/scripts
              env:
                TASK: create_env_exports_file
                DNS_NAME: local
                ENV_FILE_FROM_S3_CORE: /opt/kuali/s3/core/environment.variables.s3
                ENV_FILE_FROM_S3_PORTAL: /opt/kuali/s3/portal/environment.variables.s3
                ENV_FILE_FROM_S3_PDF: /opt/kuali/s3/pdf/environment.variables.s3
                PDF_BUCKET_NAME: !If
                  - pdfS3AutoName
                  - !Sub kuali-pdf-${Landscape}
                  - !Sub "${PdfS3BucketName}"
              command: bash process-configs.sh
        03_process_kc-config_file:
          commands:
            cmd01:
              cwd: /opt/kuali/scripts
              env:
                TASK: process_kc-config_file
                DNS_NAME: local
                LANDSCAPE: !Sub "${Landscape}"
              command: bash process-configs.sh
        04_docker_run_container:
          commands:
            cmd01:
              cwd: /opt/kuali/scripts
              env:
                LANDSCAPE: !Sub "${Landscape}"
                JAVA_ENV: !Sub "${Landscape}"
                NEW_RELIC_ENVIRONMENT: !Sub "${Landscape}"
                NEW_RELIC_LICENSE_KEY: !Sub "{NewrelicLicsenseKey}"
                NEW_RELIC_AGENT_ENABLED: !Sub "${EnableNewRelicAPM}"
                KC_IMAGE: !Sub "${KcImage}"
                CORE_IMAGE: !Sub "${CoreImage}"
                PORTAL_IMAGE: !Sub "${PortalImage}"
                PDF_IMAGE: !Sub "${PdfImage}"
              command: bash start.docker.containers.sh
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                - /etc/cfn/cfn-hup.conf
                - /etc/cfn/hooks.d/cfn-auto-reloader.conf
              # awslogs:
              # NOTE: If you are using Amazon Linux 2, the awslogs service is now called "awslogsd"
              awslogsd:
                enabled: true
                ensureRunning: true
                files:
                - /etc/awslogs/awslogs.conf
                - /etc/awslogs/awscli.conf
        05_start_cron_for_custom_cloudwatch_metrics:
          commands:
            cmd01:
              command: crontab -u root /opt/kuali/scripts/crontab
              env:
                LANDSCAPE: !Sub "${Landscape}"

      
  EC2InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Limits access to requests originating from vpn.bu.edu/2fa
      GroupName: !Sub ${GlobalTag}-${Landscape}-sg
      VpcId: !Ref VpcId
      Tags:
      - Key: Name
        Value: !Sub ${GlobalTag}-${Landscape}
      SecurityGroupIngress:
      - Description: "SSH: vpn.bu.edu/2fa On Campus, Group 1"
        IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !FindInMap [ 2faCidrs, "first", "cidr" ]
      - Description: "SSH: vpn.bu.edu/2fa On Campus, Group 2 "
        IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !FindInMap [ 2faCidrs, "second", "cidr" ]
      - Description: "SSH: vpn.bu.edu/2fa Off Campus"
        IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !FindInMap [ 2faCidrs, "third", "cidr" ]
      - Description: "SSH: vpn.bu.edu/2fa Off Campus"
        IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !FindInMap [ 2faCidrs, "fourth", "cidr" ]
      - Description: "SSH: vpn.bu.edu/2fa Off Campus"
        IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !FindInMap [ 2faCidrs, "fifth", "cidr" ]
      - Description: "SSH: vpn.bu.edu/2fa Off Campus"
        IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !FindInMap [ 2faCidrs, "sixth", "cidr" ]
      
      - Description: "HTTP: vpn.bu.edu/2fa On Campus, Group 1"
        IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: !FindInMap [ 2faCidrs, "first", "cidr" ]
      - Description: "HTTP: vpn.bu.edu/2fa On Campus, Group 2 "
        IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: !FindInMap [ 2faCidrs, "second", "cidr" ]
      - Description: "HTTP: vpn.bu.edu/2fa Off Campus"
        IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: !FindInMap [ 2faCidrs, "third", "cidr" ]
      - Description: "HTTP: vpn.bu.edu/2fa Off Campus"
        IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: !FindInMap [ 2faCidrs, "fourth", "cidr" ]
      - Description: "HTTP: vpn.bu.edu/2fa Off Campus"
        IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: !FindInMap [ 2faCidrs, "fifth", "cidr" ]
      - Description: "HTTP: vpn.bu.edu/2fa Off Campus"
        IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: !FindInMap [ 2faCidrs, "sixth", "cidr" ]
        
      - Description: "HTTPS: vpn.bu.edu/2fa On Campus, Group 1"
        IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: !FindInMap [ 2faCidrs, "first", "cidr" ]
      - Description: "HTTPS: vpn.bu.edu/2fa On Campus, Group 2 "
        IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: !FindInMap [ 2faCidrs, "second", "cidr" ]
      - Description: "HTTPS: vpn.bu.edu/2fa Off Campus"
        IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: !FindInMap [ 2faCidrs, "third", "cidr" ]
      - Description: "HTTPS: vpn.bu.edu/2fa Off Campus"
        IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: !FindInMap [ 2faCidrs, "fourth", "cidr" ]
      - Description: "HTTPS: vpn.bu.edu/2fa Off Campus"
        IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: !FindInMap [ 2faCidrs, "fifth", "cidr" ]
      - Description: "HTTPS: vpn.bu.edu/2fa Off Campus"
        IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: !FindInMap [ 2faCidrs, "sixth", "cidr" ]
        
      - Description: "UDP: vpn.bu.edu/2fa On Campus, Group 1"
        IpProtocol: udp
        FromPort: 1043
        ToPort: 1043
        CidrIp: !FindInMap [ 2faCidrs, "first", "cidr" ]
      - Description: "UDP: vpn.bu.edu/2fa On Campus, Group 2 "
        IpProtocol: udp
        FromPort: 1043
        ToPort: 1043
        CidrIp: !FindInMap [ 2faCidrs, "second", "cidr" ]
      - Description: "UDP: vpn.bu.edu/2fa Off Campus"
        IpProtocol: udp
        FromPort: 1043
        ToPort: 1043
        CidrIp: !FindInMap [ 2faCidrs, "third", "cidr" ]
      - Description: "UDP: vpn.bu.edu/2fa Off Campus"
        IpProtocol: udp
        FromPort: 1043
        ToPort: 1043
        CidrIp: !FindInMap [ 2faCidrs, "fourth", "cidr" ]
      - Description: "UDP: vpn.bu.edu/2fa Off Campus"
        IpProtocol: udp
        FromPort: 1043
        ToPort: 1043
        CidrIp: !FindInMap [ 2faCidrs, "fifth", "cidr" ]
      - Description: "UDP: vpn.bu.edu/2fa Off Campus"
        IpProtocol: udp
        FromPort: 1043
        ToPort: 1043
        CidrIp: !FindInMap [ 2faCidrs, "sixth", "cidr" ]

Outputs:
  PrivateIP:
    Value:
      !GetAtt EC2Instance.PrivateIp
