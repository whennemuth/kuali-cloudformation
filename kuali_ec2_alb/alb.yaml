AWSTemplateFormatVersion: '2010-09-09'

# References:
# https://docs.aws.amazon.com/elasticloadbalancing/latest/application/introduction.html
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/AWS_ElasticLoadBalancingV2.html

Description: This template deploys an application load balancer that exposes the EC2 Instance (except for ssh access)

Parameters:

  GlobalTag:
    Type: String
    Description: >
      A common value that all resources in this template will have prefixed to
      their name and attached as a tag to establish a bundling through naming convention. If a nested stack,
      this will most likely be the name of the top-most stack.
    Default: kuali-ec2-alb

  Landscape:
    Description: Specify which landscape to build into the VPC
    Type: String
    AllowedValues:
    - sb
    - ci
    - qa
    - stg
    - prod
    ConstraintDescription: 'This parameter is restricted to the following values:
      sb, ci, qa, stg, prod'
    Default: sb

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: The id of the vpc to deploy to.

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id
    Description: The security group to be applied to the application load balancer.

  InstanceId1:
    Type: AWS::EC2::Instance::Id
    Description: The id of the first ec2 instance to register as a target with the target group

  InstanceId2:
    Type: AWS::EC2::Instance::Id
    Description: The id of the second ec2 instance to register as a target with the target group

  Subnet1:
    Type: AWS::EC2::Subnet::Id
    Description: One of the subnets the ALB routes traffic to.
      
  Subnet2:
    Type: AWS::EC2::Subnet::Id
    Description: One of the subnets the ALB routes traffic to.

  CertificateArn:
    Type: String
    Description: The amazon resource name of a certificate that has already been put in IAM/ACM


Resources:

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Description: The load balancer used as reverse proxy for the kuali ec2 instance
    Properties:
      Name: 
        # Make this short enough so that the derived DNS name is under 64 characters"
        !Sub "${GlobalTag}-${Landscape}-ALB"
      Subnets:
      - !Ref Subnet1
      - !Ref Subnet2
      SecurityGroups:
      - !Ref SecurityGroup
      # LoadBalancerAttributes:
      # - Key: access_logs.s3.enabled
      #   Value: "true"
      # - Key: access_logs.s3.bucket
      #   Value: !Sub ${GlobalTag}-alb-logs
      # - Key: access_logs.s3.prefix
      #   Value: alb
      Tags:
      - Key: Name
        Value: 
          !Sub "${GlobalTag}-${Landscape}-ALB"


  ################################################
  #               HTTP (PORT 80)
  ################################################
  # TargetGroup80:
  #   Type: AWS::ElasticLoadBalancingV2::TargetGroup
  #   Properties:
  #     Name:
  #       !Sub "${GlobalTag}-${Landscape}-port80-TG"
  #     VpcId: !Ref VpcId
  #     Port: 80
  #     Protocol: HTTP
  #     Matcher:
  #       HttpCode: 200-299
  #     TargetGroupAttributes:
  #     - Key: stickiness.enabled
  #       Value: true
  #     - Key: stickiness.type
  #       Value: lb_cookie
  #     - Key: stickiness.lb_cookie.duration_seconds
  #       Value: 86400
  #     - Key: deregistration_delay.timeout_seconds
  #       Value: 300
  #     - Key: slow_start.duration_seconds
  #       Value: 0
  #     Targets:
  #     - Id: !Ref InstanceId1
  #       Port: 80
  #     - Id: !Ref InstanceId2
  #       Port: 80
  #     Tags:
  #     - Key: Name
  #       Value: 
  #         !Sub "${GlobalTag}-${Landscape}-port80-TG"
  Listener80:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - TargetGroupArn:
          # Arbitrarily using TargetGroupCore as default. Nothing actually makes 
          # it to that group over port 80 because the listener rule redirects to port 443
          !Ref TargetGroupCore
        Type: forward
      LoadBalancerArn:
        !Ref ALB
      Port: 80
      Protocol: HTTP
  ListenerRule80:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Description: >
      When the cor-main institution provider type is switched from "kuali"
      to "saml" as the institution provider value, the shibboleth configuration will
      take over https redirection and this rule can be removed.
    Properties:
      ListenerArn:
        !Ref Listener80
      Priority: 1
      Actions:
      - Type: redirect
        # NOTE: Target groups do not apply if action type is redirect
        # TargetGroupArn:
        #   !Ref TargetGroupCore
        RedirectConfig:
          Host: "#{host}"
          Path: "/#{path}"
          Port: 443
          Protocol: HTTPS
          Query: "#{query}"
          StatusCode: HTTP_301
      Conditions:
      - { Field: path-pattern, Values: [ "/*" ] }


  ################################################
  #                HTTPS (PORT 443)
  ################################################
  Listener443:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
      # WARNING!
      # For some reason cloudformation returns a "CertificateNotFound" error when the arn of a certificate uploaded to acm
      # is used to configure the listener for ssl. However, it has no problem with an arn of uploaded iam server certificates.  
      - CertificateArn:
          !Ref CertificateArn
      DefaultActions:
      - TargetGroupArn:
          !Ref TargetGroupCore
        Type: forward
      LoadBalancerArn:
        !Ref ALB
      Port: 443
      Protocol: HTTPS


  ################################################
  #                   DASHBOARD
  ################################################
  TargetGroupDashboard:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name:
        !Sub "${GlobalTag}-${Landscape}-dashboard-TG"
      VpcId: !Ref VpcId
      Port: 80
      Protocol: HTTP
      Matcher:
        HttpCode: 200-299
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: "/dashboard/"
      HealthCheckProtocol: HTTPS
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetGroupAttributes:
      - Key: stickiness.enabled
        Value: true
      - Key: stickiness.type
        Value: lb_cookie
      - Key: stickiness.lb_cookie.duration_seconds
        Value: 86400
      - Key: deregistration_delay.timeout_seconds
        Value: 300
      - Key: slow_start.duration_seconds
        Value: 0
      Targets:
      - Id: !Ref InstanceId1
        Port: 3005
      - Id: !Ref InstanceId2
        Port: 3005
      Tags:
      - Key: Name
        Value: 
          !Sub "${GlobalTag}-${Landscape}-dashboard-TG"
  ListenerRuleDashboardCommonTasks:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    DependsOn: TargetGroupDashboard
    Description: >
      If the user navigates to the basic portal link, we don't want them presented with the 
      it's own dashboard, but rather its common-tasks view. Hence this rule for a redirect.
    Properties:
      ListenerArn:
        !Ref Listener443
      Priority: 2
      Actions:
      - Type: redirect
        RedirectConfig:
          Host: "#{host}"
          Path: "/dashboard/common-tasks"
          Port: 443
          Protocol: HTTPS
          Query: "#{query}"
          StatusCode: HTTP_301
      Conditions:
      - { Field: path-pattern, Values: [ "/dashboard", "/dashboard/" ] }
  ListenerRuleDashboard:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    DependsOn: TargetGroupDashboard
    Properties:
      ListenerArn:
        !Ref Listener443
      Priority: 3
      Actions:
      - TargetGroupArn:
          !Ref TargetGroupDashboard
        Type: forward
      Conditions:
      - Field: path-pattern
        Values:
        - "/dashboard/*"
        - "/api/v1/dashboard"
        - "/api/v1/dashboard/*"


  ################################################
  #                      KC
  ################################################
  TargetGroupKC:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name:
        !Sub "${GlobalTag}-${Landscape}-kc-TG"
      VpcId: !Ref VpcId
      Port: 80
      Protocol: HTTP
      Matcher:
        HttpCode: 200-299
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: "/kc/"
      HealthCheckProtocol: HTTPS
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetGroupAttributes:
      - Key: stickiness.enabled
        Value: true
      - Key: stickiness.type
        Value: lb_cookie
      - Key: stickiness.lb_cookie.duration_seconds
        Value: 86400
      - Key: deregistration_delay.timeout_seconds
        Value: 300
      - Key: slow_start.duration_seconds
        Value: 0
      Targets:
      - Id: !Ref InstanceId1
        Port: 8080
      - Id: !Ref InstanceId2
        Port: 8080
      Tags:
      - Key: Name
        Value: 
          !Sub "${GlobalTag}-${Landscape}-kc-TG"          
  ListenerRuleKcDefault:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    DependsOn: TargetGroupKC
    Description: >
      If the user navigates to the website with no path, we want them presented with the research app
      as a default, not the portal selection view as would otherwise be presented.
    Properties:
      ListenerArn:
        !Ref Listener443
      Priority: 4
      Actions:
      - Type: redirect
        RedirectConfig:
          Host: "#{host}"
          Path: "/kc"
          Port: 443
          Protocol: HTTPS
          Query: "#{query}"
          StatusCode: HTTP_301
      Conditions:
      - { Field: path-pattern, Values: [ "/" ] }
  ListenerRuleKC:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    DependsOn: TargetGroupKC
    Properties:
      ListenerArn:
        !Ref Listener443
      Priority: 5
      Actions:
      - TargetGroupArn:
          !Ref TargetGroupKC
        Type: forward
      Conditions:
      - { Field: path-pattern, Values: [ "/kc", "/kc/*" ] }


  ################################################
  #                     PDF
  ################################################
  TargetGroupPdf:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name:
        !Sub "${GlobalTag}-${Landscape}-pdf-TG"
      VpcId: !Ref VpcId
      Port: 80
      Protocol: HTTP
      Matcher:
        HttpCode: 200-299
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: "/pdf/"
      HealthCheckProtocol: HTTPS
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetGroupAttributes:
      - Key: stickiness.enabled
        Value: true
      - Key: stickiness.type
        Value: lb_cookie
      - Key: stickiness.lb_cookie.duration_seconds
        Value: 86400
      - Key: deregistration_delay.timeout_seconds
        Value: 300
      - Key: slow_start.duration_seconds
        Value: 0
      Targets:
      - Id: !Ref InstanceId1
        Port: 3006
      - Id: !Ref InstanceId2
        Port: 3006
      Tags:
      - Key: Name
        Value: 
          !Sub "${GlobalTag}-${Landscape}-pdf-TG"
  ListenerRulePdf:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    DependsOn: TargetGroupPdf
    Properties:
      ListenerArn:
        !Ref Listener443
      Priority: 6
      Actions:
      - TargetGroupArn:
          !Ref TargetGroupPdf
        Type: forward
      Conditions:
      - Field: path-pattern
        Values:
        - "/pdf"
        - "/pdf/*"
        - "/api/v1/pdf"
        - "/api/v1/pdf/*"


  ################################################
  #                   COR-MAIN
  ################################################
  TargetGroupCore:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name:
        !Sub "${GlobalTag}-${Landscape}-core-TG"
      VpcId: !Ref VpcId
      Port: 80
      Protocol: HTTP
      Matcher:
        HttpCode: 200-299
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: "/apps/"
      HealthCheckProtocol: HTTPS
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetGroupAttributes:
      - Key: stickiness.enabled
        Value: true
      - Key: stickiness.type
        Value: lb_cookie
      - Key: stickiness.lb_cookie.duration_seconds
        Value: 86400
      - Key: deregistration_delay.timeout_seconds
        Value: 300
      - Key: slow_start.duration_seconds
        Value: 0
      Targets:
      - Id: !Ref InstanceId1
        Port: 3000
      - Id: !Ref InstanceId2
        Port: 3000
      Tags:
      - Key: Name
        Value: 
          !Sub "${GlobalTag}-${Landscape}-core-TG"
  ListenerRuleCore:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    DependsOn: TargetGroupCore
    Properties:
      ListenerArn:
        !Ref Listener443
      Priority: 7
      Actions:
      - TargetGroupArn:
          !Ref TargetGroupCore
        Type: forward
      Conditions: 
      # Since core is last in priority, it handles all remaining paths, as it should.
      - { Field: path-pattern, Values: [ "/*" ] }


Outputs:

  LoadBalancerUrl:
    Description: This will be the url that the app is publicly addressable on
    Value: !GetAtt ALB.DNSName
