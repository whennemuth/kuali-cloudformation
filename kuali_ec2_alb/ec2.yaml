AWSTemplateFormatVersion: 2010-09-09


Description: >
  Create a new ec2 instance with the kuali suite of modules deployed as containers and proxied with an application load balancer.


Parameters:

  GlobalTag:
    Type: String
    Description: >
      A common value that all resources in this template will have prefixed to
      their name and attached as a tag to establish a bundling through naming convention.
    Default: kuali-ec2-alb

  BucketName:
    Type: String
    Description: The S3 bucket where config files, keys, these cloudformation templates, etc. are stored
    Default: kuali-conf

  Landscape:
    Description: Specify which landscape to build into the VPC
    Type: String
    AllowedValues:
    - sb
    - ci
    - qa
    - stg
    - prod
    ConstraintDescription: >
      This parameter is restricted to the following values: sb, ci, qa, stg, prod
    Default: sb
    
  Service:
    Description: Service catalog name
    Type: String
    Default: research-administration

  Function:
    Description: The Function within the Service
    Type: String
    Default: kuali

  CampusSubnet:
    Type: AWS::EC2::Subnet::Id
    Description: Id of the private application subnet that admits access from bu vpns through transit gateway attachment.

  # https://docs.aws.amazon.com/AmazonECS/latest/developerguide/retrieve-ecs-optimized_AMI.html
  ECSAMI:
    Description: AMI ID
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id

  InstanceType:
    Type: String
    Description: What type of EC2 instance should be used for hosting?
    AllowedValues:
    - t2.large
    - t2.xlarge
    - t3.large
    - t3.xlarge
    - m4.large
    - m4.xlarge
    - m5.large
    - m5.xlarge
    - c5.large
    - c5.xlarge
    ConstraintDescription: Specified instance type is not within selection list.
    Default: m4.large

  # NOTE: The type below triggers a check by aws for existence of the keypair as part of a validation check.
  # However, this makes the parameter required, even for stack updates. Use "String" as type to forego the
  # validation check and allow the parameter to be optional during updates.
  EC2KeypairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: The keypair for ssh use against the ec2 instance

  CoreImage:
    Type: String
    Description: 'Example: 770203350335.dkr.ecr.us-east-1.amazonaws.com/kuali-core:2001.0040'

  KcImage:
    Type: String
    Description: 'Example: 770203350335.dkr.ecr.us-east-1.amazonaws.com/kuali-coeus:2001.0040'

  PortalImage:
    Type: String
    Description: 'Example: 770203350335.dkr.ecr.us-east-1.amazonaws.com/kuali-portal:2001.0040'

  PdfImage:
    Type: String
    Description: 'Example: 770203350335.dkr.ecr.us-east-1.amazonaws.com/kuali-research-pdf:2002.0003'

  PdfS3BucketName:
    Type: String
    Description: The name of the s3 bucket the pdf service is to use.
    Default: empty
  
  EnableNewRelicAPM:
    Type: String
    Description: Is newrelic APM to be enabled for this landscape?
    Default: "false"
    AllowedValues:
    - "true"
    - "false"
    ConstraintDescription: Enter "true" or "false" only.

  EnableNewRelicInfrastructure:
    Type: String
    Description: Is newrelic infrastructure (with logging) to be enabled for this landscape?
    Default: "false"
    AllowedValues:
    - "true"
    - "false"
    ConstraintDescription: Enter "true" or "false" only.

  SecurityGroupId:
    Type: AWS::EC2::SecurityGroup::Id
    Description: Id that identifies the security group for the ec2 instance

  DNSName:
    Type: String
    Description: The DNS name for the ALB. The app is publicly reachable at this address.

  InstanceProfile:
    Type: String
    Description: If the instance profile already exists, provide its name here.
    Default: "create"
  
  InstanceRole:
    Type: String
    Description: If the role for the instance profile already exists, provide it here.
    Default: "create"

  EC2InstanceLogsGroupArn:
    Type: String
    Description: If the logs group already exists, provide its arn here.
    Default: "create"


Conditions: 
  CreateProfile: !Equals [ !Ref InstanceProfile, "create" ]
  CreateRole: !Equals [ !Ref InstanceRole, "create" ]
  CreateLogsGroup: !Equals [ !Ref EC2InstanceLogsGroupArn, "create" ]


Resources:

  EC2Role:
    Type: AWS::IAM::Role
    Condition: CreateRole
    Description: >
      This IAM Role is attached to all of the EC2 hosts. Add other IAM
      policy statements here to allow access from your EC2 hosts to other AWS services.
      This role will be used by ALL containers running on the EC2 host.
    Properties:
      Path: "/"
      RoleName: !Sub ${GlobalTag}-${Landscape}-ec2-role
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      - arn:aws:iam::aws:policy/AWSCloudFormationReadOnlyAccess
      - arn:aws:iam::aws:policy/ElasticLoadBalancingReadOnly
      - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
      - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      - arn:aws:iam::aws:policy/CloudWatchFullAccess
      Policies:
      - PolicyName:
          !Sub ${GlobalTag}-${Landscape}-stop-ec2-instance
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - ec2:StopInstances
            Resource: 
            - arn:aws:ec2:*:*:instance/*
            Condition:
              StringLike:
                ec2:ResourceTag/Name:
                  !Sub ${GlobalTag}-${Landscape}-instance
              StringEquals:
                ec2:ResourceTag/self-stoppable:
                  'true'
      - PolicyName:
          !Sub ${GlobalTag}-${Landscape}-read-s3-content
        PolicyDocument:
          Statement:
          - Effect: Allow
            Resource: "*"
            Action:
            - ec2:DescribeTags
          - Effect: Allow
            Resource:
            - arn:aws:s3:::kuali-conf*
            - arn:aws:s3:::kuali-docker-run-stdout*
            - !Sub arn:aws:s3:::${PdfS3BucketName}*
            Action: "*"
      - PolicyName:
          !Sub "${GlobalTag}-${Landscape}-read-secrets"
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - secretsmanager:GetResourcePolicy
            - secretsmanager:GetSecretValue
            - secretsmanager:DescribeSecret
            - secretsmanager:ListSecretVersionIds
            Resource:
            - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:kuali/${Landscape}/*
      - PolicyName:
          !Sub "${GlobalTag}-${Landscape}-read-rds-metadata"
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - rds:Describe*
            - rds:ListTagsForResource
            Resource:
            - !Sub arn:aws:rds:${AWS::Region}:${AWS::AccountId}:db:kuali-oracle-${Landscape}


  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Condition: CreateProfile
    Properties:
      InstanceProfileName: !Sub ${GlobalTag}-${Landscape}-profile
      Path: "/"
      Roles:
      - !If [CreateRole, !Ref EC2Role, !Ref InstanceRole]

  EC2InstanceLogsGroup:
    Type: AWS::Logs::LogGroup
    Condition: CreateLogsGroup
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub ${GlobalTag}-${Landscape}
      RetentionInDays: 30
      
  EC2Instance:
    Type: AWS::EC2::Instance
    Description: EC2 instance for hosting kuali research modules.
    Properties:
      Tags:
      - Key: Name
        Value: !If [CreateProfile, !Sub "${GlobalTag}-${Landscape}-ec2-1", !Sub "${GlobalTag}-${Landscape}-ec2-2"]
      - Key: self-stoppable
        Value: 'false'
      - Key: Landscape
        Value: !Ref Landscape
      - Key: Service
        Value: !Ref Service
      - Key: Function
        Value: !Ref Function
      ImageId: 
        !Ref ECSAMI
      InstanceType:
        !Ref InstanceType
      SecurityGroupIds:
      - !Ref SecurityGroupId
      KeyName: !Ref EC2KeypairName
      IamInstanceProfile:
        !If [CreateProfile, !Ref EC2InstanceProfile, !Ref InstanceProfile]
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 64
            DeleteOnTermination: true
      SubnetId: !Ref CampusSubnet

      UserData: 
        "Fn::Base64": !Sub |
          #!/bin/bash
          yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
          yum install -y aws-cfn-bootstrap
          yum install -y git
          # Add perl and zip libraries needed to unpack and run custom metric monitoring for cloudwatch.
          yum install -y perl-Switch perl-DateTime perl-Sys-Syslog perl-LWP-Protocol-https perl-Digest-SHA.x86_64
          yum install -y zip unzip
          yum install -y sysstat
          yum install -y jq

          # Install and run docker
          amazon-linux-extras install -y docker
          service docker start
          usermod -a -G docker ec2-user
          chkconfig docker on
          # Install docker-compose
          curl \
            -L https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) \
            -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
          
          # Install required packages for scripts that will monitor and upload custom metrics to cloudwatch.
          curl https://aws-cloudwatch.s3.amazonaws.com/downloads/CloudWatchMonitoringScripts-1.2.2.zip \
            -o /var/lib/ && CloudWatchMonitoringScripts-1.2.2.zip
          unzip -d /var/lib/ CloudWatchMonitoringScripts-1.2.2.zip
          rm -f /var/lib/CloudWatchMonitoringScripts-1.2.2.zip
          
          # Implement all the metadata in AWS::CloudFormation::Init
          /opt/aws/bin/cfn-init \
            -v \
            --configsets AllConfigs \
            --region ${AWS::Region} \
            --stack ${AWS::StackName} \
            --resource EC2Instance
            
          # Now that all initialization is done signal the result of the cfn-init attempt
          /opt/aws/bin/cfn-signal \
            -e $? \
            --region ${AWS::Region} \
            --stack ${AWS::StackName} \
            --resource EC2Instance

    Metadata:
      AWS::CloudFormation::Authentication:
        # This authentication will make possible replacing inline file content with paths to files in s3
        # https://aws.amazon.com/blogs/devops/authenticated-file-downloads-with-cloudformation/
        S3AccessCreds:
          type: S3
          roleName:
            !If [CreateProfile, !Ref EC2Role, !Ref InstanceRole]
          buckets:
          - !Ref BucketName

      AWS::CloudFormation::Init:
        configSets:
          AllConfigs:
          - getFiles
          - ConfigSet: RunCommands
          GetFiles:
          - getFiles
          RunCommands:
          - ConfigSet: cmd01
          - ConfigSet: cmd02
          - ConfigSet: cmd03
          - ConfigSet: cmd04
          # - ConfigSet: cmd05
          cmd01:
          - 01_get_configs_from_s3
          cmd02:
          - 02_create_env_exports_file
          cmd03:
          - 03_process_kc-config_file
          cmd04:
          - 04_docker_run_container
          cmd05:
          - 05_start_cron_for_custom_cloudwatch_metrics
        getFiles:
          packages:
            yum:
              awslogs: []
          files:
            /opt/kuali/README.txt:
              content: !Sub |
                This directory contains the "environment" for each app to run
                in a docker container that it needs.
                This includes env-file, configuration files, keys, etc.
                These are specific to the ${Landscape} landscape.
              mode: "000775"
              owner: root
              group: root
            /opt/kuali/scripts/crontab:
              content: |
                SHELL=/bin/bash
                PATH=/sbin:/bin:/usr/sbin:/usr/bin
                MAILTO=root
                HOME=/
                
                # Send custom metrics to cloudwatch once every minute
                # NOTE: The cronjob will start, but it does nothing until you uncomment the 1 or more of the 3 lines below.
                # This is a test ec2 instance, so defaulting to running these scripts manually while shelled in."
                # Check the system log for any errors this script encounters"
                # * * * * * /opt/kuali/scripts/send-custom-cloudwatch-metrics.sh "custom1"
                # * * * * * /opt/kuali/scripts/send-custom-cloudwatch-metrics.sh "custom2" "ec2"
                # * * * * * /opt/kuali/scripts/send-custom-cloudwatch-metrics.sh "psuedo"  "ec2" "${BucketName}" "${AWS::Region}"
                #
                0 3 * * * /bin/bash /opt/kuali/scripts/stop-instance.sh  ${AWS::Region}
              mode: "000644"
              owner: root
              group: root
            /etc/cfn/cfn-hup.conf:
              mode: "000400"
              owner: root
              group: root
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                # Change interval from default 15 minutes to 5
                interval=5
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.EC2Instance.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource EC2Instance --configsets AllConfigs
            /etc/awslogs/awscli.conf:
              content: !Sub |
                [plugins]
                cwlogs = cwlogs
                [default]
                region = ${AWS::Region}
            /etc/awslogs/awslogs.conf:
              content: !Sub |
                [general]
                state_file = /var/lib/awslogs/agent-state
                
                [/var/log/dmesg]
                file = /var/log/dmesg
                log_group_name = ${GlobalTag}-${Landscape}
                log_stream_name = /var/log/dmesg
                
                [/var/log/messages]
                file = /var/log/messages
                log_group_name = ${GlobalTag}-${Landscape}
                log_stream_name = /var/log/messages
                datetime_format = %b %d %H:%M:%S
                
                [/var/log/docker]
                file = /var/log/docker
                log_group_name = ${GlobalTag}-${Landscape}
                log_stream_name = /var/log/docker
                datetime_format = %Y-%m-%dT%H:%M:%S.%f
            /opt/kuali/scripts/process-configs.sh:
              source: !Sub http://${BucketName}.s3.amazonaws.com/cloudformation/scripts/ec2/process-configs.sh
              content: !Sub |
              mode: "000775"
              owner: root
              group: root
            /opt/kuali/scripts/stop-instance.sh:
              source: !Sub http://${BucketName}.s3.amazonaws.com/cloudformation/scripts/ec2/stop-instance.sh
              content: !Sub |
              mode: "000775"
              owner: root
              group: root
            /opt/kuali/scripts/send-custom-cloudwatch-metrics.sh:
              source: !Sub http://${BucketName}.s3.amazonaws.com/cloudformation/scripts/ec2/cloudwatch-metrics.sh
              mode: "000744"
              owner: root
              group: root
            /opt/kuali/scripts/start.docker.containers.sh:
              content: !Sub |
                #!/bin/bash
                
                # Prepare directories for mounting to kuali-research container
                [ ! -d /opt/kuali/kc_printing ] && mkdir -p /opt/kuali/kc_printing
                [ ! -d /opt/kuali/kc_javamelody ] && mkdir -p /opt/kuali/kc_javamelody
                [ ! -d /opt/kuali/kc_attachments ] && mkdir -p /opt/kuali/kc_attachments
                [ ! -d /opt/kuali/kc_tomcat_logs ] && mkdir -p /opt/kuali/kc_tomcat_logs
                [ ! -d /opt/kuali/kc_newrelic_logs ] && mkdir -p /opt/kuali/kc_newrelic_logs

                # Set these environment variables for the kuali-research container
                # These should have been passed in by configset command.
                #  - LANDSCAPE
                #  - NEW_RELIC_LICENSE_KEY
                #  - NEW_RELIC_AGENT_ENABLED
                #  - JAVA_ENV
                # But not this one, so set it here:
                export DNS_NAME="${!DNS_NAME}"

                # Remove all existing containers
                /usr/local/bin/docker-compose down 2> /dev/null || true

                # Log into the docker registry
                $(aws ecr get-login --no-include-email --region ${AWS::Region})

                /usr/local/bin/docker-compose up --detach
                
              mode: "000775"
              owner: root
              group: root
            /opt/kuali/scripts/docker-compose.yaml:
              content: !Sub |
                version: '3'
                services:

                  cor-main:
                    image: ${!CORE_IMAGE}
                    container_name: cor-main
                    restart: unless-stopped
                    env_file: /opt/kuali/s3/core/environment.variables.s3
                    volumes:
                      - /opt/kuali/s3/core:/var/core-config
                    logging:
                      driver: awslogs
                      options:
                        awslogs-region: ${AWS::Region}
                        awslogs-group: ${GlobalTag}-${Landscape}
                        awslogs-stream: core-docker-container
                        awslogs-create-group: "true"
                    ports:
                    - 3000:3000

                  kuali-research:
                    image: ${!KC_IMAGE}
                    container_name: kuali-research
                    restart: unless-stopped
                    volumes:
                      - /opt/kuali/s3/kc:/opt/kuali/main/config
                      - /opt/kuali/kc_printing:/opt/kuali/logs/printing/logs
                      - /opt/kuali/kc_javamelody:/var/log/javamelody
                      - /opt/kuali/kc_attachments:/opt/tomcat/temp/dev/attachments
                      - /opt/kuali/kc_tomcat_logs:/opt/tomcat/logs
                      - /opt/kuali/kc_newrelic_logs:/var/log/newrelic
                    environment:
                      - NEW_RELIC_LICENSE_KEY=${!NEW_RELIC_LICENSE_KEY}
                      - NEW_RELIC_AGENT_ENABLED=${!NEW_RELIC_AGENT_ENABLED}
                      - JAVA_ENV=${!NEW_RELIC_ENVIRONMENT}
                      - DNS_NAME=${!DNS_NAME}
                    logging:
                      driver: awslogs
                      options:
                        awslogs-region: ${AWS::Region}
                        awslogs-group: ${GlobalTag}-${Landscape}
                        awslogs-stream: kc-docker-container
                        awslogs-create-group: "true"
                    ports:
                    - 8080:8080

                  research-portal:
                    image: ${!PORTAL_IMAGE}
                    container_name: research-portal
                    restart: unless-stopped
                    volumes:
                      - /opt/kuali/s3/portal:/var/portal-config
                    env_file: /opt/kuali/s3/portal/environment.variables.s3 
                    logging:
                      driver: awslogs
                      options:
                        awslogs-region: ${AWS::Region}
                        awslogs-group: ${GlobalTag}-${Landscape}
                        awslogs-stream: portal-docker-container
                        awslogs-create-group: "true"
                    ports:
                    - 3005:3005

                  research-pdf:
                    image: ${!PDF_IMAGE}
                    container_name: research-pdf
                    restart: unless-stopped
                    env_file: /opt/kuali/s3/pdf/environment.variables.s3
                    logging:
                      driver: awslogs
                      options:
                        awslogs-region: ${AWS::Region}
                        awslogs-group: ${GlobalTag}-${Landscape}
                        awslogs-stream: pdf-docker-container
                        awslogs-create-group: "true"
                    ports:
                    - 3006:3006

              mode: "000775"
              owner: root
              group: root
        01_get_configs_from_s3:
          commands:
            cmd01:
              cwd: /opt/kuali/scripts
              env:
                TASK: get_configs_from_s3             
                LANDSCAPE: !Sub "${Landscape}"
                BUCKET_NAME: !Sub "${BucketName}"
                AWS_DEFAULT_REGION: !Sub "${AWS::Region}"
              command: bash process-configs.sh
        02_create_env_exports_file:
          commands:
            cmd01:
              cwd: /opt/kuali/scripts
              env:
                TASK: create_env_exports_file
                DNS_NAME: !Sub "${DNSName}"
                ENV_FILE_FROM_S3_CORE: /opt/kuali/s3/core/environment.variables.s3
                ENV_FILE_FROM_S3_PORTAL: /opt/kuali/s3/portal/environment.variables.s3
                ENV_FILE_FROM_S3_PDF: /opt/kuali/s3/pdf/environment.variables.s3
                PDF_BUCKET_NAME: !Sub "${PdfS3BucketName}"
                AWS_DEFAULT_REGION: !Sub "${AWS::Region}"
              command: bash process-configs.sh
        03_process_kc-config_file:
          commands:
            cmd01:
              cwd: /opt/kuali/scripts
              env:
                TASK: process_kc-config_file
                DNS_NAME: local
                LANDSCAPE: !Sub "${Landscape}"
                AWS_DEFAULT_REGION: !Sub "${AWS::Region}"
              command: bash process-configs.sh
        04_docker_run_container:
          commands:
            cmd01:
              cwd: /opt/kuali/scripts
              env:
                LANDSCAPE: !Sub "${Landscape}"
                JAVA_ENV: !Sub "${Landscape}"
                NEW_RELIC_ENVIRONMENT: !Sub "${Landscape}"
                NEW_RELIC_LICENSE_KEY: !Sub "{NewrelicLicsenseKey}"
                NEW_RELIC_AGENT_ENABLED: !Sub "${EnableNewRelicAPM}"
                KC_IMAGE: !Sub "${KcImage}"
                CORE_IMAGE: !Sub "${CoreImage}"
                PORTAL_IMAGE: !Sub "${PortalImage}"
                PDF_IMAGE: !Sub "${PdfImage}"
                DNS_NAME: !Sub "${DNSName}"
                AWS_DEFAULT_REGION: !Sub "${AWS::Region}"
              command: bash start.docker.containers.sh
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                - /etc/cfn/cfn-hup.conf
                - /etc/cfn/hooks.d/cfn-auto-reloader.conf
              # awslogs:
              # NOTE: If you are using Amazon Linux 2, the awslogs service is now called "awslogsd"
              awslogsd:
                enabled: true
                ensureRunning: true
                files:
                - /etc/awslogs/awslogs.conf
                - /etc/awslogs/awscli.conf
        05_start_cron_for_custom_cloudwatch_metrics:
          commands:
            cmd01:
              command: crontab -u root /opt/kuali/scripts/crontab
              env:
                LANDSCAPE: !Sub "${Landscape}"
                AWS_DEFAULT_REGION: !Sub "${AWS::Region}"


Outputs:

  InstanceId:
    Description: The id of the ec2 instance
    Value:
      !Ref EC2Instance
  
  EC2InstanceProfile:
    Description: The profile applied to the ec2 instance
    Value:
      !If [CreateProfile, !Ref EC2InstanceProfile, !Ref InstanceProfile]

  EC2Role:
    Description: The profile arn applied to the ec2 instance
    Value:
      !If [CreateRole, !Ref EC2Role, !Ref InstanceRole]

  EC2InstanceLogsGroupArn:
    Description: The ARN of the logs group create for kuali-research
    Value: 
      !If [CreateLogsGroup, !Ref EC2InstanceLogsGroup, !Ref EC2InstanceLogsGroupArn]
