AWSTemplateFormatVersion: 2010-09-09


Description: >
  Create a new ec2 instance with the kuali suite of modules deployed as containers and proxied with an application load balancer.


Parameters:

  GlobalTag:
    Type: String
    Description: >
      A common value that all resources in this template will have prefixed to
      their name and attached as a tag to establish a bundling through naming convention.
    Default: kuali-ec2-alb

  TemplateBucketName:
    Type: String
    Description: The S3 bucket where config files, keys, these cloudformation templates, etc. are stored
    Default: kuali-conf

  Landscape:
    Description: Specify a name for your landscape
    Type: String
    AllowedPattern: "[a-zA-Z\\d]{1,12}"
    ConstraintDescription: Up to 12 letters and/or numbers
  
  Baseline:
    Description: Specify one of a set of standard landscapes. The application will be backed by a database for that baseline landscape or a snapshot of it.
    Type: String
    AllowedValues: [ sb, ci, qa, stg, prod ]
    ConstraintDescription: Baseline landscapes are limited to the specified set.

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: The id of the vpc to deploy to.
    
  Service:
    Description: Service catalog name
    Type: String
    Default: research-administration

  Function:
    Description: The Function within the Service
    Type: String
    Default: kuali

  CampusSubnet:
    Type: AWS::EC2::Subnet::Id
    Description: Id of the private application subnet that admits access from bu vpns through transit gateway attachment.

  # https://docs.aws.amazon.com/AmazonECS/latest/developerguide/retrieve-ecs-optimized_AMI.html
  ECSAMI:
    Description: AMI ID
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id

  InstanceType:
    Type: String
    Description: What type of EC2 instance should be used for hosting?
    AllowedValues:
    - t2.large
    - t2.xlarge
    - t3.large
    - t3.xlarge
    - m4.large
    - m4.xlarge
    - m5.large
    - m5.xlarge
    - c5.large
    - c5.xlarge
    ConstraintDescription: Specified instance type is not within selection list.
    Default: m4.large

  EC2KeypairName:
    # Type: AWS::EC2::KeyPair::KeyName
    Type: String
    Description: The keypair for ssh use against the ec2 instance
    Default: empty

  CoreImage:
    Type: String
    Description: 'Example: 770203350335.dkr.ecr.us-east-1.amazonaws.com/kuali-core:2001.0040'

  KcImage:
    Type: String
    Description: 'Example: 770203350335.dkr.ecr.us-east-1.amazonaws.com/kuali-coeus:2001.0040'

  PortalImage:
    Type: String
    Description: 'Example: 770203350335.dkr.ecr.us-east-1.amazonaws.com/kuali-portal:2001.0040'

  PdfImage:
    Type: String
    Description: 'Example: 770203350335.dkr.ecr.us-east-1.amazonaws.com/kuali-research-pdf:2002.0003'

  PdfS3BucketName:
    Type: String
    Description: The name of the s3 bucket the pdf service is to use.
    Default: empty
  
  NewrelicLicsenseKey:
    Type: String
    Description: Passed into the kc docker container to authenticate sending telemetry to new relic account.
    Default: empty

  EnableNewRelicAPM:
    Type: String
    Description: Is newrelic APM to be enabled for this landscape?
    Default: "false"
    AllowedValues:
    - "true"
    - "false"
    ConstraintDescription: Enter "true" or "false" only.

  EnableNewRelicInfrastructure:
    Type: String
    Description: Is newrelic infrastructure (with logging) to be enabled for this landscape?
    Default: "false"
    AllowedValues:
    - "true"
    - "false"
    ConstraintDescription: Enter "true" or "false" only.

  SecurityGroupId:
    Type: AWS::EC2::SecurityGroup::Id
    Description: Id that identifies the security group for the ec2 instance

  DNSName:
    Type: String
    Description: The DNS name for the ALB. The app is publicly reachable at this address.

  # A parameter that should be provided if the rds instance pre-exists (not created in this stack).
  RdsEndpoint:
    Type: String
    Description: The endpoint of the rds instance - either private ip, private dns, or provided by route53 CNAME record.
      Usable as HOST in jdbc connection string.
    Default: empty

  EntityId:
    Type: String
    Description: The id of the issuer of saml authentication requests to shibboleth. 
      Corresponds to the  entityID attribute of the EntityDescriptor element in the samlMeta.xml file.

  UsingRoute53:
    Type: String
    Description: Indicates if the DNSName is resolved with Route53 and exists in our hosted zone as an A record.
    Default: "false"
    AllowedValues:
    - "true"
    - "false"
    ConstraintDescription: Enter "true" or "false" only.

  UsingShibboleth:
    Type: String
    Description: True if using the BU shibboleth IDP for authentication, else dummy authentication (cor-main becomes its own IDP & SP).
    Default: "false"
    AllowedValues:
    - "true"
    - "false"
    ConstraintDescription: Enter "true" or "false" only.

  InstanceProfile:
    Type: String
    Description: If the instance profile already exists, provide its name here.
    Default: "create"
  
  InstanceRole:
    Type: String
    Description: If the role for the instance profile already exists, provide it here.
    Default: "create"

  EC2InstanceLogsGroupArn:
    Type: String
    Description: If the logs group already exists, provide its arn here.
    Default: "create"

  MongoEc2Ip:
    Type: String
    Description: The private ip address of the ec2 instance hosting a simple mongo database (for test environments)
    Default: empty

  MongoInstanceId:
    Type: String
    Description: The id of the ec2 instance hosting a simple mongo database (for test environments)
    Default: empty
    

Conditions: 
  CreateProfile: !Equals [ !Ref InstanceProfile, "create" ]
  CreateRole: !Equals [ !Ref InstanceRole, "create" ]
  CreateLogsGroup: !Equals [ !Ref EC2InstanceLogsGroupArn, "create" ]
  UseMongoEc2Instance: !Not [!Equals [!Ref MongoEc2Ip, empty]]
  UseKeypair: !Not [!Equals [!Ref EC2KeypairName, empty]]
  IsProd: !Equals [!Ref Landscape, prod]
  IsTest: !Not [!And [!Equals [!Ref Landscape, prod], !Equals [!Ref Landscape, stg]]]
  UsingShibboleth: !Equals [!Ref UsingShibboleth, 'true']
  NewrelicLicsenseKeyProvided: !Equals [!Ref NewrelicLicsenseKey, empty]
  RdsEndpointProvided: !Not [!Equals [!Ref RdsEndpoint, empty]]


Resources:

  EC2Role:
    Type: AWS::IAM::Role
    Condition: CreateRole
    Description: >
      This IAM Role is attached to all of the EC2 hosts. Add other IAM
      policy statements here to allow access from your EC2 hosts to other AWS services.
      This role will be used by ALL containers running on the EC2 host.
    Properties:
      Path: "/"
      RoleName: !Sub ${GlobalTag}-${Landscape}-ec2-role
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      - arn:aws:iam::aws:policy/AWSCloudFormationReadOnlyAccess
      - arn:aws:iam::aws:policy/ElasticLoadBalancingReadOnly
      - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
      - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      - arn:aws:iam::aws:policy/CloudWatchFullAccess
      Policies:
      - PolicyName:
          !Sub ${GlobalTag}-${Landscape}-stop-ec2-instance
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - ec2:StopInstances
            Resource: 
            - arn:aws:ec2:*:*:instance/*
            Condition:
              StringLike:
                ec2:ResourceTag/Name:
                  !Sub ${GlobalTag}-${Landscape}-instance
              StringEquals:
                ec2:ResourceTag/self-stoppable:
                  'true'
      - PolicyName:
          !Sub ${GlobalTag}-${Landscape}-read-s3-content
        PolicyDocument:
          Statement:
          - Effect: Allow
            Resource: "*"
            Action:
            - ec2:DescribeTags
          - Effect: Allow
            Resource:
            - arn:aws:s3:::kuali-*
            - !Sub arn:aws:s3:::${PdfS3BucketName}*
            Action: "*"
      - PolicyName:
          !Sub "${GlobalTag}-${Landscape}-read-secrets"
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - secretsmanager:GetResourcePolicy
            - secretsmanager:GetSecretValue
            - secretsmanager:DescribeSecret
            - secretsmanager:ListSecretVersionIds
            Resource:
            - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:kuali/${Baseline}/*
      - PolicyName:
          !Sub "${GlobalTag}-${Landscape}-read-rds-metadata"
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - rds:Describe*
            - rds:ListTagsForResource
            - tag:GetResources
            - tag:GetTagKeys
            - tag:GetTagValues
            Resource: "*"
            # Used for resourcegroupstaggingapi get-resources function, so the following won't work:
            # - !Sub arn:aws:rds:${AWS::Region}:${AWS::AccountId}:db:kuali-oracle-${Landscape}
            # Condition:
            #   StringEquals:
            #     aws:ResourceTag/Name: !Sub kuali-oracle-${Landscape}
            #     rds:db-tag/Name: !Sub kuali-oracle-${Landscape}
      - !If 
        - UseMongoEc2Instance
        - PolicyName:
            !Sub "${GlobalTag}-${Landscape}-ssm-to-mongo"
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
              - ssm:SendCommand
              - ssm:CancelCommand
              Resource:
              - !Sub 
                - arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/${id}
                - id: !Ref MongoInstanceId
              - !Sub arn:aws:ssm:${AWS::Region}::document/AWS-RunShellScript
        - !Ref AWS::NoValue

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Condition: CreateProfile
    Properties:
      InstanceProfileName: !Sub ${GlobalTag}-${Landscape}-profile
      Path: "/"
      Roles:
      - !If [CreateRole, !Ref EC2Role, !Ref InstanceRole]

  EC2InstanceLogsGroup:
    Type: AWS::Logs::LogGroup
    Condition: CreateLogsGroup
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub ${GlobalTag}-${Landscape}
      RetentionInDays: !If [ IsProd, 365, 30 ]
                
  EC2Instance:
    Type: AWS::EC2::Instance
    Description: EC2 instance for hosting kuali research modules.
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT15M
    Properties:
      Tags:
      - Key: Name
        Value: !If [CreateProfile, !Sub "${GlobalTag}-${Landscape}-ec2-1", !Sub "${GlobalTag}-${Landscape}-ec2-2"]
      - Key: self-stoppable
        Value: 'false'
      - Key: Landscape
        Value: !Ref Landscape
      - Key: Service
        Value: !Ref Service
      - Key: Function
        Value: !Ref Function
      - Key: LogsGroup
        Value: !If [CreateLogsGroup, !Ref EC2InstanceLogsGroup, !Ref EC2InstanceLogsGroupArn]
      ImageId: 
        !Ref ECSAMI
      InstanceType:
        !Ref InstanceType
      SecurityGroupIds:
      - !Ref SecurityGroupId
      KeyName:
        !If 
          - UseKeypair
          - !Ref EC2KeypairName
          - !Ref AWS::NoValue
      IamInstanceProfile:
        !If [CreateProfile, !Ref EC2InstanceProfile, !Ref InstanceProfile]
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 64
            DeleteOnTermination: true
      SubnetId: !Ref CampusSubnet

      UserData: 
        "Fn::Base64": !Sub |
          #!/bin/bash

          # Install with yum:
          # 1) Ssm agent so that this ec2 instance can participate in ssm sessions.
          # 2) Mongo command line shell client (for those shelled in to this instance it provides quick way to test database connection)
          # 3) Perl and zip libraries needed to unpack and run custom metric monitoring for cloudwatch.
          # 4) Other utilities like git, sysstat etc.
          yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
          yum install -y https://repo.mongodb.org/yum/amazon/2/mongodb-org/4.4/x86_64/RPMS/mongodb-org-shell-4.4.1-1.amzn2.x86_64.rpm
          yum install -y https://repo.mongodb.org/yum/amazon/2/mongodb-org/4.4/x86_64/RPMS/mongodb-database-tools-100.4.1.x86_64.rpm
          yum install -y perl-Switch perl-DateTime perl-Sys-Syslog perl-LWP-Protocol-https perl-Digest-SHA.x86_64
          yum install -y aws-cfn-bootstrap
          yum install -y git
          yum install -y zip unzip
          yum install -y sysstat
          yum install -y jq

          # Install and run docker
          amazon-linux-extras install -y docker
          service docker start
          usermod -a -G docker ec2-user
          chkconfig docker on
          # Install docker-compose
          curl \
            -L https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) \
            -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
          
          # Install required packages for scripts that will monitor and upload custom metrics to cloudwatch.
          curl https://aws-cloudwatch.s3.amazonaws.com/downloads/CloudWatchMonitoringScripts-1.2.2.zip \
            -o /var/lib/CloudWatchMonitoringScripts-1.2.2.zip
          unzip -d /var/lib/CloudWatchMonitoringScripts-1.2.2.zip
          rm -f /var/lib/CloudWatchMonitoringScripts-1.2.2.zip

          # Create a log directory for the output of ssm commands sent by a jenkins server
          [ ! -d /var/log/jenkins ] && mkdir -p /var/log/jenkins
          
          # Implement all the metadata in AWS::CloudFormation::Init
          /opt/aws/bin/cfn-init \
            -v \
            --configsets AllConfigs \
            --region ${AWS::Region} \
            --stack ${AWS::StackName} \
            --resource EC2Instance
            
          # Now that all initialization is done signal the result of the cfn-init attempt
          /opt/aws/bin/cfn-signal \
            -e $? \
            --region ${AWS::Region} \
            --stack ${AWS::StackName} \
            --resource EC2Instance

    Metadata:
      AWS::CloudFormation::Authentication:
        # This authentication will make possible replacing inline file content with paths to files in s3
        # https://aws.amazon.com/blogs/devops/authenticated-file-downloads-with-cloudformation/
        S3AccessCreds:
          type: S3
          roleName:
            !If [CreateProfile, !Ref EC2Role, !Ref InstanceRole]
          buckets:
          - !Ref TemplateBucketName

      AWS::CloudFormation::Init:
        configSets:
          AllConfigs:
          - getFiles
          - ConfigSet: RunCommands
          GetFiles:
          - getFiles
          RunCommands:
          - ConfigSet: GetConfigsFromS3
          - ConfigSet: ProcessEnvFiles
          - ConfigSet: ProcessKcConfigFile
          - ConfigSet: StartProcesses
          StartProcesses:
          - 04_docker_run_containers
          - 05_initialize_core_mongodb_content
          # - 06_start_cron_for_custom_cloudwatch_metrics
          GetConfigsFromS3:
          - 01_get_configs_from_s3
          ProcessEnvFiles:
          - 02_process_env_files
          ProcessKcConfigFile:
          - 03_process_kc-config_file
          RunDockerContainers:
          - 04_docker_run_containers
          InitializeCoreMongodbContent:
          - 05_initialize_core_mongodb_content
          StartCronForCustomCloudwatchMetrics:
          - 06_start_cron_for_custom_cloudwatch_metrics

        getFiles:
          packages:
            yum:
              awslogs: []
          files:
            /opt/kuali/README.txt:
              content: !Sub |
                This directory contains the "environment" for each app to run
                in a docker container that it needs.
                This includes env-file, configuration files, keys, etc.
                These are specific to the ${Landscape} landscape.
              mode: "000775"
              owner: root
              group: root
            /opt/kuali/scripts/crontab:
              content: |
                SHELL=/bin/bash
                PATH=/sbin:/bin:/usr/sbin:/usr/bin
                MAILTO=root
                HOME=/
                
                # Send custom metrics to cloudwatch once every minute
                # NOTE: The cronjob will start, but it does nothing until you uncomment the 1 or more of the 3 lines below.
                # This is a test ec2 instance, so defaulting to running these scripts manually while shelled in."
                # Check the system log for any errors this script encounters"
                # * * * * * /opt/kuali/scripts/send-custom-cloudwatch-metrics.sh "custom1"
                # * * * * * /opt/kuali/scripts/send-custom-cloudwatch-metrics.sh "custom2" "ec2"
                # * * * * * /opt/kuali/scripts/send-custom-cloudwatch-metrics.sh "psuedo"  "ec2" "${TemplateBucketName}" "${AWS::Region}"
                #
                0 3 * * * /bin/bash /opt/kuali/scripts/stop-instance.sh  ${AWS::Region}
              mode: "000644"
              owner: root
              group: root
            /etc/cfn/cfn-hup.conf:
              mode: "000400"
              owner: root
              group: root
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                # Change interval from default 15 minutes to 5
                interval=5
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.EC2Instance.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource EC2Instance --configsets AllConfigs
            /etc/awslogs/awscli.conf:
              content: !Sub |
                [plugins]
                cwlogs = cwlogs
                [default]
                region = ${AWS::Region}
            /etc/awslogs/awslogs.conf:
              content: !Sub |
                [general]
                state_file = /var/lib/awslogs/agent-state
                
                [/var/log/dmesg]
                file = /var/log/dmesg
                log_group_name = ${GlobalTag}-${Landscape}
                log_stream_name = {instance_id}/var/log/dmesg
                
                [/var/log/messages]
                file = /var/log/messages
                log_group_name = ${GlobalTag}-${Landscape}
                log_stream_name = {instance_id}/var/log/messages
                datetime_format = %b %d %H:%M:%S
                
                [/var/log/docker]
                file = /var/log/docker
                log_group_name = ${GlobalTag}-${Landscape}
                log_stream_name = {instance_id}/var/log/docker
                datetime_format = %Y-%m-%dT%H:%M:%S.%f
                
                [/var/log/localhost]
                file = /opt/kuali/kc_tomcat_logs/localhost.log
                log_group_name = ${GlobalTag}-${Landscape}
                log_stream_name = {instance_id}/var/log/localhost
                datetime_format = %Y-%m-%dT%H:%M:%S.%f
                
                [/var/log/catalina]
                file = /opt/kuali/kc_tomcat_logs/catalina.log
                log_group_name = ${GlobalTag}-${Landscape}
                log_stream_name = {instance_id}/var/log/catalina
                datetime_format = %Y-%m-%dT%H:%M:%S.%f
                
                [/var/log/cfn-init]
                file = /var/log/cfn-init.log
                log_group_name = ${GlobalTag}-${Landscape}
                log_stream_name = {instance_id}/var/log/cfn-init
                datetime_format = %Y-%m-%d %H:%M:%S,
                # multi_line_start_pattern = \d{4}\-\d{2}\-\d{2} \d{2}:\d{2}:\d{2},\d{3}
            /opt/kuali/scripts/process-configs.sh:
              source: !Sub http://${TemplateBucketName}.s3.amazonaws.com/cloudformation/scripts/ec2/process-configs.sh
              mode: "000775"
              owner: root
              group: root
            /opt/kuali/scripts/initialize-mongo-database.sh:
              source: !Sub http://${TemplateBucketName}.s3.amazonaws.com/cloudformation/scripts/ec2/initialize-mongo-database.sh
              mode: "000775"
              owner: root
              group: root
            /opt/kuali/scripts/stop-instance.sh:
              source: !Sub http://${TemplateBucketName}.s3.amazonaws.com/cloudformation/scripts/ec2/stop-instance.sh
              mode: "000775"
              owner: root
              group: root
            /opt/kuali/scripts/send-custom-cloudwatch-metrics.sh:
              source: !Sub http://${TemplateBucketName}.s3.amazonaws.com/cloudformation/scripts/ec2/cloudwatch-metrics.sh
              mode: "000744"
              owner: root
              group: root
            /opt/kuali/scripts/start.docker.containers.sh:
              content: !Sub |
                #!/bin/bash
                
                # Inject the instance-id of this ec2 instance into the docker-compose yaml file so that container output each get their own log stream.
                instanceId=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
                sed -i "s/awslogs-stream: /awslogs-stream: ${!instanceId}\//g" /opt/kuali/scripts/docker-compose.yaml

                # Prepare directories for mounting to kuali-research container
                [ ! -d /opt/kuali/kc_printing ] && mkdir -p /opt/kuali/kc_printing
                [ ! -d /opt/kuali/kc_javamelody ] && mkdir -p /opt/kuali/kc_javamelody
                [ ! -d /opt/kuali/kc_attachments ] && mkdir -p /opt/kuali/kc_attachments
                [ ! -d /opt/kuali/kc_tomcat_logs ] && mkdir -p /opt/kuali/kc_tomcat_logs
                [ ! -d /opt/kuali/kc_newrelic_logs ] && mkdir -p /opt/kuali/kc_newrelic_logs

                # Set these environment variables for the kuali-research container
                # These should have been passed in by configset command.
                #  - LANDSCAPE
                #  - NEW_RELIC_LICENSE_KEY
                #  - NEW_RELIC_AGENT_ENABLED
                #  - JAVA_ENV
                # But not this one, so set it here:
                export DNS_NAME="${!DNS_NAME}"

                # Remove all existing containers
                /usr/local/bin/docker-compose down 2> /dev/null || true

                # Log into the docker registry
                $(aws ecr get-login --no-include-email --region ${AWS::Region})

                /usr/local/bin/docker-compose up --quiet-pull --detach
                
              mode: "000775"
              owner: root
              group: root
            /opt/kuali/scripts/docker-compose.yaml:
              content: !Sub |
                # NOTE: Make awslogs-create-group=false so that logging from the containers does not cause the logsGroup to 
                # get recreated during stack deletion. Apparently, the logs group is getting deleted first during stack deletion
                # and one or more of the containers continues to send data to cloudwatch before the ec2 instance can also be deleted.
                # During the next stack creation, cloudformation errors out due to the log group already existing.

                version: '3'
                services:

                  cor-main:
                    image: ${CoreImage}
                    container_name: cor-main
                    restart: unless-stopped
                    env_file: /opt/kuali/s3/core/environment.variables.s3
                    volumes:
                      - /opt/kuali/s3/core:/var/core-config
                    logging:
                      driver: awslogs
                      options:
                        awslogs-region: ${AWS::Region}
                        awslogs-group: ${GlobalTag}-${Landscape}
                        awslogs-stream: core-docker-container
                        awslogs-create-group: "false"
                    ports:
                    - 3000:3000

                  kuali-research:
                    image: ${KcImage}
                    container_name: kuali-research
                    restart: unless-stopped
                    volumes:
                      - /opt/kuali/s3/kc:/opt/kuali/main/config
                      - /opt/kuali/kc_printing:/opt/kuali/logs/printing/logs
                      - /opt/kuali/kc_javamelody:/var/log/javamelody
                      - /opt/kuali/kc_attachments:/opt/tomcat/temp/dev/attachments
                      - /opt/kuali/kc_tomcat_logs:/opt/tomcat/logs
                      - /opt/kuali/kc_newrelic_logs:/var/log/newrelic
                    environment:
                      - NEW_RELIC_LICENSE_KEY=${!NEW_RELIC_LICENSE_KEY}
                      - NEW_RELIC_AGENT_ENABLED=${!NEW_RELIC_AGENT_ENABLED}
                      - JAVA_ENV=${!NEW_RELIC_ENVIRONMENT}
                      - DNS_NAME=${DNSName}
                    logging:
                      driver: awslogs
                      options:
                        awslogs-region: ${AWS::Region}
                        awslogs-group: ${GlobalTag}-${Landscape}
                        awslogs-stream: kc-docker-container
                        awslogs-create-group: "false"
                    ports:
                    - 8080:8080

                  research-portal:
                    image: ${PortalImage}
                    container_name: research-portal
                    restart: unless-stopped
                    volumes:
                      - /opt/kuali/s3/portal:/var/portal-config
                    env_file: /opt/kuali/s3/portal/environment.variables.s3 
                    logging:
                      driver: awslogs
                      options:
                        awslogs-region: ${AWS::Region}
                        awslogs-group: ${GlobalTag}-${Landscape}
                        awslogs-stream: portal-docker-container
                        awslogs-create-group: "false"
                    ports:
                    - 3005:3005

                  research-pdf:
                    image: ${PdfImage}
                    container_name: research-pdf
                    restart: unless-stopped
                    env_file: /opt/kuali/s3/pdf/environment.variables.s3
                    logging:
                      driver: awslogs
                      options:
                        awslogs-region: ${AWS::Region}
                        awslogs-group: ${GlobalTag}-${Landscape}
                        awslogs-stream: pdf-docker-container
                        awslogs-create-group: "false"
                    ports:
                    - 3006:3006

              mode: "000775"
              owner: root
              group: root
        01_get_configs_from_s3:
          commands:
            get_configs_from_s3:
              cwd: /opt/kuali/scripts
              env:
                TASK: get_configs_from_s3             
                LANDSCAPE: !Ref Landscape
                BASELINE: !Ref Baseline
                TEMPLATE_BUCKET_NAME: !Ref TemplateBucketName
                AWS_DEFAULT_REGION: !Ref AWS::Region
              command: bash process-configs.sh
        02_process_env_files:
          commands:
            process_env_files:
              cwd: /opt/kuali/scripts
              env:
                TASK: process_env_files
                LANDSCAPE: !Ref Landscape
                ENTITY_ID: !Ref EntityId
                DNS_NAME: !Ref DNSName
                USING_ROUTE53: !Ref UsingRoute53
                ENV_FILE_FROM_S3_CORE: /opt/kuali/s3/core/environment.variables.s3
                ENV_FILE_FROM_S3_PORTAL: /opt/kuali/s3/portal/environment.variables.s3
                ENV_FILE_FROM_S3_PDF: /opt/kuali/s3/pdf/environment.variables.s3
                MONGO_EC2_IP: !If [ UseMongoEc2Instance, !Ref MongoEc2Ip, '' ]
                PDF_BUCKET_NAME: !Ref PdfS3BucketName
                AWS_DEFAULT_REGION: !Ref AWS::Region
                SHIB_HOST: 
                  !If
                    - UsingShibboleth
                    - !If [ IsTest, 'shib-test.bu.edu', 'shib.bu.edu' ]
                    - !Ref AWS::NoValue
              command: bash process-configs.sh
        03_process_kc-config_file:
          commands:
            process_kc-config_file:
              cwd: /opt/kuali/scripts
              env:
                TASK: process_kc-config_file
                DNS_NAME: !Ref DNSName
                RDS_HOSTNAME: !If [ RdsEndpointProvided, !Ref RdsEndpoint, !Ref AWS::NoValue ]
                LANDSCAPE: !Ref Landscape
                BASELINE: !Ref Baseline
                AWS_DEFAULT_REGION: !Ref AWS::Region
              command: bash process-configs.sh
        04_docker_run_containers:
          commands:
            docker_run_containers:
              cwd: /opt/kuali/scripts
              env:
                LANDSCAPE: !Ref Landscape
                JAVA_ENV: !Ref Landscape
                NEW_RELIC_ENVIRONMENT: !Ref Landscape
                NEW_RELIC_LICENSE_KEY: !If [ NewrelicLicsenseKeyProvided, !Ref NewrelicLicsenseKey, !Ref AWS::NoValue ]
                NEW_RELIC_AGENT_ENABLED: !If [ NewrelicLicsenseKeyProvided, !Ref EnableNewRelicAPM, 'false' ] 
                NEW_RELIC_INFRASTRUCTURE_ENABLED: !If [ NewrelicLicsenseKeyProvided, !Ref EnableNewRelicInfrastructure, 'false' ]
                AWS_DEFAULT_REGION: !Ref AWS::Region
              command: bash start.docker.containers.sh
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                - /etc/cfn/cfn-hup.conf
                - /etc/cfn/hooks.d/cfn-auto-reloader.conf
              # awslogs:
              # NOTE: If you are using Amazon Linux 2, the awslogs service is now called "awslogsd"
              awslogsd:
                enabled: true
                ensureRunning: true
                files:
                - /etc/awslogs/awslogs.conf
                - /etc/awslogs/awscli.conf
        05_initialize_core_mongodb_content:
          commands:
            initialize_core_mongodb_content:
              cwd: /opt/kuali/scripts
              env:
                TASK: update-core
                DNS_NAME: !Ref DNSName
                ENTITY_ID: !Ref EntityId
                USING_ROUTE53: !Ref UsingRoute53
                DEBUG: 'false'
                COLLECTIONS: 'incommons institutions users'
                BASELINE: !Ref Baseline
                LANDSCAPE: !Ref Landscape
                AWS_DEFAULT_REGION: !Ref AWS::Region
                SHIB_HOST: 
                  !If
                    - UsingShibboleth
                    - !If [ IsTest, 'shib-test.bu.edu', 'shib.bu.edu' ]
                    - !Ref AWS::NoValue
                MONGO_INSTANCE_ID: !Ref MongoInstanceId
                MONGO_URI:
                  !If
                  - UseMongoEc2Instance
                  - !Sub 
                    - ${Url}:${Port}/${DbName}
                    - Url: !Ref MongoEc2Ip
                      Port: 27017
                      DbName: core-development
                  - ''
                # An empty MONGO_URI parameter will trigger a search for mongo parameters in this properties file:
                ENV_FILE_FROM_S3_CORE: /opt/kuali/s3/core/environment.variables.s3
                # Import users to cor-main from an atlas mongodb source identified by baseline (BASELINE env variable must be set).
                USER_IMPORT_MONGODB:  !If [ UseMongoEc2Instance, 'true', 'false' ]
                # Otherwise import users from a dump file in an s3 subdirectory identified by baseline (BASELINE env variable must be set).
                USER_IMPORT_FILE: 
                  !If
                    - UseMongoEc2Instance
                    - !Sub s3://${TemplateBucketName}/${Baseline}/core/userdump.json
                    - !Ref AWS::NoValue
              command: bash initialize-mongo-database.sh
        06_start_cron_for_custom_cloudwatch_metrics:
          commands:
            start_cron_for_custom_cloudwatch_metrics:
              command: crontab -u root /opt/kuali/scripts/crontab
              env:
                LANDSCAPE: !Ref Landscape
                AWS_DEFAULT_REGION: !Ref AWS::Region


Outputs:

  PrivateIP:
    Value:
      !GetAtt EC2Instance.PrivateIp

  InstanceId:
    Description: The id of the ec2 instance
    Value:
      !Ref EC2Instance
  
  EC2InstanceProfile:
    Description: The profile applied to the ec2 instance
    Value:
      !If [CreateProfile, !Ref EC2InstanceProfile, !Ref InstanceProfile]

  EC2Role:
    Description: The profile arn applied to the ec2 instance
    Value:
      !If [CreateRole, !Ref EC2Role, !Ref InstanceRole]

  EC2InstanceLogsGroupArn:
    Description: The ARN of the logs group create for kuali-research
    Value: 
      !If [CreateLogsGroup, !Ref EC2InstanceLogsGroup, !Ref EC2InstanceLogsGroupArn]
