AWSTemplateFormatVersion: 2010-09-09


Description: >
  Create a new ec2 instance with the kuali suite of modules deployed as containers and proxied with an application load balancer.


Parameters:

  GlobalTag:
    Type: String
    Description: >
      A common value that all resources in this template will have prefixed to
      their name and attached as a tag to establish a bundling through naming convention.
    Default: kuali-ec2-alb

  Landscape:
    Description: Specify which landscape to build into the VPC
    Type: String
    AllowedValues:
    - sb
    - ci
    - qa
    - stg
    - prod
    ConstraintDescription: >
      This parameter is restricted to the following values: sb, ci, qa, stg, prod
    Default: sb

  InstanceType:
    Type: String
    Description: What type of EC2 instance should be used for hosting?
    AllowedValues:
    - t2.small
    - t2.medium
    - t2.large
    - t2.xlarge
    - t3.small
    - t3.medium
    - t3.large
    - t3.xlarge
    - m4.large
    - m4.xlarge
    - m5.large
    - m5.xlarge
    ConstraintDescription: Specified instance type is not within selection list.
    Default: m4.large

  BucketName:
    Type: String
    Description: The S3 bucket where our config files, keys, etc. are stored
    Default: kuali-research-ec2-setup

  CoreImage:
    Type: String
    Description: 'Example: 730096353738.dkr.ecr.us-east-1.amazonaws.com/core:2001.0040'

  KcImage:
    Type: String
    Description: 'Example: 730096353738.dkr.ecr.us-east-1.amazonaws.com/coeus:2001.0040'

  PortalImage:
    Type: String
    Description: 'Example: 730096353738.dkr.ecr.us-east-1.amazonaws.com/portal:2001.0040'

  PdfImage:
    Type: String
    Description: 'Example: 730096353738.dkr.ecr.us-east-1.amazonaws.com/research-pdf:2002.0003'

  EnableNewRelicAPM:
    Type: String
    Description: Is newrelic APM to be enabled for this landscape?
    Default: "false"
    AllowedValues:
    - "true"
    - "false"
    ConstraintDescription: Enter "true" or "false" only.
    Default: "false"

  EnableNewRelicInfrastructure:
    Type: String
    Description: Is newrelic infrastructure (with logging) to be enabled for this landscape?
    Default: "false"
    AllowedValues:
    - "true"
    - "false"
    ConstraintDescription: Enter "true" or "false" only.
    Default: "false"

  SecurityGroupId:
    Type: AWS::EC2::SecurityGroup::Id
    Description: Id that identifies the security group for the ec2 instance

  LoadBalancerUrl:
    Type: String
    Description: The DNS name for the ALB. The app is publicly reachable at this address.

  PrivateSubnet:
    Type: AWS::EC2::Subnet::Id
    Description: The private subnets for the ec2 instances.

  InstanceProfile:
    Type: String
    Description: If the instance profile already exists, provide its name here.
    Default: "create"
  
  InstanceRole:
    Type: String
    Description: If the role for the instance profile already exists, provide it here.
    Default: "create"

  AMIInfoFunctionArn:
    Type: String
    Description: If the ami lookup lambda function already exists, provide its arn here.
    Default: "create"

  EC2InstanceLogsGroupArn:
    Type: String
    Description: If the logs group already exists, provide its arn here.
    Default: "create"


Conditions: 
  CreateProfile: !Equals [ !Ref InstanceProfile, "create" ]
  CreateRole: !Equals [ !Ref InstanceRole, "create" ]
  CreateAMIInfoFunction: !Equals [ !Ref AMIInfoFunctionArn, "create" ]
  CreateLogsGroup: !Equals [ !Ref EC2InstanceLogsGroupArn, "create" ]


Resources:

  EC2Role:
    Type: AWS::IAM::Role
    Condition: CreateRole
    Description: >
      This IAM Role is attached to all of the ECS hosts. Add other IAM
      policy statements here to allow access from your ECS hosts to other AWS services.
      This role will be used by ALL containers running on the ECS host.
    Properties:
      Path: "/"
      RoleName: !Sub ${GlobalTag}-${Landscape}-ec2-role
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      - arn:aws:iam::aws:policy/AWSCloudFormationReadOnlyAccess
      - arn:aws:iam::aws:policy/ElasticLoadBalancingReadOnly
      - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
      - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      - arn:aws:iam::aws:policy/CloudWatchFullAccess
      Policies:
      - PolicyName:
          !Sub "stop-ec2-instance-policy"
        PolicyDocument:
          Statement:
          - Effect: Allow
            Resource: "arn:aws:ec2:*:*:instance/${ec2:SourceInstanceARN}"
            Action:
            - ec2:StopInstances
          - Effect: Allow
            Resource:
            - arn:aws:s3:::kuali-research-ec2-setup*
            - arn:aws:s3:::kuali-docker-run-stdout*
            - arn:aws:s3:::kuali-research-pdf-*
            Action: "*"

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Condition: CreateProfile
    Properties:
      InstanceProfileName: !Sub ${GlobalTag}-${Landscape}-profile
      Path: "/"
      Roles:
      - !If [CreateRole, !Ref EC2Role, !Ref InstanceRole]

  EC2InstanceLogsGroup:
    Type: AWS::Logs::LogGroup
    Condition: CreateLogsGroup
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub ${GlobalTag}-${Landscape}-LG
      RetentionInDays: 30

  Utils:
    Type: AWS::CloudFormation::Stack
    Condition: CreateAMIInfoFunction
    Properties:
      TemplateURL: 
        !Sub https://s3.amazonaws.com/${BucketName}/cloudformation/lambda/ami-lookup.yaml
      Parameters:
        GlobalTag:
          !Sub ${GlobalTag}-${Landscape}-ami-lookup

  AMIInfo:
    Type: Custom::AMIInfo
    Properties:
      ServiceToken:
        !If 
        - CreateAMIInfoFunction
        - !GetAtt Utils.Outputs.AMIInfoFunctionArn
        - !Ref AMIInfoFunctionArn        
      Region:
        Ref: AWS::Region
      InstanceType:
        !Ref InstanceType   
      
  EC2Instance:
    Type: AWS::EC2::Instance
    Description: EC2 instance for hosting kuali research modules.
    Properties:
      Tags:
      - Key: Name
        Value: !If [CreateProfile, !Sub "${GlobalTag}-${Landscape}-ec2-1", !Sub "${GlobalTag}-${Landscape}-ec2-2"]
      ImageId: 
        # ami-00129b193dc81bc31
        !GetAtt AMIInfo.Id
      InstanceType:
        !Ref InstanceType
      SecurityGroupIds:
      - !Ref SecurityGroupId
      SubnetId: 
        !Ref PrivateSubnet
      IamInstanceProfile:
        !If [CreateProfile, !Ref EC2InstanceProfile, !Ref InstanceProfile]
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 64
            DeleteOnTermination: true

      UserData: 
        "Fn::Base64": !Sub |
          #!/bin/bash
          yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
          yum install -y aws-cfn-bootstrap
          yum install -y git
          # Add perl and zip libraries needed to unpack and run custom metric monitoring for cloudwatch.
          yum install -y perl-Switch perl-DateTime perl-Sys-Syslog perl-LWP-Protocol-https perl-Digest-SHA.x86_64
          yum install -y zip unzip
          yum install -y sysstat
          yum install -y jq
          # Install and run docker
          amazon-linux-extras install -y docker
          service docker start
          usermod -a -G docker ec2-user
          chkconfig docker on
          # Install docker-compose
          curl \
            -L https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) \
            -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
          
          # Install required packages for scripts that will monitor and upload custom metrics to cloudwatch.
          curl https://aws-cloudwatch.s3.amazonaws.com/downloads/CloudWatchMonitoringScripts-1.2.2.zip \
            -o /var/lib/ && CloudWatchMonitoringScripts-1.2.2.zip
          unzip -d /var/lib/ CloudWatchMonitoringScripts-1.2.2.zip
          rm -f /var/lib/CloudWatchMonitoringScripts-1.2.2.zip
          
          # Implement all the metadata in AWS::CloudFormation::Init
          /opt/aws/bin/cfn-init \
            -v \
            --configsets AllConfigs \
            --region ${AWS::Region} \
            --stack ${AWS::StackName} \
            --resource EC2Instance
            
          # Now that all initialization is done signal success
          /opt/aws/bin/cfn-signal \
            -e $? \
            --region ${AWS::Region} \
            --stack ${AWS::StackName} \
            --resource EC2Instance

    Metadata:
      AWS::CloudFormation::Authentication:
        S3AccessCreds:
          type: S3
          roleName:
            !If [CreateProfile, !Ref EC2Role, !Ref InstanceRole]
          buckets:
          - !Ref BucketName

      AWS::CloudFormation::Init:
        configSets:
          AllConfigs:
          - getFiles
          - ConfigSet: RunCommands
          GetFiles:
          - getFiles
          RunCommands:
          - ConfigSet: cmd01
          - ConfigSet: cmd02
          - ConfigSet: cmd03
          # - ConfigSet: cmd04
          cmd01:
          - 01_get_configs_from_s3
          cmd02:
          - 02_create_env_exports_file
          cmd03:
          - 03_docker_run_container
          cmd04:
          - 04_start_cron_for_custom_cloudwatch_metrics
        getFiles:
          packages:
            yum:
              awslogs: []
          files:
            /opt/kuali/README.txt:
              content: !Sub |
                This directory contains the "environment" for each app to run
                in a docker container that it needs.
                This includes env-file, configuration files, keys, etc.
                These are specific to the ${Landscape} landscape.
              mode: "000775"
              owner: root
              group: root
            /opt/kuali/scripts/crontab:
              content: |
                SHELL=/bin/bash
                PATH=/sbin:/bin:/usr/sbin:/usr/bin
                MAILTO=root
                HOME=/
                
                # Send custom metrics to cloudwatch once every minute
                # NOTE: The cronjob will start, but it does nothing until you uncomment the 1 or more of the 3 lines below.
                # This is a test ec2 instance, so defaulting to running these scripts manually while shelled in."
                # Check the system log for any errors this script encounters"
                # * * * * * /opt/kuali/scripts/send-custom-cloudwatch-metrics1.sh
                # * * * * * /opt/kuali/scripts/send-custom-cloudwatch-metrics2.sh
                # * * * * * /opt/kuali/scripts/send-psuedo-cloudwatch-metrics.sh
                #
                0 3 * * * /bin/bash /opt/kuali/scripts/stopinstance.sh
              mode: "000644"
              owner: root
              group: root
            /opt/kuali/scripts/send-custom-cloudwatch-metrics1.sh:
              content: |
                #!/bin/bash
                # Adding additional cloudwatch metrics that include memory utilization.
                # See: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/mon-scripts.html
                /var/lib/aws-scripts-mon/mon-put-instance-data.pl \
                  --mem-used-incl-cache-buff \
                  --mem-util \
                  --mem-avail \
                  --disk-space-util \
                  --disk-path=/ \
                  --from-cron
              mode: "000744"
              owner: root
              group: root
            /opt/kuali/scripts/send-custom-cloudwatch-metrics2.sh:
              content: |
                #!/bin/bash
                # Cloudwatch metrics alternative that include are custom and cover all needed measurments.
                # Use this method as a replacement for the mon-put-instance-data.pl approach.
                # See: https://aws.amazon.com/premiumsupport/knowledge-center/cloudwatch-custom-metrics/
                export AWS_DEFAULT_REGION=us-east-1
                INSTANCEID=$(curl http://169.254.169.254/latest/meta-data/instance-id)
                USEDMEMORY_PERCENT=$(free -m | awk 'NR==2{printf "%.2f\t", $3*100/$2 }')
                USEDDISK_PERCENT=$(df / | awk 'NR==2{print $5}' | sed 's/\%//g')
                TCP_CONN=$(netstat -an | wc -l)
                TCP_CONN_PORT_80=$(netstat -an | grep 80 | wc -l)
                USERS=$(uptime | awk '{ print $4 }')
                IO_WAIT_PERCENT=$(iostat | awk 'NR==4 {print $4}')
                # If no average cpu record, then take the cpu as of this moment
                [ -z "$((cat /tmp/average.cpu | grep -P '^\d+(\.\d+)?$') 2> /dev/null)" ] && grep 'cpu ' /proc/stat | awk '{print ($2+$4)*100/($2+$4+$5)}' > /tmp/average.cpu
                AVERAGE_CPU=$(cat /tmp/average.cpu)
                # Compute the average cpu utilization by taking a reading every 2 seconds for 58 seconds and taking their average.
                # The cron job is on a minute schedule, so 58 seconds will ensure that a new average will be recorded BEFORE the next cron cycle.
                NEXT_AVERAGE_CPU=$(n=0 && cat <(echo "$(while [ $n -lt 4 ] ; do grep 'cpu ' /proc/stat && sleep 2 && n=$((n+1)) ; done)") | awk '{c++; t += ($2+$4)*100/($2+$4+$5)} END {print t/c}')
                echo $NEXT_AVERAGE_CPU > /tmp/average.cpu
                
                aws cloudwatch put-metric-data --dimensions Instance=$INSTANCEID --namespace "EC2TestCustomMetrics" --metric-name cpu-usage --value $AVERAGE_CPU
                aws cloudwatch put-metric-data --dimensions Instance=$INSTANCEID --namespace "EC2TestCustomMetrics" --metric-name memory-usage --value $USEDMEMORY_PERCENT
                aws cloudwatch put-metric-data --dimensions Instance=$INSTANCEID --namespace "EC2TestCustomMetrics" --metric-name disk-usage --value $USEDDISK_PERCENT
                aws cloudwatch put-metric-data --dimensions Instance=$INSTANCEID --namespace "EC2TestCustomMetrics" --metric-name tcp_connections --value $TCP_CONN
                aws cloudwatch put-metric-data --dimensions Instance=$INSTANCEID --namespace "EC2TestCustomMetrics" --metric-name tcp_connection_on_port_80 --value $TCP_CONN_PORT_80
                aws cloudwatch put-metric-data --dimensions Instance=$INSTANCEID --namespace "EC2TestCustomMetrics" --metric-name nbr_of_users --value $USERS
                aws cloudwatch put-metric-data --dimensions Instance=$INSTANCEID --namespace "EC2TestCustomMetrics" --metric-name io_wait --value $IO_WAIT_PERCENT
              mode: "000744"
              owner: root
              group: root
            /opt/kuali/scripts/send-psuedo-cloudwatch-metrics.sh:
              content: !Sub |
                #!/bin/bash
                
                # This function streams a json file from s3 that indicates dummy metrics to send to cloudwatch.
                # The purpose is to simulate higher (or lower) thresholds that would trigger alarms to engage
                # a scale-in or scale-out policy for auto-scaling activity.
                sendDummyMetrics() {
                  # local json=$(cat /c/whennemuth/workspaces/ecs_workspace/dummy-metrics/dummy-ec2-metrics.json)
                  local json=$(aws s3 cp s3://${BucketName}/dummydata/dummy-ec2-metrics.json)
                  local namespace=$(echo "$json" | jq -r '.Namespace')
                  local instances=$(echo $json | jq -r -c '.Instances[]')
                  local evals=()
                  while read -r instance; do
                    local instanceId=$(echo "$instance" | jq -r '.InstanceId')
                    local metrics=$(echo $instance | jq -r -c '.Metrics[]')
                    while read -r metric; do
                      local name=$(echo "$metric" | jq -r '.MetricName')
                      local baseline=$(echo "$metric" | jq -r '.BaselineValue')
                      local deviation=$(echo "$metric" | jq -r '.DeviationValue')
                      # Examples to set until to a value offset from current UTC time
                      # date +%s --date='+5 minute'
                      # date +%s --date='-1 hour'
                      local until=$(echo "$metric" | jq -r '.DeviateUntil')
                      local value=$baseline
                      local now=$(date +%s)
                      [ $until -gt $now ] && value=$deviation
                      local evalstr="$(cat <<EOF
                        aws cloudwatch put-metric-data \
                          --region ${AWS::Region} \
                          --dimensions Instance=$instanceId \
                          --namespace "$namespace" \
                          --metric-name $name \
                          --value $value
                EOF
                      )"
                      evals=("${!evals[@]}" "$(echo "$evalstr" | sed -E 's/[[:space:]]+/ /g' | xargs)")
                    done <<< "$metrics"
                  done <<< "$instances"
                
                  for cmd in "${!evals[@]}" ; do
                    echo "$cmd"
                    eval "$cmd"
                  done
                }
                
                sendDummyMetrics
              mode: "000744"
              owner: root
              group: root
            /etc/cfn/cfn-hup.conf:
              mode: "000400"
              owner: root
              group: root
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                # Change interval from default 15 minutes to 5
                interval=5
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.EC2Instance.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource EC2Instance --configsets AllConfigs
            /etc/awslogs/awscli.conf:
              content: !Sub |
                [plugins]
                cwlogs = cwlogs
                [default]
                region = ${AWS::Region}
            /etc/awslogs/awslogs.conf:
              content: !Sub |
                [general]
                state_file = /var/lib/awslogs/agent-state
                
                [/var/log/dmesg]
                file = /var/log/dmesg
                log_group_name = ${GlobalTag}-${Landscape}-LG
                log_stream_name = /var/log/dmesg
                
                [/var/log/messages]
                file = /var/log/messages
                log_group_name = ${GlobalTag}-${Landscape}-LG
                log_stream_name = /var/log/messages
                datetime_format = %b %d %H:%M:%S
                
                [/var/log/docker]
                file = /var/log/docker
                log_group_name = ${GlobalTag}-${Landscape}-LG
                log_stream_name = /var/log/docker
                datetime_format = %Y-%m-%dT%H:%M:%S.%f
            /opt/kuali/scripts/s3.download.configs.sh:
              content: !Sub |
                #!/bin/bash                
                echo "Downloading all configurations for containers from the s3 bucket, landscape ${!LANDSCAPE}"
                
                [ ! -d /opt/kuali/s3 ] && mkdir -p /opt/kuali/s3
                cd /opt/kuali/s3
                aws s3 sync --delete \
                  --exclude "*" \
                  --include "core/*" \
                  --include "portal/*" \
                  --include "pdf/*" \
                  --include "kuali/main/config/kc-config-rds.xml" \
                  s3://${BucketName}/${!LANDSCAPE}/ .
                mv /opt/kuali/s3/kuali/main/config/kc-config-rds.xml /opt/kuali/s3/kuali/main/config/kc-config.xml
                aws s3 cp s3://${BucketName}/rice.cer /opt/kuali/s3/kuali/main/config/
                aws s3 cp s3://${BucketName}/rice.keystore /opt/kuali/s3/kuali/main/config/
              mode: "000775"
              owner: root
              group: root
            /opt/kuali/scripts/process.env.file.sh:
              content: |
                #!/bin/bash                
                # Turn a name=value line into an "export name='value'" line
                getLineExport() {
                  local line=$(echo -n "$1" | xargs) # Use xargs to trim the line.
                  # Return an empty string if the line is a properties file comment
                  [ "${line:0:1}" == "#" ] && echo "" && exit 0;
                  [ -z "$line" ] && echo "" && exit 0;
                  if [ -n "$(echo $testline | grep -P '\x22')" ] ; then
                    echo "export $line"
                  else
                    # Put double quotes around the exported variable value
                    echo "export $(echo $line | sed 's/=/="/1')\""
                  fi
                }
                  
                # Create a script to export all environment variables in the mounted directory before starting node
                createExportFile() {
                  local ENV_FILE_FROM_S3="$1"
                  if [ ! -f $ENV_FILE_FROM_S3 ] ; then
                    echo "ERROR! MISSING $ENV_FILE_FROM_S3"
                    exit 1
                  else
                    cd $(dirname $ENV_FILE_FROM_S3)
                    rm -f export.sh
                    echo "Creating $(pwd)/export.sh..."
                    while read line ; do
                      expline="$(getLineExport "$line")"
                      [ -z "$expline" ] && continue
                      prop=$(echo "$line" | cut -f1 -d '=')
                      # Override some of the existing environment variables
                      [ "${prop^^}" == "SHIB_HOST" ] && expline="export SHIB_HOST="
                      [ "${prop^^}" == "ROOT_DIR" ]  && expline="export ROOT_DIR=/var/core-temp"
                      echo "Setting env var $prop"
                      echo "$expline" >> export.sh
                    done < $ENV_FILE_FROM_S3
                    # In case the file from s3 originated on a windows file system, remove return carriage chars
                    sed -i 's/\r//g' export.sh
                  fi
                }

                export EC2_HOST="${LOADBALANCER_URL}"
                DOMAIN_NAME=$(echo ${EC2_HOST} | cut -d'/' -f3) # Strips off the "http://" portion and trailing "/"

                # Perform a replacement in kc-config.xml of application.host parameter value with this ec2 public host name.
                sed -i "s/APPLICATION_HOST/$DOMAIN_NAME/" /opt/kuali/s3/kuali/main/config/kc-config.xml

                # Perform a replacement in all environment.variables.s3 files of existing application host entries with this ec2 public host name.
                for f in $(env | grep 'ENV_FILE_FROM_S3') ; do
                  envfile="$(echo $f | cut -d'=' -f2)"
                  # Replace the standard kuali-research-[env].bu.edu references with the dns address of this instances load balancer.
                  sed -i -r "s/kuali-research.*.bu.edu/$DOMAIN_NAME/g" "$envfile"
                  # Create the export.sh file
                  createExportFile "$envfile"
                done

                exit 0
              mode: "000775"
              owner: root
              group: root
            /opt/kuali/scripts/start.docker.containers.sh:
              content: !Sub |
                #!/bin/bash
                
                # Prepare directories for mounting to kuali-research container
                [ ! -d /opt/kuali/kc_printing ] && mkdir -p /opt/kuali/kc_printing
                [ ! -d /opt/kuali/kc_javamelody ] && mkdir -p /opt/kuali/kc_javamelody
                [ ! -d /opt/kuali/kc_attachments ] && mkdir -p /opt/kuali/kc_attachments
                [ ! -d /opt/kuali/kc_tomcat_logs ] && mkdir -p /opt/kuali/kc_tomcat_logs
                [ ! -d /opt/kuali/kc_newrelic_logs ] && mkdir -p /opt/kuali/kc_newrelic_logs

                # Set these environment variables for the kuali-research container
                # These should have been passed in by configset command.
                #  - LANDSCAPE
                #  - NEW_RELIC_LICENSE_KEY
                #  - NEW_RELIC_AGENT_ENABLED
                #  - JAVA_ENV
                # But not this one, so set it here:
                export EC2_HOST="${!LOADBALANCER_URL}"

                # Remove all existing containers
                /usr/local/bin/docker-compose down 2> /dev/null || true

                # Log into the docker registry
                $(aws ecr get-login --no-include-email --region ${AWS::Region})

                /usr/local/bin/docker-compose up --detach
                
              mode: "000775"
              owner: root
              group: root
            /opt/kuali/scripts/docker-compose.yaml:
              content: !Sub |
                version: '3'
                services:

                  cor-main:
                    image: ${!CORE_IMAGE}
                    container_name: cor-main
                    restart: unless-stopped
                    env_file: /opt/kuali/s3/core/environment.variables.s3
                    volumes:
                      - /opt/kuali/s3/core:/var/core-config
                    logging:
                      driver: awslogs
                      options:
                        awslogs-region: ${AWS::Region}
                        awslogs-group: ${GlobalTag}-${Landscape}-LG
                        awslogs-stream: core-docker-container
                        awslogs-create-group: "true"
                    ports:
                    - 3000:3000

                  kuali-research:
                    image: ${!KC_IMAGE}
                    container_name: kuali-research
                    restart: unless-stopped
                    volumes:
                      - /opt/kuali/s3/kuali/main/config:/opt/kuali/main/config
                      - /opt/kuali/kc_printing:/opt/kuali/logs/printing/logs
                      - /opt/kuali/kc_javamelody:/var/log/javamelody
                      - /opt/kuali/kc_attachments:/opt/tomcat/temp/dev/attachments
                      - /opt/kuali/kc_tomcat_logs:/opt/tomcat/logs
                      - /opt/kuali/kc_newrelic_logs:/var/log/newrelic
                    environment:
                      - NEW_RELIC_LICENSE_KEY=${!NEW_RELIC_LICENSE_KEY}
                      - NEW_RELIC_AGENT_ENABLED=${!NEW_RELIC_AGENT_ENABLED}
                      - JAVA_ENV=${!NEW_RELIC_ENVIRONMENT}
                      - EC2_HOSTNAME=${!EC2_HOST}
                    logging:
                      driver: awslogs
                      options:
                        awslogs-region: ${AWS::Region}
                        awslogs-group: ${GlobalTag}-${Landscape}-LG
                        awslogs-stream: kc-docker-container
                        awslogs-create-group: "true"
                    ports:
                    - 8080:8080

                  research-portal:
                    image: ${!PORTAL_IMAGE}
                    container_name: research-portal
                    restart: unless-stopped
                    volumes:
                      - /opt/kuali/s3/portal:/var/portal-config
                    env_file: /opt/kuali/s3/portal/environment.variables.s3 
                    logging:
                      driver: awslogs
                      options:
                        awslogs-region: ${AWS::Region}
                        awslogs-group: ${GlobalTag}-${Landscape}-LG
                        awslogs-stream: portal-docker-container
                        awslogs-create-group: "true"
                    ports:
                    - 3005:3005

                  research-pdf:
                    image: ${!PDF_IMAGE}
                    container_name: research-pdf
                    restart: unless-stopped
                    env_file: /opt/kuali/s3/pdf/environment.variables.s3
                    logging:
                      driver: awslogs
                      options:
                        awslogs-region: ${AWS::Region}
                        awslogs-group: ${GlobalTag}-${Landscape}-LG
                        awslogs-stream: pdf-docker-container
                        awslogs-create-group: "true"
                    ports:
                    - 3006:3006

              mode: "000775"
              owner: root
              group: root
            /opt/kuali/scripts/stopinstance.sh:
              content: !Sub |
                #!/bin/bash
                # Target this script with a crontab and the instance will be shutdown on the crontab schedule.
                # You can skip the next scheduled shutdown by creating a /tmp/skipshutdown file.
                if [ -f /tmp/skipshutdown ] ; then
                  echo "$(date) Skipping shutdown for today - skip file found." >>  /usr/local/sbin/cronlog
                  rm -f /tmp/skipshutdown
                  exit 0
                fi
                echo "$(date) Stopping instance per cron schedule..." >> /usr/local/sbin/cronlog
                aws ec2 stop-instances --region ${AWS::Region} --instance-ids $(curl http://169.254.169.254/latest/meta-data/instance-id) >> /usr/local/sbin/cronlog 2>&1
              mode: "000775"
              owner: root
              group: root
        01_get_configs_from_s3:
          commands:
            cmd01:
              cwd: /opt/kuali/scripts
              env:
                LANDSCAPE: !Sub "${Landscape}"
              command: bash s3.download.configs.sh
        02_create_env_exports_file:
          commands:
            cmd01:
              cwd: /opt/kuali/scripts
              env:
                ENV_FILE_FROM_S3_CORE: /opt/kuali/s3/core/environment.variables.s3
                ENV_FILE_FROM_S3_PORTAL: /opt/kuali/s3/portal/environment.variables.s3
                ENV_FILE_FROM_S3_PDF: /opt/kuali/s3/pdf/environment.variables.s3
                LOADBALANCER_URL: !Sub "${LoadBalancerUrl}"
              command: bash process.env.file.sh
        03_docker_run_container:
          commands:
            cmd01:
              cwd: /opt/kuali/scripts
              env:
                LANDSCAPE: !Sub "${Landscape}"
                JAVA_ENV: !Sub "${Landscape}"
                NEW_RELIC_ENVIRONMENT: !Sub "${Landscape}"
                NEW_RELIC_LICENSE_KEY: !Sub "{NewrelicLicsenseKey}"
                NEW_RELIC_AGENT_ENABLED: !Sub "${EnableNewRelicAPM}"
                KC_IMAGE: !Sub "${KcImage}"
                CORE_IMAGE: !Sub "${CoreImage}"
                PORTAL_IMAGE: !Sub "${PortalImage}"
                PDF_IMAGE: !Sub "${PdfImage}"
                LOADBALANCER_URL: !Sub "${LoadBalancerUrl}"
              command: bash start.docker.containers.sh
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                - /etc/cfn/cfn-hup.conf
                - /etc/cfn/hooks.d/cfn-auto-reloader.conf
              # awslogs:
              # NOTE: If you are using Amazon Linux 2, the awslogs service is now called "awslogsd"
              awslogsd:
                enabled: true
                ensureRunning: true
                files:
                - /etc/awslogs/awslogs.conf
                - /etc/awslogs/awscli.conf
        04_start_cron_for_custom_cloudwatch_metrics:
          commands:
            cmd01:
              command: crontab -u root /opt/kuali/scripts/crontab
              env:
                LANDSCAPE: !Sub "${Landscape}"


Outputs:

  InstanceId:
    Description: The id of the ec2 instance
    Value:
      !Ref EC2Instance
  
  EC2InstanceProfile:
    Description: The profile applied to the ec2 instance
    Value:
      !If [CreateProfile, !Ref EC2InstanceProfile, !Ref InstanceProfile]

  EC2Role:
    Description: The profile arn applied to the ec2 instance
    Value:
      !If [CreateRole, !Ref EC2Role, !Ref InstanceRole]

  AMIInfoFunctionArn:
    Description: The ARN of the lambda function for AMI lookups.
    Value:
      !If 
      - CreateAMIInfoFunction
      - !GetAtt Utils.Outputs.AMIInfoFunctionArn
      - !Ref AMIInfoFunctionArn        

  EC2InstanceLogsGroupArn:
    Description: The ARN of the logs group create for kuali-research
    Value: 
      !If [CreateLogsGroup, !Ref EC2InstanceLogsGroup, !Ref EC2InstanceLogsGroupArn]
