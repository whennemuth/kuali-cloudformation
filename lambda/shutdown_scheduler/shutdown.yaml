AWSTemplateFormatVersion: 2010-09-09


Description: >
  Creates stack involving a single cloudwatch event that triggers at regular intervals a lambda function that checks 
  for any and all resource that are tagged in such a way as to indicate a schedule for startup, shutdown, or reboot, 
  and performs that action if current date and time indicates to do so.


Parameters:

  GlobalTag:
    Type: String
    Description: >
      A common value that all resources in this template will have prefixed to
      their name and attached as a tag to establish a bundling through naming convention.

  CodeBucketName:
    Type: String
    Description: The S3 bucket where the zipped node app will be uploaded to for the lambda creation to find.
    Default: shutdown-scheduler
  
  CodeBucketPath:
    Type: String
    Description: The path within the S3 bucket of the zipped node app for the lambda.
    Default: shutdown-scheduler.zip

  Service:
    Description: Service catalog name.
    Type: String

  Function:
    Description: The Function within the Service.
    Type: String
    
  StartupCronKey:
    Description: The name of the tag a resource uses to indicate on what schedule it should be started.
    Type: String
    Default: StartupCron

  ShutdownCronKey:
    Description: The name of the tag a resource uses to indicate on what schedule it should be stopped.
    Type: String
    Default: ShutdownCron

  RebootCronKey:
    Description: The name of the tag a resource uses to indicate on what schedule it should be rebooted.
    Type: String
    Default: RebootCron

  LastRebootTimeKey:
    Description: The name of the tag a resource uses to indicate when the last time it was rebooted by this process was.
    Type: String
    Default: LastRebootTime

  TimeZoneKey:
    Description: >
      The canonical TZ database name for the timezone cron expressions are based on.
      With this specified, cron expressions do not have to be expressed in UTC and DST is automatically accounted for.
      See https://en.wikipedia.org/wiki/List_of_tz_database_time_zones.
    Type: String
    Default: LocalTimeZone 

  MinuteInterval:
    Description: The cloudwatch event will fire to trigger the lambda on a schedule indicated by this cron expression.
    Type: Number
    Default: 5
    MinValue: 1
    MaxValue: 15

  LambdaTimeout:
    Description: The number of seconds elapsed before unfinished lambda execution will trigger a timeout.
    Type: Number
    MinValue: 5
    MaxValue: 900
    Default: 60

    
Resources:

  Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: ResourcePermissions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                - tag:GetResources
                - logs:CreateLogStream
                - logs:PutLogEvents
                Resource: '*'
              - Effect: Allow
                Action:
                - tag:TagResources
                - ec2:CreateTags
                - ec2:DescribeInstanceStatus
                - ec2:StartInstances
                - ec2:StopInstances
                - ec2:RebootInstances
                - rds:DescribeDBInstances
                - rds:StartDBInstance
                - rds:StopDBInstance
                - rds:RebootDBInstance
                Resource: '*'
                # Note: It would be nice to be able to specify the TimeZoneKey in a condition that requires the resource have it as a tag.
                # However, it does not seem possible to enforce that restriction here because  "Tagkey" portion in any aws:ResourceTag/Tagkey 
                # value cannot be a variable. Put another way, the tag key must be known when creating this policy 
                # (at least until an unknown IAM nuance is discovered). 
                # EXAMPLE: This won't work:
                # Condition:
                #   Null:
                #     - aws:ResourceTag/${TimeZoneKey}
                #     - false
                # The lambda function provides a somewhat acceptable fallback in that
                # it is configured with an environment variable that identifies the TimeZoneTag key and it won't touch any resource without it.

  LambdaLogsGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${GlobalTag}-shutdown-scheduler
      RetentionInDays: 14

  ProcessResources:
    Type: AWS::Lambda::Function
    DependsOn: LambdaLogsGroup 
    Properties:
      FunctionName: !Sub ${GlobalTag}-shutdown-scheduler
      Runtime: nodejs16.x
      Role: !GetAtt Role.Arn
      Handler: ResourceProcessor.handler
      Timeout: !Ref LambdaTimeout
      Environment:
        Variables:
          StartupCronKey: !Ref StartupCronKey
          ShutdownCronKey: !Ref ShutdownCronKey
          RebootCronKey: !Ref RebootCronKey
          LastRebootTimeKey: !Ref LastRebootTimeKey
          TimeZoneKey: !Ref TimeZoneKey
      Code:
        S3Bucket: !Ref CodeBucketName
        S3Key: !Ref CodeBucketPath
      Description: Function that stops, starts, and reboots resources

  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ProcessResources.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn : !GetAtt ScheduledRule.Arn

  ScheduledRule: 
    Type: AWS::Events::Rule
    Properties: 
      Description: "Rule for a polling schedule"
      ScheduleExpression: !Sub 'rate(${MinuteInterval} minutes)'
      State: "ENABLED"
      Targets: 
        - Arn: !GetAtt ProcessResources.Arn
          Id: !Sub ${GlobalTag}-target-function