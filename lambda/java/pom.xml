<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

  <modelVersion>4.0.0</modelVersion>
  <groupId>edu.bu.ist.apps.aws.lambda</groupId>
  <artifactId>lambda-utils</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>lambda-utils</name>
  <packaging>jar</packaging>
  <description>
  	Helper functions to back custom resources defined in kuali research ECS cloud formation templates.
  	Based on: https://github.com/stelligent/cloudformation-custom-resources/blob/master/lambda/java/pom.xml
  </description>
  

  <build>
    <finalName>lambda-utils</finalName>
  	<plugins>
  		<plugin>
  			<groupId>org.apache.maven.plugins</groupId>
  			<artifactId>maven-compiler-plugin</artifactId>
  			<version>3.7.0</version>
	        <configuration>
	          <source>1.8</source>
	          <target>1.8</target>
	          <encoding>UTF-8</encoding>
	          <forceJavacCompilerUse>true</forceJavacCompilerUse>
	        </configuration>
  		</plugin>
  		<plugin>
  			<!--
  			NOTE: We are "shading" the build artifact, the jar file. Shading, among other things, is a way
  			of creating an "Uber jar" or "Fat jar", which is a jar file wraps not only its own classes/resources,
  			but also all of its dependency jars. This way we can distribute the jar up to lambda as a single
  			artifact and not have to figure out how to make lambda supply all the dependency support. 
  			-->
  			<groupId>org.apache.maven.plugins</groupId>
  			<artifactId>maven-shade-plugin</artifactId>
  			<version>3.1.1</version>
	        <executions>
	          <execution>
	            <phase>package</phase>
	            <goals>
	              <goal>shade</goal>
	            </goals>
	          </execution>
	        </executions>
  		</plugin>
  	</plugins>
  </build>
  
  <dependencyManagement>
  	<dependencies>
		<!-- 
		NOTE: 
			We are importing a bom (Bill of Materials) file from amazon of a specific version, which
			is analagous to a "static include" where the imported pom file is injected here. Any dependencies that 
			are declared outside the dependency management block that have a match in the imported pom file
			are replaced with the match at the common version. This is a way to import multiple com.amazonaws
			dependendencies while ensuring that they all have cross-compatibility with respect to version.
		NOTE:
			Those dependencies below that do have an explicit version of their own declared are NOT managed
			dependencies. That is, they are not included in the pom imported by the bom.
		 -->
		<!-- https://mvnrepository.com/artifact/com.amazonaws/aws-java-sdk -->
		<dependency>
		    <groupId>com.amazonaws</groupId>
		    <artifactId>aws-java-sdk-bom</artifactId>
		    <version>1.11.379</version>
		    <type>pom</type>
		    <scope>import</scope>
		</dependency>
  	</dependencies>
  </dependencyManagement>

  <dependencies>

	  <!-- Non-managed dependencies -->
	  <dependency>
	  	<groupId>com.amazonaws</groupId>
	  	<artifactId>aws-lambda-java-events</artifactId>
	  	<version>2.2.2</version>
	  </dependency>
	  <dependency>
	  	<groupId>com.amazonaws</groupId>
	  	<artifactId>aws-lambda-java-core</artifactId>
	  	<version>1.2.0</version>
	  </dependency>
	  <dependency>
	  	<groupId>org.json</groupId>
	  	<artifactId>json</artifactId>
	  	<version>20180130</version>
	  </dependency>
	  <dependency>
	  	<groupId>junit</groupId>
	  	<artifactId>junit</artifactId>
	  	<version>4.12</version>
	  	<scope>test</scope>
	  </dependency>
	  <dependency>
	  	<groupId>org.mockito</groupId>
	  	<artifactId>mockito-all</artifactId>
	  	<version>1.10.19</version>
	  </dependency>
	  
	  
	  <!-- Managed dependencies from the bom -->
	  <dependency>
	  	<groupId>com.amazonaws</groupId>
	  	<artifactId>aws-java-sdk-s3</artifactId>
	  </dependency>
	  <dependency>
	  	<groupId>com.amazonaws</groupId>
	  	<artifactId>aws-java-sdk-lambda</artifactId>
	  </dependency>
  </dependencies>

</project>