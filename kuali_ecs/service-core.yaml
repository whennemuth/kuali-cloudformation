AWSTemplateFormatVersion: 2010-09-09

Description: This service contains one task that runs the kuali cor-main application

Parameters:

  GlobalTag:
    Type: String
    Description: >
      A common value that all resources in this template will have prefixed to
      their name and attached as a tag to establish a bundling through naming convention. If a nested stack,
      this will most likely be the name of the top-most stack.
    Default: kuali-ecs

  Landscape:
    Description: Specify a landscape this deployment is for
    Type: String

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: The id of the vpc this is a subnet of.

  ClusterId:
    Type: String
    Description: Please provide the ECS Cluster ID that this service should run on

  DesiredCount:
    Type: Number
    Description: How many instances of the cor-main task should we run across our cluster?
    AllowedValues: [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]
    ConstraintDescription: Cluster size is limited between 1 and 10 instances.
    Default: 2

  MaxCount:
    Type: Number
    Description: Maximum number of instances of the cor-main task we can run across our cluster
    AllowedValues: [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]
    ConstraintDescription: Cluster size is limited between 1 and 10 instances.
    Default: 4
    
  Listener:
    Description: The Application Load Balancer listener to register with
    Type: String

  ECSContainerInstanceAutoScalingRoleARN:
    Type: String
    Description: The ECS service auto scaling role ARN.

  CoreImage:
    Type: String
    Description: 'Example: 770203350335.dkr.ecr.us-east-1.amazonaws.com/kuali-core:2001.0040'

    
Resources:

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Description: Definition for the Task that runs the cor-main application for kuali-research
    Properties:
      Family: core
      NetworkMode: bridge
      RequiresCompatibilities:
      - EC2
      Volumes:
      - Name: Core-Config-Bind-Mount
        Host:
          SourcePath: /opt/kuali/s3/core
      ContainerDefinitions:
      - Name: kuali-core
        User: root
        Essential: true
        Image: !Ref CoreImage
        MemoryReservation: 200
        Environment:
        - Name: LANDSCAPE
          Value:
            !Ref Landscape
        PortMappings:
        - HostPort: 0
          ContainerPort: 3000
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              !Ref LogGroup
            awslogs-region:
              !Ref AWS::Region
            awslogs-stream-prefix:
              !Ref AWS::StackName
            # awslogs-datetime-format:
            #   '%Y-%m-%dT%H:%M:%S.%f'
            # # awslogs-create-group: false
        MountPoints:
        - SourceVolume: Core-Config-Bind-Mount
          ContainerPath: /var/core-config
          ReadOnly: false

  LogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    Properties:
      LogGroupName:
        !Sub ${GlobalTag}-${Landscape}-core
      RetentionInDays: 90

  Service:
    Type: AWS::ECS::Service
    DependsOn: ListenerRule
    Properties:
      Cluster:
        !Ref ClusterId
      Role:
        !Ref ServiceRole
      DesiredCount:
        !Ref DesiredCount
      TaskDefinition:
        !Ref TaskDefinition
      HealthCheckGracePeriodSeconds: 60
      # How this service traces back to its load balancer: Service > TargetGroup > ListenerRule > Listener > ALB
      LoadBalancers:
      - ContainerName: kuali-core
        ContainerPort: 3000
        TargetGroupArn:
          !Ref TargetGroup

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name:
        !Sub ${GlobalTag}-${Landscape}-TG-core
      VpcId: !Ref VpcId
      Port: 3000
      Protocol: HTTP
      Matcher:
        HttpCode: 200-299
      HealthCheckIntervalSeconds: 40
      HealthCheckPath: "/cor/main/#/apps/"
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 30
      HealthyThresholdCount: 2
      TargetGroupAttributes:
      - Key: stickiness.enabled
        Value: true
      - Key: stickiness.type
        Value: lb_cookie
      - Key: stickiness.lb_cookie.duration_seconds
        Value: 86400
      - Key: deregistration_delay.timeout_seconds
        Value: 60
      - Key: slow_start.duration_seconds
        Value: 0
      Tags:
      - Key: Name
        Value: 
          !Sub ${GlobalTag}-${Landscape}-TG-core

  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn:
        !Ref Listener
      Priority: 7
      Actions:
      - TargetGroupArn:
          !Ref TargetGroup
        Type: forward
      Conditions: 
      # Since core is last in priority, it handles all remaining paths, as it should.
      - { Field: path-pattern, Values: [ "/*" ] }

  ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
       !Sub ${GlobalTag}-${Landscape}-service-core
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ecs.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName:
         !Sub ${GlobalTag}-${Landscape}-host-policy-core
        PolicyDocument:
          Statement:
          - Effect: Allow
            Resource: "*"
            Action:
            - ec2:AuthorizeSecurityGroupIngress
            - ec2:Describe*
            - elasticloadbalancing:DeregisterInstancesFromLoadBalancer
            - elasticloadbalancing:Describe*
            - elasticloadbalancing:RegisterInstancesWithLoadBalancer
            - elasticloadbalancing:DeregisterTargets
            - elasticloadbalancing:DescribeTargetGroups
            - elasticloadbalancing:DescribeTargetHealth
            - elasticloadbalancing:RegisterTargets

  ServiceScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      ResourceId:
        !Join [ "/", [ service, !Ref ClusterId, !GetAtt Service.Name ] ]
      RoleARN:
        !Ref ECSContainerInstanceAutoScalingRoleARN
      MaxCapacity:
        !Ref MaxCount
      MinCapacity:
        !Ref DesiredCount
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  ServiceScaleOutPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName:
       !Sub ${GlobalTag}-${Landscape}-target-scale-in-policy-core
      PolicyType: StepScaling
      ScalingTargetId:
        !Ref ServiceScalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 3000
        MetricAggregationType: Average
        StepAdjustments:
        - MetricIntervalLowerBound: 0
          ScalingAdjustment: 1

  ServiceScaleInPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName:
       !Sub ${GlobalTag}-${Landscape}-target-scale-out-policy-core
      PolicyType: StepScaling
      ScalingTargetId:
        !Ref ServiceScalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 3000
        MetricAggregationType: Average
        StepAdjustments:
        - MetricIntervalUpperBound: 0
          ScalingAdjustment: -1

  CPUScaleOutAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName:
       !Sub ${GlobalTag}-${Landscape}-scale-out-alarm-core
      AlarmDescription: Alarm triggered when average cpu utilization across the service exceeds 85%
      Namespace: AWS/ECS
      MetricName: CPUUtilization
      Dimensions:
      - Name: ClusterName
        Value:
          !Ref ClusterId
      - Name: ServiceName
        Value:
          !GetAtt Service.Name
      Statistic: Average
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 3
      Period: 60
      Threshold: 85
      AlarmActions:
      - !Ref ServiceScaleOutPolicy

  CUPScaleInAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName:
       !Sub ${GlobalTag}-${Landscape}-scale-in-alarm-core
      AlarmDescription: Alarm triggered when average cpu utilization across the service falls below 85%
      Namespace: AWS/ECS
      MetricName: CPUUtilization
      Dimensions:
      - Name: ClusterName
        Value:
          !Ref ClusterId
      - Name: ServiceName
        Value:
          !GetAtt Service.Name
      Statistic: Average
      ComparisonOperator: LessThanThreshold
      EvaluationPeriods: 6
      Period: 60
      Threshold: 70
      AlarmActions:
      - !Ref ServiceScaleInPolicy

Outputs: {}
