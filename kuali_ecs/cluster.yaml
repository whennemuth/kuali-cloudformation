AWSTemplateFormatVersion: 2010-09-09


Description: >
  Deploys an ECS cluster to the specified VPC and subnets using an auto scaling group.


Parameters:

  GlobalTag:
    Type: String
    Description: >
      A common value that all resources in this template will have prefixed to
      their name and attached as a tag to establish a bundling through naming convention.
    Default: kuali-ecs

  TemplateBucketName:
    Type: String
    Description: The S3 bucket where our config files, keys, etc. are stored
    Default: kuali-conf

  PdfS3BucketName:
    Type: String
    Description: The name of the s3 bucket the pdf service is to use.
    Default: empty

  Landscape:
    Description: Specify a name for your landscape
    Type: String
    AllowedPattern: "[a-zA-Z\\d]{1,12}"
    ConstraintDescription: Up to 12 letters and/or numbers
  
  Baseline:
    Description: Specify one of a set of standard landscapes. The application will be backed by a database for that baseline landscape or a snapshot of it.
    Type: String
    AllowedValues: [ sb, ci, qa, stg, prod ]
    ConstraintDescription: Baseline landscapes are limited to the specified set.

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: The id of the vpc to deploy to.
    
  Service:
    Description: Service catalog name
    Type: String
    Default: research-administration

  Function:
    Description: The Function within the Service
    Type: String
    Default: kuali

  CampusSubnet1:
    Type: AWS::EC2::Subnet::Id
    Description: Id of the first private application subnet that admits access from bu vpns through transit gateway attachment.

  CampusSubnet2:
    Type: AWS::EC2::Subnet::Id
    Description: Id of the second private application subnet that admits access from bu vpns through transit gateway attachment.

  # https://docs.aws.amazon.com/AmazonECS/latest/developerguide/retrieve-ecs-optimized_AMI.html
  ECSAMI:
    Description: AMI ID
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id

  InstanceType:
    Type: String
    Description: What type of EC2 instance should be used for hosting?
    AllowedValues:
    - t2.large
    - t2.xlarge
    - t3.large
    - t3.xlarge
    - m4.large
    - m4.xlarge
    - m5.large
    - m5.xlarge
    - c5.large
    - c5.xlarge
    ConstraintDescription: Specified instance type is not within selection list.
    Default: m4.large

  EC2KeypairName:
    # Type: AWS::EC2::KeyPair::KeyName
    Type: String
    Description: The keypair for ssh use against the ec2 instance
    Default: empty
  
  NewrelicLicsenseKey:
    Type: String
    Description: Passed into the kc docker container to authenticate sending telemetry to new relic account.
    Default: empty
  
  EnableNewRelicAPM:
    Type: String
    Description: Is newrelic APM to be enabled for this landscape?
    Default: "false"
    AllowedValues:
    - "true"
    - "false"
    ConstraintDescription: Enter "true" or "false" only.

  EnableNewRelicInfrastructure:
    Type: String
    Description: Is newrelic infrastructure (with logging) to be enabled for this landscape?
    Default: "false"
    AllowedValues:
    - "true"
    - "false"
    ConstraintDescription: Enter "true" or "false" only.

  SecurityGroupId:
    Type: AWS::EC2::SecurityGroup::Id
    Description: The security group to use for ECS cluster hosts.

  DNSName:
    Type: String
    Description: The DNS name for the ALB or a hosted zone that forwards to it. The app is publicly reachable at this address.

  # A parameter that should be provided if the rds instance pre-exists (not created in this stack).
  RdsEndpoint:
    Type: String
    Description: The endpoint of the rds instance - either private ip, private dns, or provided by route53 CNAME record.
      Usable as HOST in jdbc connection string.
    Default: empty

  EntityId:
    Type: String
    Description: The id of the issuer of saml authentication requests to shibboleth. 
      Corresponds to the  entityID attribute of the EntityDescriptor element in the samlMeta.xml file.

  UsingRoute53:
    Type: String
    Description: Indicates if the DNSName is resolved with Route53 and exists in our hosted zone as an A record.
    Default: "false"
    AllowedValues:
    - "true"
    - "false"
    ConstraintDescription: Enter "true" or "false" only.

  UsingShibboleth:
    Type: String
    Description: True if using the BU shibboleth IDP for authentication, else dummy authentication (cor-main becomes its own IDP & SP).
    Default: "false"
    AllowedValues:
    - "true"
    - "false"
    ConstraintDescription: Enter "true" or "false" only.

  InstanceProfile:
    Type: String
    Description: If the instance profile already exists, provide its name here.
    Default: "create"
  
  InstanceRole:
    Type: String
    Description: If the role for the instance profile already exists, provide it here.
    Default: "create"

  MinClusterSize:
    Type: Number
    Description: How many EC2 instances are to be initially deployed as ECS hosts
      accross your cluster?
    # Don't allow instance count to go below 2, otherwise you lose high availability.
    AllowedValues: [ 2, 3, 4 ]
    ConstraintDescription: Minimum cluster size is limited between 2 and 4 instances.
    Default: 2

  MaxClusterSize:
    Type: Number
    Description: How many EC2 instances are to be initially deployed as ECS hosts
      accross your cluster?
    AllowedValues: [ 2, 3, 4, 5, 6 ]
    ConstraintDescription: Maximum cluster size is limited between 1 and 6 instances.
    Default: 3

  MongoEc2Ip:
    Type: String
    Description: The private ip address of the ec2 instance hosting a simple mongo database (for test environments)
    Default: empty

  MongoInstanceId:
    Type: String
    Description: The id of the ec2 instance hosting a simple mongo database (for test environments)
    Default: empty

    
Conditions: 
  CreateProfile: !Equals [ !Ref InstanceProfile, "create" ]
  CreateRole: !Equals [ !Ref InstanceRole, "create" ]
  UseMongoEc2Instance: !Not [!Equals [!Ref MongoEc2Ip, empty]]
  UseKeypair: !Not [!Equals [!Ref EC2KeypairName, empty]]
  IsProd: !Equals [!Ref Landscape, prod]
  IsTest: !Not [!And [!Equals [!Ref Landscape, prod], !Equals [!Ref Landscape, stg]]]
  UsingShibboleth: !Equals [!Ref UsingShibboleth, 'true']
  NewrelicLicsenseKeyProvided: !Equals [!Ref NewrelicLicsenseKey, empty]
  RdsEndpointProvided: !Not [!Equals [!Ref RdsEndpoint, empty]]


Resources:

  EC2Role:
    Type: AWS::IAM::Role
    Condition: CreateRole
    Description: >
      This IAM Role is attached to all of the EC2 hosts. Add other IAM
      policy statements here to allow access from your EC2 hosts to other AWS services.
      This role will be used by ALL containers running on the EC2 host.
    Properties:
      Path: "/"
      RoleName: !Sub ${GlobalTag}-${Landscape}-ec2-role
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      - arn:aws:iam::aws:policy/AWSCloudFormationReadOnlyAccess
      - arn:aws:iam::aws:policy/ElasticLoadBalancingReadOnly
      - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
      - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      - arn:aws:iam::aws:policy/CloudWatchFullAccess
      Policies:
      - PolicyName:
          !Sub "${GlobalTag}-${Landscape}-read-secrets"
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - secretsmanager:GetResourcePolicy
            - secretsmanager:GetSecretValue
            - secretsmanager:DescribeSecret
            - secretsmanager:ListSecretVersionIds
            Resource:
            - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:kuali/${Baseline}/*
      - PolicyName:
          !Sub "${GlobalTag}-${Landscape}-read-rds-metadata"
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - rds:Describe*
            - rds:ListTagsForResource
            - tag:GetResources
            - tag:GetTagKeys
            - tag:GetTagValues
            Resource: "*"
            # Used for resourcegroupstaggingapi get-resources function, so the following won't work:
            # - !Sub arn:aws:rds:${AWS::Region}:${AWS::AccountId}:db:kuali-oracle-${Landscape}
            # Condition:
            #   StringEquals:
            #     aws:ResourceTag/Name: !Sub kuali-oracle-${Landscape}
            #     rds:db-tag/Name: !Sub kuali-oracle-${Landscape}
      - !If 
        - UseMongoEc2Instance
        - PolicyName:
            !Sub "${GlobalTag}-${Landscape}-ssm-to-mongo"
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
              - ssm:SendCommand
              - ssm:CancelCommand
              Resource:
              - !Sub 
                - arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/${id}
                - id: !Ref MongoInstanceId
              - !Sub arn:aws:ssm:${AWS::Region}::document/AWS-RunShellScript
        - !Ref AWS::NoValue
      - PolicyName:
          !Sub ${GlobalTag}-${Landscape}-ecs-service-policy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Resource: "*"
            Action:
            - ecs:CreateCluster
            - ecs:DeregisterContainerInstance
            - ecs:DiscoverPollEndpoint
            - ecs:Poll
            - ecs:RegisterContainerInstance
            - ecs:StartTelemetrySession
            - ecs:Submit*
            - ecr:BatchCheckLayerAvailability
            - ecr:BatchGetImage
            - ecr:GetDownloadUrlForLayer
            - ecr:GetAuthorizationToken
            - ec2messages:AcknowledgeMessage
            - ec2messages:DeleteMessage
            - ec2messages:FailMessage
            - ec2messages:GetEndpoint
            - ec2messages:GetMessages
            - ec2messages:SendReply
            - cloudwatch:PutMetricData
            - cloudwatch:GetMetricStatistics
            - cloudwatch:ListMetrics
            - ec2:DescribeInstanceStatus
            - ec2:DescribeTags
            - ds:CreateComputer
            - ds:DescribeDirectories
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:DescribeLogGroups
            - logs:DescribeLogStreams
            - logs:PutLogEvents
            - s3:PutObject
            - s3:GetObject
            - s3:AbortMultipartUpload
            - s3:ListMultipartUploadParts
            - s3:ListBucket
            - s3:ListBucketMultipartUploads

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Condition: CreateProfile
    Properties:
      InstanceProfileName: !Sub ${GlobalTag}-${Landscape}-profile
      Path: "/"
      Roles:
      - !If [CreateRole, !Ref EC2Role, !Ref InstanceRole]

  ECSContainerInstanceAutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      RoleName:
        !Sub ${GlobalTag}-${Landscape}-ECS-Autoscale-Role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - application-autoscaling.amazonaws.com

      Policies:
      - PolicyName:
          !Sub ${GlobalTag}-${Landscape}-ecs-autoscale-service-policy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Resource: "*"
            Action:
            - application-autoscaling:*
            - cloudwatch:DescribeAlarms
            - cloudwatch:PutMetricAlarm
            - ecs:DescribeServices
            - ecs:UpdateService

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName:
        !Sub ${GlobalTag}-${Landscape}-cluster
      Tags:
      - Key: Name
        Value: !Sub ${GlobalTag}-${Landscape}-cluster
      - Key: Landscape
        Value: !Ref Landscape
      - Key: Service
        Value: !Ref Service
      - Key: Function
        Value: !Ref Function

  ECSContainerInstanceAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: ECSCluster
    Description: The auto scaling group where the number of ec2 instances are scaled up or down.
    Properties:
      VPCZoneIdentifier:
        - !Ref CampusSubnet1
        - !Ref CampusSubnet2
      LaunchConfigurationName:
        !Ref ECSLaunchConfiguration
      MinSize: 
        !Ref MinClusterSize
      # DesiredCapacity:
      #   Should default to MinSize, but is only meaningful if using spot instances.
      MaxSize: 
        !Ref MinClusterSize
      Tags:
      - Key: Landscape
        Value: !Ref Landscape
        PropagateAtLaunch: true
      - Key: Service
        Value: !Ref Service
        PropagateAtLaunch: true
      - Key: Function
        Value: !Ref Function
        PropagateAtLaunch: true
      - Key: Name
        Value: !Sub ${GlobalTag}-${Landscape}-auto-scaling-group
        PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 1
        WaitOnResourceSignals: true
        PauseTime: PT10M
        SuspendProcesses:
        - HealthCheck
        - ReplaceUnhealthy
        - AZRebalance
        - AlarmNotification
        - ScheduledActions

  ECSContainerInstanceScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName:
        !Ref ECSContainerInstanceAutoScalingGroup
      AdjustmentType: ChangeInCapacity
      Cooldown: 60
      # EstimatedInstanceWarmup: 30
      # MetricAggregationType: Average
      ScalingAdjustment: 1
      PolicyType: SimpleScaling

  ECSContainerInstanceScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName:
        !Ref ECSContainerInstanceAutoScalingGroup
      AdjustmentType: ChangeInCapacity
      Cooldown: 60
      # MetricAggregationType: Average
      ScalingAdjustment: -1

  ECSContainerInstanceScaleUpAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-up if Memory consumption >= 80% for 10 minutes
      MetricName: MemoryUtilization
      Namespace: AWS/EC2
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 10
      Period: 60
      Statistic: Average
      Threshold: 80

  EC2InstanceLogsGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub ${GlobalTag}-${Landscape}
      RetentionInDays: !If [ IsProd, 365, 30 ]

  ECSLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn: EC2InstanceLogsGroup
    Properties:
      LaunchConfigurationName:
        !Sub ${GlobalTag}-${Landscape}
      ImageId:
        !Ref ECSAMI
      InstanceType:
        !Ref InstanceType
      SecurityGroups:
      - !Ref SecurityGroupId
      KeyName:
        !If 
          - UseKeypair
          - !Ref EC2KeypairName
          - !Ref AWS::NoValue
      IamInstanceProfile:
        !If [CreateProfile, !Ref EC2InstanceProfile, !Ref InstanceProfile]
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 64
            DeleteOnTermination: true
            
      UserData: 
        "Fn::Base64": !Sub |
          #!/bin/bash

          # Install with yum:
          # 1) Ssm agent so that this ec2 instance can participate in ssm sessions.
          # 2) Mongo command line shell client (for those shelled in to this instance it provides quick way to test database connection)
          # 3) Perl and zip libraries needed to unpack and run custom metric monitoring for cloudwatch.
          # 4) Other utilities like git, sysstat etc.
          yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
          yum install -y https://repo.mongodb.org/yum/amazon/2/mongodb-org/4.4/x86_64/RPMS/mongodb-org-shell-4.4.1-1.amzn2.x86_64.rpm
          yum install -y perl-Switch perl-DateTime perl-Sys-Syslog perl-LWP-Protocol-https perl-Digest-SHA.x86_64
          yum install -y aws-cfn-bootstrap
          yum install -y git
          yum install -y zip unzip
          yum install -y sysstat
          yum install -y jq
          
          # Install required packages for scripts that will monitor and upload custom metrics to cloudwatch.
          curl https://aws-cloudwatch.s3.amazonaws.com/downloads/CloudWatchMonitoringScripts-1.2.2.zip \
            -o /var/lib/CloudWatchMonitoringScripts-1.2.2.zip
          unzip -d /var/lib/CloudWatchMonitoringScripts-1.2.2.zip
          rm -f /var/lib/CloudWatchMonitoringScripts-1.2.2.zip

          # Create a log directory for any output of ssm commands sent by a jenkins server
          [ ! -d /var/log/jenkins ] && mkdir -p /var/log/jenkins
          
          # Implement all the metadata in AWS::CloudFormation::Init
          /opt/aws/bin/cfn-init \
              -v \
            --configsets AllConfigs \
            --region ${AWS::Region} \
            --stack ${AWS::StackName} \
            --resource ECSLaunchConfiguration
          
          # Now that all initialization is done signal the result of the cfn-init attempt
          /opt/aws/bin/cfn-signal \
            -e $? \
            --region ${AWS::Region} \
            --stack ${AWS::StackName} \
            --resource ECSContainerInstanceAutoScalingGroup

          # The systemd units for both ecs and docker have a directive to wait for cloud-init to finish before starting. 
          # The cloud-init process isn't considered finished until your userdata has finished running. 
          # So, triggering this next configuration must be done last and as a background process (using &) because it
          # needs to talk to one of the docker containers, and these won't start until the same running configuration
          # stops blocking the ecs agent because it is considered part of cloud-init. A process started in the background
          # should be considered outside of the cloud-init process.        
          /opt/aws/bin/cfn-init \
            -v \
            --configsets InitializeCoreMongodbContent \
            --region ${AWS::Region} \
            --stack ${AWS::StackName} \
            --resource ECSLaunchConfiguration &

    Metadata:
      AWS::CloudFormation::Authentication:
        # This authentication will make possible replacing inline file content with paths to files in s3
        # https://aws.amazon.com/blogs/devops/authenticated-file-downloads-with-cloudformation/
        S3AccessCreds:
          type: S3
          roleName:
            !If [CreateProfile, !Ref EC2Role, !Ref InstanceRole]
          buckets:
          - !Ref TemplateBucketName

      AWS::CloudFormation::Init:
        configSets:
          AllConfigs:
          - getFiles
          - ConfigSet: RunCommands
          GetFiles:
          - getFiles
          RunCommands:
          - ConfigSet: GetConfigsFromS3
          - ConfigSet: ProcessEnvFiles
          - ConfigSet: ProcessKcConfigFile
          - ConfigSet: StartProcesses
          StartProcesses:
          - 04_add_instance_to_cluster
          # - 05_initialize_core_mongodb_content
          # - 06_start_cron_for_custom_cloudwatch_metrics
          GetConfigsFromS3:
          - 01_get_configs_from_s3
          ProcessEnvFiles:
          - 02_process_env_files
          ProcessKcConfigFile:
          - 03_process_kc-config_file
          AddInstanceToCluster:
          - 04_add_instance_to_cluster
          InitializeCoreMongodbContent:
          - 05_initialize_core_mongodb_content
          StartCronForCustomCloudwatchMetrics:
          - 06_start_cron_for_custom_cloudwatch_metrics

        getFiles:
          packages:
            yum:
              awslogs: []
          files:
            /opt/kuali/README.txt:
              content: !Sub |
                This directory contains the "environment" for each app to run
                in a docker container that it needs.
                This includes env-file, configuration files, keys, etc.
                These are specific to the ${Landscape} landscape.
              mode: "000775"
              owner: root
              group: root
            /opt/kuali/scripts/crontab:
              content: |
                SHELL=/bin/bash
                PATH=/sbin:/bin:/usr/sbin:/usr/bin
                MAILTO=root
                HOME=/
                
                # Send custom metrics to cloudwatch once every minute
                # NOTE: The cronjob will start, but it does nothing until you uncomment the 1 or more of the 3 lines below.
                # This is a test ec2 instance, so defaulting to running these scripts manually while shelled in."
                # Check the system log for any errors this script encounters"
                # * * * * * /opt/kuali/scripts/send-custom-cloudwatch-metrics.sh "custom1"
                # * * * * * /opt/kuali/scripts/send-custom-cloudwatch-metrics.sh "custom2" "ec2"
                # * * * * * /opt/kuali/scripts/send-custom-cloudwatch-metrics.sh "psuedo"  "ec2" "${TemplateBucketName}" "${AWS::Region}"
              mode: "000644"
              owner: root
              group: root
            /etc/profile.d/shortcuts.sh:
              content: !Sub |
                #!/bin/bash
                # These are convenience functions for shelling in and testing/rerunning cfn-init configurations

                # Run one of the cfn-init configs, placing a bit of space in the log file and then tailing the log file to see output as it happens.
                runconfig() {
                  echo "\n\n\n\n" >> /var/log/cfn-init.log
                  /opt/aws/bin/cfn-init \
                  -v \
                  --configsets ${!1} \
                  --region ${AWS::Region} \
                  --stack ${AWS::StackName} \
                  --resource ECSLaunchConfiguration &
                  tail -f /var/log/cfn-init.log -n 200
                }

                runAll(){ runconfig 'AllConfigs'; }
                getFiles(){ runconfig 'GetFiles'; }
                getConfigs() { runconfig 'GetConfigsFromS3'; }
                createEnvFile() { runconfig 'ProcessEnvFiles'; }
                processKcConfig() { runconfig 'ProcessKcConfigFile'; }
                startProcesses() { runconfig 'StartProcesses'; }
                initMongo() { runconfig 'InitializeCoreMongodbContent'; }
                addToCluster() { runconfig 'AddInstanceToCluster'; }

              mode: "000400"
              owner: root
              group: root              
            /etc/cfn/cfn-hup.conf:
              mode: "000400"
              owner: root
              group: root
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region} 
                # Change interval from default 15 minutes to 5
                interval=5
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.ECSLaunchConfiguration.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSLaunchConfiguration --configsets AllConfigs 
            /etc/awslogs/awscli.conf:
              content: !Sub |
                [plugins]
                cwlogs = cwlogs
                [default]
                region = ${AWS::Region}
            /etc/awslogs/awslogs.conf:
              content: !Sub |
                [general]
                state_file = /var/lib/awslogs/agent-state
                
                [/var/log/dmesg]
                file = /var/log/dmesg
                log_group_name = ${GlobalTag}-${Landscape}
                log_stream_name = {instance_id}/var/log/dmesg
                
                [/var/log/messages]
                file = /var/log/messages
                log_group_name = ${GlobalTag}-${Landscape}
                log_stream_name = {instance_id}/var/log/messages
                datetime_format = %b %d %H:%M:%S
                
                [/var/log/docker]
                file = /var/log/docker
                log_group_name = ${GlobalTag}-${Landscape}
                log_stream_name = {instance_id}/var/log/docker
                datetime_format = %Y-%m-%dT%H:%M:%S.%f
                
                [/var/log/localhost]
                file = /opt/kuali/kc_tomcat_logs/localhost.log
                log_group_name = ${GlobalTag}-${Landscape}
                log_stream_name = {instance_id}/var/log/localhost
                datetime_format = %Y-%m-%dT%H:%M:%S.%f
                
                [/var/log/catalina]
                file = /opt/kuali/kc_tomcat_logs/catalina.log
                log_group_name = ${GlobalTag}-${Landscape}
                log_stream_name = {instance_id}/var/log/catalina
                datetime_format = %Y-%m-%dT%H:%M:%S.%f
                
                [/var/log/ecs/ecs-init.log]
                file = /var/log/ecs/ecs-init.log
                log_group_name = ${GlobalTag}-${Landscape}
                log_stream_name = {instance_id}/var/log/ecs/ecs-init.log
                datetime_format = %Y-%m-%dT%H:%M:%SZ
                
                [/var/log/ecs/ecs-agent.log]
                file = /var/log/ecs/ecs-agent.log
                log_group_name = ${GlobalTag}-${Landscape}
                log_stream_name = {instance_id}/var/log/ecs/ecs-agent.log
                datetime_format = %Y-%m-%dT%H:%M:%SZ
                
                [/var/log/ecs/audit.log]
                file = /var/log/ecs/audit.log
                log_group_name = ${GlobalTag}-${Landscape}
                log_stream_name = {instance_id}/var/log/ecs/audit.log
                datetime_format = %Y-%m-%dT%H:%M:%SZ
                
                [/var/log/cfn-init]
                file = /var/log/cfn-init.log
                log_group_name = ${GlobalTag}-${Landscape}
                log_stream_name = {instance_id}/var/log/cfn-init
                datetime_format = %Y-%m-%d %H:%M:%S,
                # multi_line_start_pattern = \d{4}\-\d{2}\-\d{2} \d{2}:\d{2}:\d{2},\d{3}
            /opt/kuali/scripts/process-configs.sh:
              source: !Sub http://${TemplateBucketName}.s3.amazonaws.com/cloudformation/scripts/ec2/process-configs.sh
              mode: "000775"
              owner: root
              group: root
            /opt/kuali/scripts/initialize-mongo-database.sh:
              source: !Sub http://${TemplateBucketName}.s3.amazonaws.com/cloudformation/scripts/ec2/initialize-mongo-database.sh
              mode: "000775"
              owner: root
              group: root
            /opt/kuali/scripts/send-custom-cloudwatch-metrics.sh:
              source: !Sub http://${TemplateBucketName}.s3.amazonaws.com/cloudformation/scripts/ec2/cloudwatch-metrics.sh
              mode: "000744"
              owner: root
              group: root
        01_get_configs_from_s3:
          commands:
            get_configs_from_s3:
              cwd: /opt/kuali/scripts
              env:
                TASK: get_configs_from_s3             
                LANDSCAPE: !Ref Landscape
                BASELINE: !Ref Baseline
                TEMPLATE_BUCKET_NAME: !Ref TemplateBucketName
                AWS_DEFAULT_REGION: !Ref AWS::Region
              command: bash process-configs.sh
        02_process_env_files:
          commands:
            process_env_files:
              cwd: /opt/kuali/scripts
              env:
                TASK: process_env_files
                LANDSCAPE: !Ref Landscape
                CREATE_EXPORT_FILE: 'true'
                ENTITY_ID: !Ref EntityId
                DNS_NAME: !Ref DNSName
                USING_ROUTE53: !Ref UsingRoute53
                ENV_FILE_FROM_S3_CORE: /opt/kuali/s3/core/environment.variables.s3.env
                ENV_FILE_FROM_S3_PORTAL: /opt/kuali/s3/portal/environment.variables.s3.env
                ENV_FILE_FROM_S3_PDF: /opt/kuali/s3/pdf/environment.variables.s3.env
                # ENV_FILE_EXTENSION: 'true'
                MONGO_EC2_IP: !If [ UseMongoEc2Instance, !Ref MongoEc2Ip, '' ]
                PDF_BUCKET_NAME: !Ref PdfS3BucketName
                AWS_DEFAULT_REGION: !Ref AWS::Region
                SHIB_HOST: 
                  !If
                    - UsingShibboleth
                    - !If [ IsTest, 'shib-test.bu.edu', 'shib.bu.edu' ]
                    - !Ref AWS::NoValue
              command: bash process-configs.sh
            create_kc_env_file:
              cwd: /opt/kuali/scripts
              env:
                TASK: create_kc_env_file
                CREATE_EXPORT_FILE: 'true'
                TARGET_FILE: /opt/kuali/s3/kc/environment.variables.s3.env
                TARGET_S3_FILE: !Sub s3://${TemplateBucketName}/${Baseline}/kc/temp/${Landscape}.environment.variables.s3.env
                LANDSCAPE: !Ref Landscape
                BASELINE: !Ref Baseline
                NEW_RELIC_ENVIRONMENT: !Ref Landscape
                NEW_RELIC_LICENSE_KEY: !If [ NewrelicLicsenseKeyProvided, !Ref NewrelicLicsenseKey, !Ref AWS::NoValue ]
                NEW_RELIC_AGENT_ENABLED: !If [ NewrelicLicsenseKeyProvided, !Ref EnableNewRelicAPM, 'false' ] 
                NEW_RELIC_INFRASTRUCTURE_ENABLED: !If [ NewrelicLicsenseKeyProvided, !Ref EnableNewRelicInfrastructure, 'false' ]
                JAVA_ENV: !Ref Landscape
                DNS_NAME: !Ref DNSName
                RDS_HOSTNAME: !If [ RdsEndpointProvided, !Ref RdsEndpoint, !Ref AWS::NoValue ]
              command: bash process-configs.sh
        03_process_kc-config_file:
          commands:
            process_kc-config_file:
              cwd: /opt/kuali/scripts
              env:
                TASK: process_kc-config_file
                DNS_NAME: !Ref DNSName
                RDS_HOSTNAME: !If [ RdsEndpointProvided, !Ref RdsEndpoint, !Ref AWS::NoValue ]
                LANDSCAPE: !Ref Landscape
                BASELINE: !Ref Baseline
                AWS_DEFAULT_REGION: !Ref AWS::Region
              command: bash process-configs.sh
        04_add_instance_to_cluster:
          commands:
            add_instance_to_cluster:
              command:
                !Sub echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                - /etc/cfn/cfn-hup.conf
                - /etc/cfn/hooks.d/cfn-auto-reloader.conf
              # awslogs:
              # NOTE: If you are using Amazon Linux 2, the awslogs service is now called "awslogsd"
              awslogsd:
                enabled: true
                ensureRunning: true
                files:
                - /etc/awslogs/awslogs.conf
                - /etc/awslogs/awscli.conf
        05_initialize_core_mongodb_content:
          commands:
            initialize_core_mongodb_content:
              cwd: /opt/kuali/scripts
              env:
                TASK: update-core
                DNS_NAME: !Ref DNSName
                ENTITY_ID: !Ref EntityId
                USING_ROUTE53: !Ref UsingRoute53
                DEBUG: 'false'
                COLLECTIONS: 'incommons institutions users'
                LANDSCAPE: !Ref Landscape
                AWS_DEFAULT_REGION: !Ref AWS::Region
                SHIB_HOST: 
                  !If
                    - UsingShibboleth
                    - !If [ IsTest, 'shib-test.bu.edu', 'shib.bu.edu' ]
                    - !Ref AWS::NoValue
                MONGO_INSTANCE_ID: !Ref MongoInstanceId
                MONGO_URI:
                  !If
                  - UseMongoEc2Instance
                  - !Sub 
                    - ${Url}:${Port}/${DbName}
                    - Url: !Ref MongoEc2Ip
                      Port: 27017
                      DbName: core-development
                  - ''
                # An empty MONGO_URI parameter will trigger a search for mongo parameters in this properties file:
                ENV_FILE_FROM_S3_CORE: /opt/kuali/s3/core/environment.variables.s3.env
                # Import users to cor-main from an atlas mongodb source identified by baseline (BASELINE env variable must be set).
                USER_IMPORT_MONGODB:  !If [ UseMongoEc2Instance, 'true', 'false' ]
                # Otherwise import users from a dump file in an s3 subdirectory identified by baseline (BASELINE env variable must be set).
                USER_IMPORT_FILE: 
                  !If
                    - UseMongoEc2Instance
                    - !Sub s3://${TemplateBucketName}/${Baseline}/core/userdump.json
                    - !Ref AWS::NoValue
              command: bash initialize-mongo-database.sh
        06_start_cron_for_custom_cloudwatch_metrics:
          commands:
            start_cron_for_custom_cloudwatch_metrics:
              command: crontab -u root /opt/kuali/scripts/crontab
              env:
                LANDSCAPE: !Ref Landscape
                AWS_DEFAULT_REGION: !Ref AWS::Region

Outputs:

  Cluster:
    Description: A reference to the ECS cluster
    Value:
      !Ref ECSCluster

  ECSContainerInstanceAutoScalingRoleARN:
    Description: A reference to ECS service auto scaling role
    Value:
      !GetAtt ECSContainerInstanceAutoScalingRole.Arn
      
  ECSContainerInstanceAutoScalingGroupName:
    Description: A reference to ECS AutoScaling Group Name
    Value:
      !Ref ECSContainerInstanceAutoScalingGroup
