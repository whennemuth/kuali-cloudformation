AWSTemplateFormatVersion: 2010-09-09


Description: >
  Deploys an ECS cluster to the specified VPC and subnets using an auto scaling group.


Parameters:

  GlobalTag:
    Type: String
    Description: >
      A common value that all resources in this template will have prefixed to
      their name and attached as a tag to establish a bundling through naming convention.
    Default: kuali-ecs

  BucketName:
    Type: String
    Description: The S3 bucket where our config files, keys, etc. are stored
    Default: kuali-conf

  PdfS3BucketName:
    Type: String
    Description: The name of the s3 bucket the pdf service is to use.
    Default: empty

  Landscape:
    Description: Specify which landscape to build into the VPC
    Type: String
    AllowedValues:
    - sb
    - ci
    - qa
    - stg
    - prod
    ConstraintDescription: >
      This parameter is restricted to the following values: sb, ci, qa, stg, prod
    Default: sb
    
  Service:
    Description: Service catalog name
    Type: String
    Default: research-administration

  Function:
    Description: The Function within the Service
    Type: String
    Default: kuali

  CampusSubnet1:
    Type: AWS::EC2::Subnet::Id
    Description: Id of the first private application subnet that admits access from bu vpns through transit gateway attachment.

  CampusSubnet2:
    Type: AWS::EC2::Subnet::Id
    Description: Id of the second private application subnet that admits access from bu vpns through transit gateway attachment.

  # https://docs.aws.amazon.com/AmazonECS/latest/developerguide/retrieve-ecs-optimized_AMI.html
  ECSAMI:
    Description: AMI ID
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id

  InstanceType:
    Type: String
    Description: What type of EC2 instance should be used for hosting?
    AllowedValues:
    - t2.large
    - t2.xlarge
    - t3.large
    - t3.xlarge
    - m4.large
    - m4.xlarge
    - m5.large
    - m5.xlarge
    - c5.large
    - c5.xlarge
    ConstraintDescription: Specified instance type is not within selection list.
    Default: m4.large

  # NOTE: The type below triggers a check by aws for existence of the keypair as part of a validation check.
  # However, this makes the parameter required, even for stack updates. Use "String" as type to forego the
  # validation check and allow the parameter to be optional during updates.
  EC2KeypairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: The keypair for ssh use against the ec2 instance
  
  EnableNewRelicAPM:
    Type: String
    Description: Is newrelic APM to be enabled for this landscape?
    Default: "false"
    AllowedValues:
    - "true"
    - "false"
    ConstraintDescription: Enter "true" or "false" only.

  EnableNewRelicInfrastructure:
    Type: String
    Description: Is newrelic infrastructure (with logging) to be enabled for this landscape?
    Default: "false"
    AllowedValues:
    - "true"
    - "false"
    ConstraintDescription: Enter "true" or "false" only.

  SecurityGroupId:
    Type: AWS::EC2::SecurityGroup::Id
    Description: The security group to use for ECS cluster hosts.

  DNSName:
    Type: String
    Description: The DNS name for the ALB. The app is publicly reachable at this address.

  InstanceProfile:
    Type: String
    Description: If the instance profile already exists, provide its name here.
    Default: "create"
  
  InstanceRole:
    Type: String
    Description: If the role for the instance profile already exists, provide it here.
    Default: "create"

  MinClusterSize:
    Type: Number
    Description: How many EC2 instances are to be initially deployed as ECS hosts
      accross your cluster?
    # Don't allow instance count to go below 2, otherwise you lose high availability.
    AllowedValues: [ 2, 3, 4 ]
    ConstraintDescription: Minimum cluster size is limited between 2 and 4 instances.
    Default: 2

  MaxClusterSize:
    Type: Number
    Description: How many EC2 instances are to be initially deployed as ECS hosts
      accross your cluster?
    AllowedValues: [ 2, 3, 4, 5, 6 ]
    ConstraintDescription: Maximum cluster size is limited between 1 and 6 instances.
    Default: 3

    
Conditions: 
  CreateProfile: !Equals [ !Ref InstanceProfile, "create" ]
  CreateRole: !Equals [ !Ref InstanceRole, "create" ]
  CreateLogsGroup: !Equals [ !Ref EC2InstanceLogsGroupArn, "create" ]


Resources:

  EC2Role:
    Type: AWS::IAM::Role
    Condition: CreateRole
    Description: >
      This IAM Role is attached to all of the EC2 hosts. Add other IAM
      policy statements here to allow access from your EC2 hosts to other AWS services.
      This role will be used by ALL containers running on the EC2 host.
    Properties:
      Path: "/"
      RoleName: !Sub ${GlobalTag}-${Landscape}-ec2-role
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      - arn:aws:iam::aws:policy/AWSCloudFormationReadOnlyAccess
      - arn:aws:iam::aws:policy/ElasticLoadBalancingReadOnly
      - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
      - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      - arn:aws:iam::aws:policy/CloudWatchFullAccess
      Policies:
      - PolicyName:
          !Sub "${GlobalTag}-${Landscape}-read-secrets"
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - secretsmanager:GetResourcePolicy
            - secretsmanager:GetSecretValue
            - secretsmanager:DescribeSecret
            - secretsmanager:ListSecretVersionIds
            Resource:
            - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:kuali/${Landscape}/*
      - PolicyName:
          !Sub "${GlobalTag}-${Landscape}-read-rds-metadata"
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - rds:Describe*
            - rds:ListTagsForResource
            - tag:GetResources
            - tag:GetTagKeys
            - tag:GetTagValues
            Resource: "*"
            # Used for resourcegroupstaggingapi get-resources function, so the following won't work:
            # - !Sub arn:aws:rds:${AWS::Region}:${AWS::AccountId}:db:kuali-oracle-${Landscape}
            # Condition:
            #   StringEquals:
            #     aws:ResourceTag/Name: !Sub kuali-oracle-${Landscape}
            #     rds:db-tag/Name: !Sub kuali-oracle-${Landscape}
      - PolicyName:
          !Sub ${GlobalTag}-${Landscape}-ecs-service-policy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Resource: "*"
            Action:
            - ecs:CreateCluster
            - ecs:DeregisterContainerInstance
            - ecs:DiscoverPollEndpoint
            - ecs:Poll
            - ecs:RegisterContainerInstance
            - ecs:StartTelemetrySession
            - ecs:Submit*
            - ecr:BatchCheckLayerAvailability
            - ecr:BatchGetImage
            - ecr:GetDownloadUrlForLayer
            - ecr:GetAuthorizationToken
            - ec2messages:AcknowledgeMessage
            - ec2messages:DeleteMessage
            - ec2messages:FailMessage
            - ec2messages:GetEndpoint
            - ec2messages:GetMessages
            - ec2messages:SendReply
            - cloudwatch:PutMetricData
            - cloudwatch:GetMetricStatistics
            - cloudwatch:ListMetrics
            - ec2:DescribeInstanceStatus
            - ec2:DescribeTags
            - ds:CreateComputer
            - ds:DescribeDirectories
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:DescribeLogGroups
            - logs:DescribeLogStreams
            - logs:PutLogEvents
            - s3:PutObject
            - s3:GetObject
            - s3:AbortMultipartUpload
            - s3:ListMultipartUploadParts
            - s3:ListBucket
            - s3:ListBucketMultipartUploads

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Condition: CreateProfile
    Properties:
      InstanceProfileName: !Sub ${GlobalTag}-${Landscape}-profile
      Path: "/"
      Roles:
      - !If [CreateRole, !Ref EC2Role, !Ref InstanceRole]

  ECSContainerInstanceAutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      RoleName:
        !Sub ${GlobalTag}-${Landscape}-ECS-Autoscale-Role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - application-autoscaling.amazonaws.com

      Policies:
      - PolicyName:
          !Sub ${GlobalTag}-${Landscape}-ecs-autoscale-service-policy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Resource: "*"
            Action:
            - application-autoscaling:*
            - cloudwatch:DescribeAlarms
            - cloudwatch:PutMetricAlarm
            - ecs:DescribeServices
            - ecs:UpdateService

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName:
        !Sub ${GlobalTag}-${Landscape}-cluster
      Tags:
      - Key: Name
        Value: !Sub ${GlobalTag}-${Landscape}-cluster

  ECSContainerInstanceAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: ECSCluster
    Description: The auto scaling group where the number of ec2 instances are scaled up or down.
    Properties:
      VPCZoneIdentifier:
        - !Ref CampusSubnet1
        - !Ref CampusSubnet2
      LaunchConfigurationName:
        !Ref ECSLaunchConfiguration
      MinSize: 
        !Ref MinClusterSize
      # DesiredCapacity:
      #   Should default to MinSize, but is only meaningful if using spot instances.
      MaxSize: 
        !Ref MinClusterSize
      Tags:
      - Key: Landscape
        Value: !Ref Landscape
      - Key: Service
        Value: !Ref Service
      - Key: Function
        Value: !Ref Function
      - Key: Name
        Value:
          !Sub ${GlobalTag}-${Landscape}-auto-scaling-group
        PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT5M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 1
        WaitOnResourceSignals: true
        PauseTime: PT10M
        SuspendProcesses:
        - HealthCheck
        - ReplaceUnhealthy
        - AZRebalance
        - AlarmNotification
        - ScheduledActions

  ECSContainerInstanceScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName:
        !Ref ECSContainerInstanceAutoScalingGroup
      AdjustmentType: ChangeInCapacity
      Cooldown: 60
      # EstimatedInstanceWarmup: 30
      # MetricAggregationType: Average
      ScalingAdjustment: 1
      PolicyType: SimpleScaling

  ECSContainerInstanceScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName:
        !Ref ECSContainerInstanceAutoScalingGroup
      AdjustmentType: ChangeInCapacity
      Cooldown: 60
      # MetricAggregationType: Average
      ScalingAdjustment: -1

  ECSContainerInstanceScaleUpAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-up if Memory consumption >= 80% for 10 minutes
      MetricName: MemoryUtilization
      Namespace: AWS/EC2
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 10
      Period: 60
      Statistic: Average
      Threshold: 80

  ECSLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId:
        !Ref ECSAMI
      InstanceType:
        !Ref InstanceType
      SecurityGroups:
      - !Ref SecurityGroupId
      KeyName: !Ref EC2KeypairName
      IamInstanceProfile:
        !If [CreateProfile, !Ref EC2InstanceProfile, !Ref InstanceProfile]
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 64
            DeleteOnTermination: true
            
      UserData: 
        "Fn::Base64": !Sub |
          #!/bin/bash
          yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
          yum install -y aws-cfn-bootstrap
          yum install -y git
          # Add perl and zip libraries needed to unpack and run custom metric monitoring for cloudwatch.
          yum install -y perl-Switch perl-DateTime perl-Sys-Syslog perl-LWP-Protocol-https perl-Digest-SHA.x86_64
          yum install -y zip unzip
          yum install -y sysstat
          yum install -y jq
          
          # Install required packages for scripts that will monitor and upload custom metrics to cloudwatch.
          curl https://aws-cloudwatch.s3.amazonaws.com/downloads/CloudWatchMonitoringScripts-1.2.2.zip \
            -o /var/lib/ && CloudWatchMonitoringScripts-1.2.2.zip
          unzip -d /var/lib/ CloudWatchMonitoringScripts-1.2.2.zip
          rm -f /var/lib/CloudWatchMonitoringScripts-1.2.2.zip
          
          # Implement all the metadata in AWS::CloudFormation::Init
          /opt/aws/bin/cfn-init \
              -v \
              --configsets AllConfigs \
              --region ${AWS::Region} \
              --stack ${AWS::StackName} \
              --resource ECSLaunchConfiguration
          
          # Now that all initialization is done signal the result of the cfn-init attempt
          /opt/aws/bin/cfn-signal \
              -e $? \
              --region ${AWS::Region} \
              --stack ${AWS::StackName} \
              --resource ECSContainerInstanceAutoScalingGroup

    Metadata:
      AWS::CloudFormation::Authentication:
        # This authentication will make possible replacing inline file content with paths to files in s3
        # https://aws.amazon.com/blogs/devops/authenticated-file-downloads-with-cloudformation/
        S3AccessCreds:
          type: S3
          roleName:
            !If [CreateProfile, !Ref EC2Role, !Ref InstanceRole]
          buckets:
          - !Ref BucketName

      AWS::CloudFormation::Init:
        configSets:
          AllConfigs:
          - getFiles
          - ConfigSet: RunCommands
          GetFiles:
          - getFiles
          RunCommands:
          - ConfigSet: cmd01
          - ConfigSet: cmd02
          - ConfigSet: cmd03
          - ConfigSet: cmd04
          # - ConfigSet: cmd05
          cmd01:
          - 01_get_configs_from_s3
          cmd02:
          - 02_create_env_exports_file
          cmd03:
          - 03_process_kc-config_file
          cmd04:
          - 03_add_instance_to_cluster
          cmd05:
          - 04_start_cron_for_custom_cloudwatch_metrics
        getFiles:
          packages:
            yum:
              awslogs: []
          files:
            /opt/kuali/README.txt:
              content: !Sub |
                This directory contains the "environment" for each app to run
                in a docker container that it needs.
                This includes env-file, configuration files, keys, etc.
                These are specific to the ${Landscape} landscape.
              mode: "000775"
              owner: root
              group: root
            /opt/kuali/scripts/crontab:
              content: |
                SHELL=/bin/bash
                PATH=/sbin:/bin:/usr/sbin:/usr/bin
                MAILTO=root
                HOME=/
                
                # Send custom metrics to cloudwatch once every minute
                # NOTE: The cronjob will start, but it does nothing until you uncomment the 1 or more of the 3 lines below.
                # This is a test ec2 instance, so defaulting to running these scripts manually while shelled in."
                # Check the system log for any errors this script encounters"
                # * * * * * /opt/kuali/scripts/send-custom-cloudwatch-metrics.sh "custom1"
                # * * * * * /opt/kuali/scripts/send-custom-cloudwatch-metrics.sh "custom2" "ec2"
                # * * * * * /opt/kuali/scripts/send-custom-cloudwatch-metrics.sh "psuedo"  "ec2" "${BucketName}" "${AWS::Region}"
              mode: "000644"
              owner: root
              group: root
            /etc/cfn/cfn-hup.conf:
              mode: "000400"
              owner: root
              group: root
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region} 
                # Change interval from default 15 minutes to 5
                interval=5
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.ECSLaunchConfiguration.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSLaunchConfiguration --configsets AllConfigs 
            /etc/awslogs/awscli.conf:
              content: !Sub |
                [plugins]
                cwlogs = cwlogs
                [default]
                region = ${AWS::Region}
            /etc/awslogs/awslogs.conf:
              content: !Sub |
                [general]
                state_file = /var/lib/awslogs/agent-state
                
                [/var/log/dmesg]
                file = /var/log/dmesg
                log_group_name = ${GlobalTag}-${Landscape}
                log_stream_name = /var/log/dmesg
                
                [/var/log/messages]
                file = /var/log/messages
                log_group_name = ${GlobalTag}-${Landscape}
                log_stream_name = /var/log/messages
                datetime_format = %b %d %H:%M:%S
                
                [/var/log/docker]
                file = /var/log/docker
                log_group_name = ${GlobalTag}-${Landscape}
                log_stream_name = /var/log/docker
                datetime_format = %Y-%m-%dT%H:%M:%S.%f
                
                [/var/log/ecs/ecs-init.log]
                file = /var/log/ecs/ecs-init.log
                log_group_name = ${GlobalTag}-${Landscape}
                log_stream_name = /var/log/ecs/ecs-init.log
                datetime_format = %Y-%m-%dT%H:%M:%SZ
                
                [/var/log/ecs/ecs-agent.log]
                file = /var/log/ecs/ecs-agent.log
                log_group_name = ${GlobalTag}-${Landscape}
                log_stream_name = /var/log/ecs/ecs-agent.log
                datetime_format = %Y-%m-%dT%H:%M:%SZ
                
                [/var/log/ecs/audit.log]
                file = /var/log/ecs/audit.log
                log_group_name = ${GlobalTag}-${Landscape}
                log_stream_name = /var/log/ecs/audit.log
                datetime_format = %Y-%m-%dT%H:%M:%SZ
            /opt/kuali/scripts/process-configs.sh:
              source: !Sub http://${BucketName}.s3.amazonaws.com/cloudformation/scripts/ec2/process-configs.sh
              content: !Sub |
              mode: "000775"
              owner: root
              group: root
            /opt/kuali/scripts/send-custom-cloudwatch-metrics.sh:
              source: !Sub http://${BucketName}.s3.amazonaws.com/cloudformation/scripts/ec2/cloudwatch-metrics.sh
              mode: "000744"
              owner: root
              group: root
        01_get_configs_from_s3:
          commands:
            cmd01:
              cwd: /opt/kuali/scripts
              env:
                TASK: get_configs_from_s3             
                LANDSCAPE: !Sub "${Landscape}"
                BUCKET_NAME: !Sub "${BucketName}"
                AWS_DEFAULT_REGION: !Sub "${AWS::Region}"
              command: bash process-configs.sh
        02_create_env_exports_file:
          commands:
            cmd01:
              cwd: /opt/kuali/scripts
              env:
                TASK: create_env_exports_file
                DNS_NAME: !Sub "${DNSName}"
                ENV_FILE_FROM_S3_CORE: /opt/kuali/s3/core/environment.variables.s3
                ENV_FILE_FROM_S3_PORTAL: /opt/kuali/s3/portal/environment.variables.s3
                ENV_FILE_FROM_S3_PDF: /opt/kuali/s3/pdf/environment.variables.s3
                PDF_BUCKET_NAME: !Sub "${PdfS3BucketName}"
                AWS_DEFAULT_REGION: !Sub "${AWS::Region}"
              command: bash process.env.file.sh
        03_process_kc-config_file:
          commands:
            cmd01:
              cwd: /opt/kuali/scripts
              env:
                TASK: process_kc-config_file
                DNS_NAME: local
                LANDSCAPE: !Sub "${Landscape}"
                AWS_DEFAULT_REGION: !Sub "${AWS::Region}"
              command: bash process-configs.sh
        04_add_instance_to_cluster:
          commands:
            cmd01:
              command:
                !Sub echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                - /etc/cfn/cfn-hup.conf
                - /etc/cfn/hooks.d/cfn-auto-reloader.conf
              # awslogs:
              # NOTE: If you are using Amazon Linux 2, the awslogs service is now called "awslogsd"
              awslogsd:
                enabled: true
                ensureRunning: true
                files:
                - /etc/awslogs/awslogs.conf
                - /etc/awslogs/awscli.conf
        05_start_cron_for_custom_cloudwatch_metrics:
          commands:
            cmd01:
              command: crontab -u root /opt/kuali/scripts/crontab
              env:
                LANDSCAPE: !Sub "${Landscape}"
                AWS_DEFAULT_REGION: !Sub "${AWS::Region}"


Outputs:

  Cluster:
    Description: A reference to the ECS cluster
    Value:
      !Ref ECSCluster

  ECSContainerInstanceAutoScalingRoleARN:
    Description: A reference to ECS service auto scaling role
    Value:
      !GetAtt ECSContainerInstanceAutoScalingRole.Arn
      
  ECSContainerInstanceAutoScalingGroupName:
    Description: A reference to ECS AutoScaling Group Name
    Value:
      !Ref ECSContainerInstanceAutoScalingGroup
