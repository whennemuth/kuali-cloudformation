AWSTemplateFormatVersion: 2010-09-09


Description: >
  Deploys an ECS cluster to the specified VPC and subnets using an auto scaling group.


Parameters:

  GlobalTag:
    Type: String
    Description: >
      A common value that all resources in this template will have prefixed to
      their name and attached as a tag to establish a bundling through naming convention.
    Default: kuali-ecs

  BucketName:
    Type: String
    Description: The S3 bucket where our config files, keys, etc. are stored
    Default: kuali-conf

  PdfS3BucketName:
    Type: String
    Description: The name of the s3 bucket the pdf service is to use.

  Landscape:
    Description: Specify which landscape to build into the VPC
    Type: String
    AllowedValues:
    - sb
    - ci
    - qa
    - stg
    - prod
    ConstraintDescription: >
      This parameter is restricted to the following values: sb, ci, qa, stg, prod
    Default: sb

  CampusSubnet1:
    Type: AWS::EC2::Subnet::Id
    Description: Id of the first private application subnet that admits access from bu vpns through transit gateway attachment.

  CampusSubnet2:
    Type: AWS::EC2::Subnet::Id
    Description: Id of the second private application subnet that admits access from bu vpns through transit gateway attachment.

  # https://docs.aws.amazon.com/AmazonECS/latest/developerguide/retrieve-ecs-optimized_AMI.html
  ECSAMI:
    Description: AMI ID
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id

  InstanceType:
    Type: String
    Description: What type of EC2 instance should be used for hosting?
    AllowedValues:
    - t2.large
    - t2.xlarge
    - t3.large
    - t3.xlarge
    - m4.large
    - m4.xlarge
    - m5.large
    - m5.xlarge
    - c5.large
    - c5.xlarge
    ConstraintDescription: Specified instance type is not within selection list.
    Default: m4.large

  # NOTE: The type below triggers a check by aws for existence of the keypair as part of a validation check.
  # However, this makes the parameter required, even for stack updates. Use "String" as type to forego the
  # validation check and allow the parameter to be optional during updates.
  EC2KeypairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: The keypair for ssh use against the ec2 instance
  
  EnableNewRelicAPM:
    Type: String
    Description: Is newrelic APM to be enabled for this landscape?
    Default: "false"
    AllowedValues:
    - "true"
    - "false"
    ConstraintDescription: Enter "true" or "false" only.

  EnableNewRelicInfrastructure:
    Type: String
    Description: Is newrelic infrastructure (with logging) to be enabled for this landscape?
    Default: "false"
    AllowedValues:
    - "true"
    - "false"
    ConstraintDescription: Enter "true" or "false" only.

  SecurityGroupId:
    Type: AWS::EC2::SecurityGroup::Id
    Description: The security group to use for ECS cluster hosts.

  LoadBalancerUrl:
    Type: String
    Description: The DNS name for the ALB. The app is publicly reachable at this address.

  InstanceProfile:
    Type: String
    Description: If the instance profile already exists, provide its name here.
    Default: "create"
  
  InstanceRole:
    Type: String
    Description: If the role for the instance profile already exists, provide it here.
    Default: "create"

  MinClusterSize:
    Type: Number
    Description: How many EC2 instances are to be initially deployed as ECS hosts
      accross your cluster?
    # Don't allow instance count to go below 2, otherwise you lose high availability.
    AllowedValues: [ 2, 3, 4 ]
    ConstraintDescription: Minimum cluster size is limited between 2 and 4 instances.
    Default: 2

  MaxClusterSize:
    Type: Number
    Description: How many EC2 instances are to be initially deployed as ECS hosts
      accross your cluster?
    AllowedValues: [ 2, 3, 4, 5, 6 ]
    ConstraintDescription: Maximum cluster size is limited between 1 and 6 instances.
    Default: 3

    
Conditions: 
  CreateProfile: !Equals [ !Ref InstanceProfile, "create" ]
  CreateRole: !Equals [ !Ref InstanceRole, "create" ]


Resources:

  EC2Role:
    Type: AWS::IAM::Role
    Condition: CreateRole
    Description: >
      This IAM Role is attached to all of the EC2 hosts. Add other IAM
      policy statements here to allow access from your EC2 hosts to other AWS services.
      This role will be used by ALL containers running on the EC2 host.
    Properties:
      Path: "/"
      RoleName: !Sub ${GlobalTag}-${Landscape}-ec2-role
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      - arn:aws:iam::aws:policy/AWSCloudFormationReadOnlyAccess
      - arn:aws:iam::aws:policy/ElasticLoadBalancingReadOnly
      - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
      - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      - arn:aws:iam::aws:policy/CloudWatchFullAccess
      Policies:
      - PolicyName:
          !Sub ${GlobalTag}-${Landscape}-ecs-service-policy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Resource: "*"
            Action:
            - ecs:CreateCluster
            - ecs:DeregisterContainerInstance
            - ecs:DiscoverPollEndpoint
            - ecs:Poll
            - ecs:RegisterContainerInstance
            - ecs:StartTelemetrySession
            - ecs:Submit*
            - logs:CreateLogStream
            - logs:PutLogEvents
            - ecr:BatchCheckLayerAvailability
            - ecr:BatchGetImage
            - ecr:GetDownloadUrlForLayer
            - ecr:GetAuthorizationToken
            - ec2messages:AcknowledgeMessage
            - ec2messages:DeleteMessage
            - ec2messages:FailMessage
            - ec2messages:GetEndpoint
            - ec2messages:GetMessages
            - ec2messages:SendReply
            - cloudwatch:PutMetricData
            - cloudwatch:GetMetricStatistics
            - cloudwatch:ListMetrics
            - ec2:DescribeInstanceStatus
            - ec2:DescribeTags
            - ds:CreateComputer
            - ds:DescribeDirectories
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:DescribeLogGroups
            - logs:DescribeLogStreams
            - logs:PutLogEvents
            - s3:PutObject
            - s3:GetObject
            - s3:AbortMultipartUpload
            - s3:ListMultipartUploadParts
            - s3:ListBucket
            - s3:ListBucketMultipartUploads

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Condition: CreateProfile
    Properties:
      InstanceProfileName: !Sub ${GlobalTag}-${Landscape}-profile
      Path: "/"
      Roles:
      - !If [CreateRole, !Ref EC2Role, !Ref InstanceRole]

  ECSContainerInstanceAutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      RoleName:
        !Sub ${GlobalTag}-${Landscape}-ECS-Autoscale-Role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - application-autoscaling.amazonaws.com

      Policies:
      - PolicyName:
          !Sub ${GlobalTag}-${Landscape}-ecs-autoscale-service-policy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Resource: "*"
            Action:
            - application-autoscaling:*
            - cloudwatch:DescribeAlarms
            - cloudwatch:PutMetricAlarm
            - ecs:DescribeServices
            - ecs:UpdateService

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName:
        !Sub ${GlobalTag}-${Landscape}-cluster
      Tags:
      - Key: Name
        Value: !Sub ${GlobalTag}-${Landscape}-cluster

  ECSContainerInstanceAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: ECSCluster
    Description: The auto scaling group where the number of ec2 instances are scaled up or down.
    Properties:
      VPCZoneIdentifier:
        - !Ref CampusSubnet1
        - !Ref CampusSubnet2
      LaunchConfigurationName:
        !Ref ECSLaunchConfiguration
      MinSize: 
        !Ref MinClusterSize
      # DesiredCapacity:
      #   Should default to MinSize, but is only meaningful if using spot instances.
      MaxSize: 
        !Ref MinClusterSize
      Tags:
      - Key: Name
        Value:
          !Sub ${GlobalTag}-${Landscape}-auto-scaling-group
        PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT5M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 1
        WaitOnResourceSignals: true
        PauseTime: PT10M
        SuspendProcesses:
        - HealthCheck
        - ReplaceUnhealthy
        - AZRebalance
        - AlarmNotification
        - ScheduledActions

  ECSContainerInstanceScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName:
        !Ref ECSContainerInstanceAutoScalingGroup
      AdjustmentType: ChangeInCapacity
      Cooldown: 60
      # EstimatedInstanceWarmup: 30
      # MetricAggregationType: Average
      ScalingAdjustment: 1
      PolicyType: SimpleScaling

  ECSContainerInstanceScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName:
        !Ref ECSContainerInstanceAutoScalingGroup
      AdjustmentType: ChangeInCapacity
      Cooldown: 60
      # MetricAggregationType: Average
      ScalingAdjustment: -1

  ECSContainerInstanceScaleUpAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-up if Memory consumption >= 80% for 10 minutes
      MetricName: MemoryUtilization
      Namespace: AWS/EC2
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 10
      Period: 60
      Statistic: Average
      Threshold: 80

  ECSLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId:
        !Ref ECSAMI
      InstanceType:
        !Ref InstanceType
      SecurityGroups:
      - !Ref SecurityGroupId
      KeyName: !Ref EC2KeypairName
      IamInstanceProfile:
        !If [CreateProfile, !Ref EC2InstanceProfile, !Ref InstanceProfile]
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 64
            DeleteOnTermination: true
            
      UserData: 
        "Fn::Base64": !Sub |
          #!/bin/bash
          yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
          yum install -y aws-cfn-bootstrap
          yum install -y git
          # Add perl and zip libraries needed to unpack and run custom metric monitoring for cloudwatch.
          yum install -y perl-Switch perl-DateTime perl-Sys-Syslog perl-LWP-Protocol-https perl-Digest-SHA.x86_64
          yum install -y zip unzip
          yum install -y sysstat
          yum install -y jq
          
          # Install required packages for scripts that will monitor and upload custom metrics to cloudwatch.
          curl https://aws-cloudwatch.s3.amazonaws.com/downloads/CloudWatchMonitoringScripts-1.2.2.zip \
            -o /var/lib/ && CloudWatchMonitoringScripts-1.2.2.zip
          unzip -d /var/lib/ CloudWatchMonitoringScripts-1.2.2.zip
          rm -f /var/lib/CloudWatchMonitoringScripts-1.2.2.zip
          
          # Implement all the metadata in AWS::CloudFormation::Init
          /opt/aws/bin/cfn-init \
              -v \
              --configsets AllConfigs \
              --region ${AWS::Region} \
              --stack ${AWS::StackName} \
              --resource ECSLaunchConfiguration
          
          # Now that all initialization is done signal the result of the cfn-init attempt
          /opt/aws/bin/cfn-signal \
              -e $? \
              --region ${AWS::Region} \
              --stack ${AWS::StackName} \
              --resource ECSContainerInstanceAutoScalingGroup

    Metadata:
      AWS::CloudFormation::Authentication:
        # This authentication will make possible replacing inline file content with paths to files in s3
        # https://aws.amazon.com/blogs/devops/authenticated-file-downloads-with-cloudformation/
        S3AccessCreds:
          type: S3
          roleName:
            !If [CreateProfile, !Ref EC2Role, !Ref InstanceRole]
          buckets:
          - !Ref BucketName

      AWS::CloudFormation::Init:
        configSets:
          AllConfigs:
          - getFiles
          - ConfigSet: RunCommands
          GetFiles:
          - getFiles
          RunCommands:
          - ConfigSet: cmd01
          - ConfigSet: cmd02
          - ConfigSet: cmd03
          # - ConfigSet: cmd04
          cmd01:
          - 01_get_configs_from_s3
          cmd02:
          - 02_create_env_exports_file
          cmd03:
          - 03_add_instance_to_cluster
          cmd04:
          - 04_start_cron_for_custom_cloudwatch_metrics
        getFiles:
          packages:
            yum:
              awslogs: []
          files:
            /opt/kuali/README.txt:
              content: !Sub |
                This directory contains the "environment" for each app to run
                in a docker container that it needs.
                This includes env-file, configuration files, keys, etc.
                These are specific to the ${Landscape} landscape.
              mode: "000775"
              owner: root
              group: root
            /opt/kuali/scripts/crontab:
              content: |
                SHELL=/bin/bash
                PATH=/sbin:/bin:/usr/sbin:/usr/bin
                MAILTO=root
                HOME=/
                
                # Send custom metrics to cloudwatch once every minute
                # NOTE: The cronjob will start, but it does nothing until you uncomment the 1 or more of the 3 lines below.
                # This is a test ec2 instance, so defaulting to running these scripts manually while shelled in."
                # Check the system log for any errors this script encounters"
                # * * * * * /opt/kuali/scripts/send-custom-cloudwatch-metrics1.sh
                # * * * * * /opt/kuali/scripts/send-custom-cloudwatch-metrics2.sh
                # * * * * * /opt/kuali/scripts/send-psuedo-cloudwatch-metrics.sh
                #
                0 3 * * * /bin/bash /opt/kuali/scripts/stopinstance.sh
              mode: "000644"
              owner: root
              group: root
            /opt/kuali/scripts/send-custom-cloudwatch-metrics1.sh:
              content: |
                #!/bin/bash
                # Adding additional cloudwatch metrics that include memory utilization.
                # See: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/mon-scripts.html
                /var/lib/aws-scripts-mon/mon-put-instance-data.pl \
                  --mem-used-incl-cache-buff \
                  --mem-util \
                  --mem-avail \
                  --disk-space-util \
                  --disk-path=/ \
                  --from-cron             
              mode: "000744"
              owner: root
              group: root
            /opt/kuali/scripts/send-custom-cloudwatch-metrics2.sh:
              content: |
                #!/bin/bash
                # Cloudwatch metrics alternative that include are custom and cover all needed measurments.
                # Use this method as a replacement for the mon-put-instance-data.pl approach.
                # See: https://aws.amazon.com/premiumsupport/knowledge-center/cloudwatch-custom-metrics/
                export AWS_DEFAULT_REGION=us-east-1
                INSTANCEID=$(curl http://169.254.169.254/latest/meta-data/instance-id)
                USEDMEMORY_PERCENT=$(free -m | awk 'NR==2{printf "%.2f\t", $3*100/$2 }')
                USEDDISK_PERCENT=$(df / | awk 'NR==2{print $5}' | sed 's/\%//g')
                TCP_CONN=$(netstat -an | wc -l)
                TCP_CONN_PORT_80=$(netstat -an | grep 80 | wc -l)
                USERS=$(uptime | awk '{ print $4 }')
                IO_WAIT_PERCENT=$(iostat | awk 'NR==4 {print $4}')
                  # If no average cpu record, then take the cpu as of this moment
                [ -z "$((cat /tmp/average.cpu | grep -P '^\d+(\.\d+)?$') 2> /dev/null)" ] && grep 'cpu ' /proc/stat | awk '{print ($2+$4)*100/($2+$4+$5)}' > /tmp/average.cpu
                AVERAGE_CPU=$(cat /tmp/average.cpu)
                  # Compute the average cpu utilization by taking a reading every 2 seconds for 58 seconds and taking their average.
                  # The cron job is on a minute schedule, so 58 seconds will ensure that a new average will be recorded BEFORE the next cron cycle.
                NEXT_AVERAGE_CPU=$(n=0 && cat <(echo "$(while [ $n -lt 4 ] ; do grep 'cpu ' /proc/stat && sleep 2 && n=$((n+1)) ; done)") | awk '{c++; t += ($2+$4)*100/($2+$4+$5)} END {print t/c}')
                echo $NEXT_AVERAGE_CPU > /tmp/average.cpu
                
                aws cloudwatch put-metric-data --dimensions Instance=$INSTANCEID --namespace "ECSTestCustomMetrics" --metric-name cpu-usage --value $AVERAGE_CPU
                aws cloudwatch put-metric-data --dimensions Instance=$INSTANCEID --namespace "ECSTestCustomMetrics" --metric-name memory-usage --value $USEDMEMORY_PERCENT
                aws cloudwatch put-metric-data --dimensions Instance=$INSTANCEID --namespace "ECSTestCustomMetrics" --metric-name disk-usage --value $USEDDISK_PERCENT
                aws cloudwatch put-metric-data --dimensions Instance=$INSTANCEID --namespace "ECSTestCustomMetrics" --metric-name tcp_connections --value $TCP_CONN
                aws cloudwatch put-metric-data --dimensions Instance=$INSTANCEID --namespace "ECSTestCustomMetrics" --metric-name tcp_connection_on_port_80 --value $TCP_CONN_PORT_80
                aws cloudwatch put-metric-data --dimensions Instance=$INSTANCEID --namespace "ECSTestCustomMetrics" --metric-name nbr_of_users --value $USERS
                aws cloudwatch put-metric-data --dimensions Instance=$INSTANCEID --namespace "ECSTestCustomMetrics" --metric-name io_wait --value $IO_WAIT_PERCENT
              mode: "000744"
              owner: root
              group: root
            /opt/kuali/scripts/send-psuedo-cloudwatch-metrics.sh:
              content: !Sub |
                #!/bin/bash

                # This function streams a json file from s3 that indicates dummy metrics to send to cloudwatch.
                # The purpose is to simulate higher (or lower) thresholds that would trigger alarms to engage
                # a scale-in or scale-out policy for auto-scaling activity.
                  sendDummyMetrics() {
                    # local json=$(cat /c/whennemuth/workspaces/ecs_workspace/dummy-metrics/dummy-ecs-metrics.json)
                    local json=$(aws s3 cp s3://${BucketName}/dummydata/dummy-ecs-metrics.json)
                    local namespace=$(echo "$json" | jq -r '.Namespace')
                    local instances=$(echo $json | jq -r -c '.Instances[]')
                    local evals=()
                    while read -r instance; do
                      local instanceId=$(echo "$instance" | jq -r '.InstanceId')
                      local metrics=$(echo $instance | jq -r -c '.Metrics[]')
                      while read -r metric; do
                        local name=$(echo "$metric" | jq -r '.MetricName')
                        local baseline=$(echo "$metric" | jq -r '.BaselineValue')
                        local deviation=$(echo "$metric" | jq -r '.DeviationValue')
                        # Examples to set until to a value offset from current UTC time
                        # date +%s --date='+5 minute'
                        # date +%s --date='-1 hour'
                        local until=$(echo "$metric" | jq -r '.DeviateUntil')
                        local value=$baseline
                        local now=$(date +%s)
                        [ $until -gt $now ] && value=$deviation
                        local evalstr="$(cat <<EOF
                          aws cloudwatch put-metric-data \
                          --region ${AWS::Region} \
                            --dimensions Instance=$instanceId \
                            --namespace "$namespace" \
                            --metric-name $name \
                            --value $value
                  EOF
                        )"
                      evals=("${!evals[@]}" "$(echo "$evalstr" | sed -E 's/[[:space:]]+/ /g' | xargs)")
                      done <<< "$metrics"
                    done <<< "$instances"
                  
                  for cmd in "${!evals[@]}" ; do
                      echo "$cmd"
                      eval "$cmd"
                    done
                  }
                  
                  sendDummyMetrics
              mode: "000744"
              owner: root
              group: root
            /etc/cfn/cfn-hup.conf:
              mode: "000400"
              owner: root
              group: root
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region} 
                # Change interval from default 15 minutes to 5
                interval=5
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.ECSLaunchConfiguration.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSLaunchConfiguration --configsets AllConfigs 
            /etc/awslogs/awscli.conf:
              content: !Sub |
                [plugins]
                cwlogs = cwlogs
                [default]
                region = ${AWS::Region}
            /etc/awslogs/awslogs.conf:
              content: !Sub |
                [general]
                state_file = /var/lib/awslogs/agent-state
                
                [/var/log/dmesg]
                file = /var/log/dmesg
                log_group_name = ${GlobalTag}-${Landscape}
                log_stream_name = /var/log/dmesg
                
                [/var/log/messages]
                file = /var/log/messages
                log_group_name = ${GlobalTag}-${Landscape}
                log_stream_name = /var/log/messages
                datetime_format = %b %d %H:%M:%S
                
                [/var/log/docker]
                file = /var/log/docker
                log_group_name = ${GlobalTag}-${Landscape}
                log_stream_name = /var/log/docker
                datetime_format = %Y-%m-%dT%H:%M:%S.%f
                
                [/var/log/ecs/ecs-init.log]
                file = /var/log/ecs/ecs-init.log
                log_group_name = ${GlobalTag}-${Landscape}
                log_stream_name = /var/log/ecs/ecs-init.log
                datetime_format = %Y-%m-%dT%H:%M:%SZ
                
                [/var/log/ecs/ecs-agent.log]
                file = /var/log/ecs/ecs-agent.log
                log_group_name = ${GlobalTag}-${Landscape}
                log_stream_name = /var/log/ecs/ecs-agent.log
                datetime_format = %Y-%m-%dT%H:%M:%SZ
                
                [/var/log/ecs/audit.log]
                file = /var/log/ecs/audit.log
                log_group_name = ${GlobalTag}-${Landscape}
                log_stream_name = /var/log/ecs/audit.log
                datetime_format = %Y-%m-%dT%H:%M:%SZ
            /opt/kuali/scripts/s3.download.configs.sh:
              content: !Sub |
                #!/bin/bash
                echo "Downloading all configurations for containers from the s3 bucket, landscape ${!LANDSCAPE}"
                
                [ ! -d /opt/kuali/s3 ] && mkdir -p /opt/kuali/s3
                cd /opt/kuali/s3
                aws s3 sync --delete \
                  --exclude "*" \
                  --include "core/*" \
                  --include "portal/*" \
                  --include "pdf/*" \
                  --include "kc/kc-config-rds.xml" \
                  s3://${BucketName}/${!LANDSCAPE}/ .
                mv /opt/kuali/s3/kc/kc-config-rds.xml /opt/kuali/s3/kc/kc-config.xml
                aws s3 cp s3://${BucketName}/rice.cer /opt/kuali/s3/kc/
                aws s3 cp s3://${BucketName}/rice.keystore /opt/kuali/s3/kc/
              mode: "000775"
              owner: root
              group: root
            /opt/kuali/scripts/process.env.file.sh:
              content: |
                #!/bin/bash
                # Turn a name=value line into an "export name='value'" line
                getLineExport() {
                  local line=$(echo -n "$1" | xargs) # Use xargs to trim the line.
                  # Return an empty string if the line is a properties file comment
                  [ "${line:0:1}" == "#" ] && echo "" && exit 0;
                  [ -z "$line" ] && echo "" && exit 0;
                  if [ -n "$(echo $testline | grep -P '\x22')" ] ; then
                    echo "export $line"
                  else
                    # Put double quotes around the exported variable value
                    echo "export $(echo $line | sed 's/=/="/1')\""
                  fi
                }
                
                # Create a script to export all environment variables in the mounted directory before starting node
                createExportFile() {
                  local ENV_FILE_FROM_S3="$1"
                if [ ! -f $ENV_FILE_FROM_S3 ] ; then
                  echo "ERROR! MISSING $ENV_FILE_FROM_S3"
                    exit 1
                  else
                    cd $(dirname $ENV_FILE_FROM_S3)
                    rm -f export.sh
                    echo "Creating $(pwd)/export.sh..."
                    while read line ; do
                      expline="$(getLineExport "$line")" 
                      [ -z "$expline" ] && continue
                      prop=$(echo "$line" | cut -f1 -d '=')
                      # Override some of the existing environment variables
                      [ "${prop^^}" == "SHIB_HOST" ] && expline="export SHIB_HOST="
                      [ "${prop^^}" == "ROOT_DIR" ]  && expline="export ROOT_DIR=/var/core-temp"
                      echo "Setting env var $prop" 
                      echo "$expline" >> export.sh
                    done < $ENV_FILE_FROM_S3
                    
                    # In case the file from s3 originated on a windows file system, remove return carriage chars
                    sed -i 's/\r//g' export.sh
                  fi
                }

                export EC2_HOST="${LOADBALANCER_URL}"
                DOMAIN_NAME=$(echo ${EC2_HOST} | cut -d'/' -f3) # Strips off the "http://" portion and trailing "/"

                # Perform a replacement in kc-config.xml of application.host parameter value with this ec2 public host name.
                sed -i "s/APPLICATION_HOST/$DOMAIN_NAME/" /opt/kuali/s3/kc/kc-config.xml

                # Perform a replacement in all environment.variables.s3 files of existing application host entries with this ec2 public host name.
                for f in $(env | grep 'ENV_FILE_FROM_S3') ; do
                  envfile="$(echo $f | cut -d'=' -f2)"
                  # Replace the standard kuali-research-[env].bu.edu references with the dns address of this instances load balancer.
                  sed -i -r "s/kuali-research.*.bu.edu/$DOMAIN_NAME/g" "$envfile"
                  # Create the export.sh file
                  createExportFile "$envfile"

                  # Correct the AWS_S3_BUCKET name value in case it disagrees with the templates parameter.
                  if grep -iq 'pdf' <<<"$envfile" ; then
                    # Remove the current entry for AWS_S3_BUCKET from the environment variables file and put it back with the provided value.
                    sed -i '/.*AWS_S3_BUCKET.*=.*/d' $envfile
                    echo "AWS_S3_BUCKET=$PDF_BUCKET_NAME" >> $envfile
                    # Do it again for the export file.
                    sed -i '/.*AWS_S3_BUCKET.*=.*/d' export.sh
                    echo "export AWS_S3_BUCKET=$PDF_BUCKET_NAME" >> export.sh
                  fi
                done
                  
                exit 0
              mode: "000775"
              owner: root
              group: root
        01_get_configs_from_s3:
          commands:
            cmd01:
              cwd: /opt/kuali/scripts
              env:
                LANDSCAPE: !Sub "${Landscape}"
              command: bash s3.download.configs.sh
        02_create_env_exports_file:
          commands:
            cmd01:
              cwd: /opt/kuali/scripts
              env:
                ENV_FILE_FROM_S3_CORE: /opt/kuali/s3/core/environment.variables.s3
                ENV_FILE_FROM_S3_PORTAL: /opt/kuali/s3/portal/environment.variables.s3
                ENV_FILE_FROM_S3_PDF: /opt/kuali/s3/pdf/environment.variables.s3
                LOADBALANCER_URL: !Sub "${LoadBalancerUrl}"
                PDF_BUCKET_NAME: !Sub "${PdfS3BucketName}"
              command: bash process.env.file.sh
        03_add_instance_to_cluster:
          commands:
            cmd01:
              command:
                !Sub echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                - /etc/cfn/cfn-hup.conf
                - /etc/cfn/hooks.d/cfn-auto-reloader.conf
              # awslogs:
              # NOTE: If you are using Amazon Linux 2, the awslogs service is now called "awslogsd"
              awslogsd:
                enabled: true
                ensureRunning: true
                files:
                - /etc/awslogs/awslogs.conf
                - /etc/awslogs/awscli.conf
        04_start_cron_for_custom_cloudwatch_metrics:
          commands:
            cmd01:
              command: crontab -u root /opt/kuali/scripts/crontab
              env:
                LANDSCAPE: !Sub "${Landscape}"


Outputs:

  Cluster:
    Description: A reference to the ECS cluster
    Value:
      !Ref ECSCluster

  ECSContainerInstanceAutoScalingRoleARN:
    Description: A reference to ECS service auto scaling role
    Value:
      !GetAtt ECSContainerInstanceAutoScalingRole.Arn
      
  ECSContainerInstanceAutoScalingGroupName:
    Description: A reference to ECS AutoScaling Group Name
    Value:
      !Ref ECSContainerInstanceAutoScalingGroup
