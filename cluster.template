{
	"AWSTemplateFormatVersion" : "2010-09-09",

	"Description" : "Deploys an ECS cluster to the specified VPC and subnets using an auto scaling group. ",

	"Parameters" : {
		"Landscape" : {
		  "Description": "Specify which landscape to build into the VPC",
		  "Type": "String",
		  "AllowedValues" : [ "sb", "ci", "qa", "stg", "prod" ],
		  "ConstraintDescription" : "This parameter is restricted to the following values: sb, ci, qa, stg, prod",
		  "Default" : "sb"
		},
        "GlobalPrefix" : {
		    "Type" : "String",
			"Description": "A common value that all resources in this template will prefix to their name to establish a bundling through naming convention. If a nested stack, this will most likely be the name of the top-most stack.",
			"Default" : "ECS-test"
        },
        "vpcid" : {
            "Type" : "AWS::EC2::VPC::Id",
            "Description" : "The id of the vpc this is a subnet of."
        },
        "InstanceType" : {
            "Type" : "String",
			"Description" : "What type of EC2 instance should be used for ECS hosting?",
            "AllowedValues" : [
				"t2.medium", "t2.large", "t2.xlarge",
				"m4.large", "m4.xlarge", "m4.2xlarge",
				"m5.large", "m5.xlarge", "m5.2xlarge"
			],
            "ConstraintDescription" : "Specified instance type is not within selection list.",
            "Default" : "m4.large"
        },
        "ClusterSize" : {
            "Type" : "Number",
            "Description" : "How many EC2 instances are to be initially deployed as ECS hosts?",
            "AllowedValues" : [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ],
			"ConstraintDescription" : "Cluster size is limited between 1 and 10 instances.",
            "Default" : "2"
        },
        "Subnets" : {
            "Type" : "List<AWS::EC2::Subnet::Id>",
            "Description" : "The subnets this cluster should span."
        },
        "SecurityGroup" : {
            "Type" : "AWS::EC2::SecurityGroup::Id",
            "Description" : "The security group to use for ECS cluster hosts."
        },
        "ConfigBucket" : {
            "Type" : "String",
			"Description" : "The S3 bucket where our config files, keys, etc. are stored",
			"Default" : "kuali-research-ec2-setup"
        }
	},
	
    "Metadata" : {
		"EC2" : { 
			"image_name" : "amzn-ami-2018.03.a-amazon-ecs-optimized" ,
			"os" : "Amazon Linux",
			"ecs_runtime_version" : "Docker version 17.12.1-ce",
			"ecs_agent_version" : "1.18.0",
			"NOTES" : {"Fn::Join" : [ "\n", [
				"The mappings included in this template are for the latest ECS optimized AMIs as of June 2018.",
				"They only include those AMIs for US regions.",
				"To query for the latest AMI per region, use the following command in the aws CLI:",
				"aws ssm get-parameters --names /aws/service/ecs/optimized-ami/amazon-linux/recommended/image_id --region [REGION]",
				"where REGION is us-east-1, us-west-2, etc."
			]]}
		},
        "AUTO-SCALING" : {
			"NOTES" : { "Fn::Join" : [ "\n", [
				"In this template we define EC2 auto-scaling as distinct from application auto-scaling employed by the service(s) for ECS.",
				"The difference is that EC2 auto-scaling uses properties like MinSize, MaxSize, DesiredCapacity, etc. to refer to the number",
				"of EC2 instances need to run in order to meet targets for metric thresholds.",
				"ECS auto-scaling uses these properties to refer to docker containers (tasks) and how many of them should be running across",
				"the ECS cluster (can span one or more EC2 instances) to meet targets for metric thresholds.",
				"Combined, these two auto-scaling types define the overall auto-scaling strategy. This implies a certain amount of orchestration",
				"to make sure the two types collaborate with each other instead of clash.",
				"SEE: https://www.reddit.com/r/aws/comments/5swd80/ec2_vs_ecs_autoscaling_question/"
			]]}
		},
		"AUTO_SCALING-GROUP" : {
			"NOTES" : {"Fn::Join" : [ "\n", [
				"The ECSContainerInstanceAutoScalingGroup resource will not go into a CREATE_COMPLETE state until enough EC2 instances are heard back from to say they are running.",
				"The userdata defined to run on EC2 startup will call the cfn-signal function that comes packaged in the aws optimized",
				"ami to signal that the instance is running. We are requiring that a minimum of 1 such signals are received by setting",
				"the ECSContainerInstanceAutoScalingGroup.CreationPolicy.ResourceSignal.Count property. Currently the signal is sent upon startup, but",
				"it could be made contingent on further conditions written into the EC2 userdata, like a test that a task(s) is running",
				"must also succeed (you could send more than one signal and up CreationPolicy.ResourceSignal.Count property correspondingly)."
			]]}
		},
		"AMI_MAPPINGS" :{
			"NOTES" : {"Fn::Join" : [ "\n", [
				"TODO: In order to not have to maintain and ami mapping (see below), delegate ami lookup to a lambda function:",
				"https://github.com/awsdocs/aws-cloudformation-user-guide/blob/master/doc_source/walkthrough-custom-resources-lambda-lookup-amiids.md"
			]]}
		},
		"CONTENT_FROM_S3_BUCKET" : {
			"NOTES" : {"Fn::Join" : [ "\n", [
				"Typically to place files where they need to go, you would declare their content inline using AWS::CloudFormation::Init.file.[filename].content",
				"However, you can use the AWS::CloudFormation::Init.file.[filename].source instead and specify a file in an S3 bucket. Example here:",
				"https://aws.amazon.com/blogs/devops/authenticated-file-downloads-with-cloudformation/"
			]]}
		},
		"USERDATA_VS_CFN-INIT" : {
			"NOTES" : {"Fn::Join" : [ "\n", [
				"UserData is run only once upon creation of the ec2 instance and will call cfn-init for the first time as one of its last commands.",
				"Instead of being procedural like UserData, cfn-init is state-based in that it comprises only commands that deposit/replace files, set environment ",
				"variables, update packages, etc. But the biggest difference is that cfn-init can be run again after the initial ec2 creation either by modifying",
				"anything in the AWS::CloudFormation::Init resource of the cfn stack template and performing a stack update, or shelling into the ec2 instance ",
				"and running: /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource YourResourceName --configsets ...",
				"If you make a modification to UserData cloudformation will REPLACE that EC2 instance during a stack update.",
				"If you make a modification to AWS::CloudFormation::Init, cloudformation will UPDATE that ec2 instance in place during a stack update.",
				"So, rule of thumb: Don't put anything in UserData that you want to be \"refreshable\" with a stack update"
			]]}
		}
	},

    "Mappings" : {
		"RegionMap" : {
			"us-east-1": { "AMI": "ami-5253c32d" },
			"us-east-2": { "AMI": "ami-956e52f0" },
			"us-west-1": { "AMI": "ami-6b81980b" },
			"us-west-2": { "AMI": "ami-d2f489aa" },
			"alternative-approach" : { "url": "https://github.com/awsdocs/aws-cloudformation-user-guide/blob/master/doc_source/walkthrough-custom-resources-lambda-lookup-amiids.md"}
		}
	},

	"Resources" : {

		"Utils" : {
		    "Type" : "AWS::CloudFormation::Stack",
		    "Properties" : {
		        "TemplateURL" : "https://s3.amazonaws.com/kuali-research-ec2-setup/ecs/cloudformation/lambda/lambda.template",
                "Parameters" : {
					"GlobalPrefix": { "Ref" : "GlobalPrefix" }
				}
		    }
		},
				
        "ClusterSizeParms" : {
            "Type" : "Custom::Functions",
            "Properties" : {
				"ServiceToken" : {"Fn::GetAtt" : [ "Utils", "Outputs.NodeHelperFunctionArn"]},
				"task" : "cluster-size",
                "parm1" : { "Ref" : "ClusterSize" }
			}
        },
	
        "ECSCluster" : {
            "Type" : "AWS::ECS::Cluster",
            "Properties" : {
				"ClusterName" : {"Fn::Join" : [ "-", [ { "Ref" : "GlobalPrefix" }, "ecs-cluster"] ]}
            }
        },
		
        "ECSContainerInstanceAutoScalingGroup" : {
            "Type" : "AWS::AutoScaling::AutoScalingGroup",
            "DependsOn" : "ECSCluster",
			"Description" : "The auto scaling group where the number of ec2 instances are scaled up or down.",
            "Properties" : {
				"VPCZoneIdentifier" : { "Ref" : "Subnets" },
                "LaunchConfigurationName" : { "Ref" : "ECSLaunchConfiguration" },
                "MaxSize" : {"Fn::GetAtt" : [ "ClusterSizeParms", "maxSize"]},
                "MinSize" : {"Fn::GetAtt" : [ "ClusterSizeParms", "minSize"]},
                "DesiredCapacity" : { "Ref" : "ClusterSize" },
                
                "Tags" : [{
					"Key" : "Name",
                    "Value" : { "Fn::Sub" : "${GlobalPrefix}-${Landscape}-${AWS::StackName}-auto-scaling-group" },
                    "PropagateAtLaunch" : true
				}]
            },
            "CreationPolicy" : {
				"ResourceSignal" : {
					"Count" : "1",
                    "Timeout" : "PT5M"
				}
			},
            "UpdatePolicy" : {
				"AutoScalingRollingUpdate": {
					"MinInstancesInService" : "1",
					"MaxBatchSize" : "1",
					"WaitOnResourceSignals" : "true",
					"PauseTime" : "PT10M",
					"SuspendProcesses": [
						"HealthCheck",
						"ReplaceUnhealthy",
						"AZRebalance",
						"AlarmNotification",
						"ScheduledActions"
					]
				}
			}
        },
        "ECSContainerInstanceScaleUpPolicy" : {
            "Type" : "AWS::AutoScaling::ScalingPolicy",
            "Properties" : {
                "AutoScalingGroupName" : { "Ref" : "ECSContainerInstanceAutoScalingGroup" },
                "AdjustmentType" : "ChangeInCapacity",
                "Cooldown" : "60",
                "EstimatedInstanceWarmup" : "30",
                "MetricAggregationType" : "Average",
                "ScalingAdjustment" : "1",
                "PolicyType" : "SimpleScaling" 
            }
        },
        "ECSContainerInstanceScaleDownPolicy" : {
            "Type" : "AWS::AutoScaling::ScalingPolicy",
            "Properties" : {
                "AutoScalingGroupName" : { "Ref" : "ECSContainerInstanceAutoScalingGroup" },
                "AdjustmentType" : "ChangeInCapacity",
                "Cooldown" : "60",
                "MetricAggregationType" : "Average",
                "ScalingAdjustment" : "-1"
            }
        },
        "ECSContainerInstanceScaleUpAlarm" : {
            "Type" : "AWS::CloudWatch::Alarm",
            "Properties" : {
				"AlarmDescription"   : "Scale-up if Memory consumption >= 80% for 10 minutes",
                "MetricName"         : "",
                "Namespace"          : "AWS/EC2",
                "ComparisonOperator" : "GreaterThanOrEqualToThreshold",
                "EvaluationPeriods"  : "",
                "Period"             : "",
                "Statistic"          : "",
                "Threshold"          : ""
            }
        },


        "ECSLaunchConfiguration" : {
            "Type" : "AWS::AutoScaling::LaunchConfiguration",
            "Properties" : {
				"ImageId" : {"Fn::FindInMap" : [ "RegionMap" , { "Ref" : "AWS::Region" }, "AMI"] },
                "InstanceType" : { "Ref" : "InstanceType" },
                "SecurityGroups" : [ { "Ref" : "SecurityGroup" } ],
                "IamInstanceProfile" : { "Ref" : "ECSInstanceProfile" },
                "UserData" : { "Fn::Base64" : { "Fn::Join" : [ "\n", [
					"#!/bin/bash",
					"yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm",
					"yum install -y aws-cfn-bootstrap",
					"yum install -y git",
					"# Add perl and zip libraries needed to unpack and run custom metric monitoring for cloudwatch.",
					"yum install -y perl-Switch perl-DateTime perl-Sys-Syslog perl-LWP-Protocol-https perl-Digest-SHA.x86_64",
					"yum install -y zip unzip",
					"yum install -y sysstat",
					"yum install -y jq",
					"",
					"# Modify the sudoers file so that anyone in the wheel group can be a sudoer",
					"chmod u+w /etc/sudoers && \\",
					"echo -e \"%wheel\\tALL=(ALL)\\tNOPASSWD: ALL\" >> /etc/sudoers && \\",
					"chmod u-w /etc/sudoers && \\",
					"",
					"# NOTE: Creating users here and not in Metadata.AWS::CloudFormation::Init.config.users due to restrictions: ",
					"# \"Users are created as non-interactive system users with a shell of /sbin/nologin. This is by design and cannot be modified.\"",
					"users=(wrh mukadder dhaywood mkousheh)",
					"for user in ${users[@]}; do",
					"   adduser -m $user && \\",
					"   usermod -aG root $user && \\",
					"   usermod -aG docker $user && \\",
					"   usermod -aG wheel $user && \\",
					"   mkdir /home/$user/.ssh && \\",
					"   chmod 700 /home/$user/.ssh && \\",
					"   chown -R $user:$user /home/$user",
					"done",
					"",
					"# Install required packages for scripts that will monitor and upload custom metrics to cloudwatch.",
					"curl https://aws-cloudwatch.s3.amazonaws.com/downloads/CloudWatchMonitoringScripts-1.2.2.zip -o /var/lib/ && CloudWatchMonitoringScripts-1.2.2.zip",
					"unzip -d /var/lib/ CloudWatchMonitoringScripts-1.2.2.zip",
					"rm -f /var/lib/CloudWatchMonitoringScripts-1.2.2.zip",
					"",
					"# Implement all the metadata in AWS::CloudFormation::Init",
					"/opt/aws/bin/cfn-init \\",
					"   -v \\",
					"   --configsets AllConfigs \\",
					{ "Fn::Sub" : "   --region ${AWS::Region} \\" },
					{ "Fn::Sub" : "   --stack ${AWS::StackName} \\" },
					"   --resource ECSLaunchConfiguration",
					"",
					"# Now that all initialization is done signal success",
					"/opt/aws/bin/cfn-signal \\",
					"   -e $? \\",
					{ "Fn::Sub" : "   --region ${AWS::Region} \\" },
					{ "Fn::Sub" : "   --stack ${AWS::StackName} \\" },
					"   --resource ECSContainerInstanceAutoScalingGroup"
				]]}}
            },
            "Metadata" : {
				"COMMENTS" : {"Fn::Join" : [ "\n", [
					"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-init.html", 
					"1) If your template calls the cfn-init script, the script looks for resource metadata rooted in the AWS::CloudFormation::Init metadata key.",
					"2) The cfn-hup helper is a daemon that detects changes in resource metadata and runs user-specified actions when a change is detected.",
					"   This allows you to make configuration updates on your running Amazon EC2 instances through the UpdateStack API action",
					"3) The user actions that the cfn-hup daemon calls periodically are defined in the hooks.conf configuration file.",
					"   To support composition of several applications deploying change notification hooks, cfn-hup supports a directory named hooks.d that ",
					"   is located in the hooks configuration directory. You can place one or more additional hooks configuration files in the hooks.d directory.",
					"   The additional hooks files must use the same layout as the hooks.conf file.",
					"4) services.sysvinit.servicename.files: A list of files. If cfn-init changes one directly via the files block, this service will be restarted.",
					"5) The cfn-init helper script processes these configuration sections in the following order: packages, groups, users, sources, files, commands, ",
					"   and then services. If you require a different order, separate your sections into different config keys, and then use a configset that ",
					"   specifies the order in which the config keys should be processed."
				]]},
				"AWS::CloudFormation::Authentication": {
                    "S3AccessCreds": {
                        "type": "S3",
                        "roleName": {
                            "Ref": "ECSRole"
                        },
						"buckets" : [ { "Ref" : "ConfigBucket" } ]
                    }
                },
				"AWS::CloudFormation::Init" : {
					"configSets" : {
						"AllConfigs" : [ "getFiles", { "ConfigSet" : "RunCommands" } ],
						"GetFiles" : [ "getFiles" ],
						"RunCommands" : [ 
							{ "ConfigSet" : "cmd01"}, 
							{ "ConfigSet" : "cmd02"}, 
							{ "ConfigSet" : "cmd03"} 
						],
						"cmd01" : [ "01_get_configs_from_s3" ],
						"cmd02" : [ "02_create_env_exports_file" ], 
						"cmd03" : [ "03_add_instance_to_cluster" ],
						"cmd04" : [ "04_start_cron_for_custom_cloudwatch_metrics" ]
					}, 
					"getFiles" : {
						"packages" : {
							"yum" : {
								"awslogs" : []
							}
						},
						"files" : {
							"/home/wrh/.ssh/authorized_keys" : {
								"mode" : "000600",
								"owner" : "wrh",
								"group" : "wrh",
								"source" : { "Fn::Sub" : "https://s3.amazonaws.com/${ConfigBucket}/ecs/ssh-keys/rsa-key-wrh.pub" }
							},
							"/home/mkousheh/.ssh/authorized_keys" : {
								"mode" : "000600",
								"owner" : "mkousheh",
								"group" : "mkousheh",
								"source" : { "Fn::Sub" : "https://s3.amazonaws.com/${ConfigBucket}/ecs/ssh-keys/rsa-key-mkousheh.pub" }
							},
							"/home/mukadder/.ssh/authorized_keys" : {
								"mode" : "000600",
								"owner" : "mukadder",
								"group" : "mukadder",
								"source" : { "Fn::Sub" : "https://s3.amazonaws.com/${ConfigBucket}/ecs/ssh-keys/rsa-key-mukadder.pub" }
							},
							"/home/dhaywood/.ssh/authorized_keys" : {
								"mode" : "000600",
								"owner" : "dhaywood",
								"group" : "dhaywood",
								"source" : { "Fn::Sub" : "https://s3.amazonaws.com/${ConfigBucket}/ecs/ssh-keys/rsa-key-dhaywood.pub" }
							},
							"/var/kuali/README.txt" : {
								"content" : { "Fn::Join" : [ "\n", [
									"This directory contains the \"environment\" for each app to run in a docker container that it needs.",
									"This includes env-file, configuration files, keys, etc.",
                                    { "Fn::Sub" : "These are specific to the ${Landscape} landscape." }
								]]},
								"mode" : "000775",
								"owner" : "root",
								"group" : "root"
							},
							"/root/.ssh/git_rsa_key" : {
								"mode" : "000600",
								"owner" : "root",
								"group" : "root",
								"source" : { "Fn::Sub" : "https://s3.amazonaws.com/${ConfigBucket}/bu_github_id_docker_rsa"}
							},
							"/root/crontab" : {
								"content" : { "Fn::Join" : [ "\n", [
									"SHELL=/bin/bash",
									"PATH=/sbin:/bin:/usr/sbin:/usr/bin",
									"MAILTO=root",
									"HOME=/",
									"",
									"# Send custom metrics to cloudwatch once every minute",
									"# Check the system log for any errors this script encounters",
									"* * * * * /root/send-custom-cloudwatch-metrics1.sh",
									"* * * * * /root/send-custom-cloudwatch-metrics2.sh",
									"* * * * * /root/send-psuedo-cloudwatch-metrics.sh",
									""
								]]},
								"mode" : "000644",
								"owner" : "root",
								"group" : "root"
							},
							"/root/send-special-cloudwatch-metrics1.sh" : {
								"content" : { "Fn::Join" : [ "\n", [
									"#!/bin/bash",
									"# Adding additional cloudwatch metrics that include memory utilization.",
									"# See: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/mon-scripts.html",
									"/var/lib/aws-scripts-mon/mon-put-instance-data.pl \\",
									"  --mem-used-incl-cache-buff \\",
									"  --mem-util \\",
									"  --mem-avail \\",
									"  --disk-space-util \\",
									"  --disk-path=/ \\",
									"  --from-cron",
									""
								]]},
								"mode" : "000744",
								"owner" : "root",
								"group" : "root"
							},
							"/root/send-custom-cloudwatch-metrics2.sh" : {
								"content" : { "Fn::Join" : [ "\n", [
									"#!/bin/bash",
									"# Cloudwatch metrics alternative that include are custom and cover all needed measurments.",
									"# Use this method as a replacement for the mon-put-instance-data.pl approach.",
									"# See: https://aws.amazon.com/premiumsupport/knowledge-center/cloudwatch-custom-metrics/",
									"export AWS_DEFAULT_REGION=us-east-1",
									"INSTANCEID=$(curl http://169.254.169.254/latest/meta-data/instance-id)",
									"USEDMEMORY_PERCENT=$(free -m | awk 'NR==2{printf \"%.2f\t\", $3*100/$2 }')",
									"USEDDISK_PERCENT=$(df / | awk 'NR==2{print $5}' | sed 's/\\%//g')",
									"TCP_CONN=$(netstat -an | wc -l)",
									"TCP_CONN_PORT_80=$(netstat -an | grep 80 | wc -l)",
									"USERS=$(uptime | awk '{ print $4 }')",
									"IO_WAIT_PERCENT=$(iostat | awk 'NR==4 {print $4}')",
									"  # If no average cpu record, then take the cpu as of this moment",
									"[ -z \"$((cat /tmp/average.cpu | grep -P '^\\d+(\\.\\d+)?$') 2> /dev/null)\" ] && grep 'cpu ' /proc/stat | awk '{print ($2+$4)*100/($2+$4+$5)}' > /tmp/average.cpu",
									"AVERAGE_CPU=$(cat /tmp/average.cpu)",
									"  # Compute the average cpu utilization by taking a reading every 2seconds for a 58 seconds and taking their average.",
									"  # The cron job is on a minute schedule, so 58 seconds will ensure that a new average will be recorded BEFORE the next cron cycle.",
									"NEXT_AVERAGE_CPU=$(n=0 && cat <(echo \"$(while [ $n -lt 4 ] ; do grep 'cpu ' /proc/stat && sleep 2 && n=$((n+1)) ; done)\") | awk '{c++; t += ($2+$4)*100/($2+$4+$5)} END {print t/c}')",
									"echo $NEXT_AVERAGE_CPU > /tmp/average.cpu",
									"",
									"aws cloudwatch put-metric-data --dimensions Instance=$INSTANCEID --namespace \"EC2TestCustomMetrics\" --metric-name cpu-usage --value $AVERAGE_CPU",
									"aws cloudwatch put-metric-data --dimensions Instance=$INSTANCEID --namespace \"EC2TestCustomMetrics\" --metric-name memory-usage --value $USEDMEMORY_PERCENT",
									"aws cloudwatch put-metric-data --dimensions Instance=$INSTANCEID --namespace \"EC2TestCustomMetrics\" --metric-name disk-usage --value $USEDDISK_PERCENT",
									"aws cloudwatch put-metric-data --dimensions Instance=$INSTANCEID --namespace \"EC2TestCustomMetrics\" --metric-name tcp_connections --value $TCP_CONN",
									"aws cloudwatch put-metric-data --dimensions Instance=$INSTANCEID --namespace \"EC2TestCustomMetrics\" --metric-name tcp_connection_on_port_80 --value $TCP_CONN_PORT_80",
									"aws cloudwatch put-metric-data --dimensions Instance=$INSTANCEID --namespace \"EC2TestCustomMetrics\" --metric-name nbr_of_users --value $USERS",
									"aws cloudwatch put-metric-data --dimensions Instance=$INSTANCEID --namespace \"EC2TestCustomMetrics\" --metric-name io_wait --value $IO_WAIT_PERCENT",
									""
								]]},
								"mode" : "000744",
								"owner" : "root",
								"group" : "root"
							},
							"/root/send-psuedo-cloudwatch-metrics.sh" : {
								"content" : { "Fn::Join" : [ "\n", [
									"#!/bin/bash",
									"",
									""
								]]},
								"mode" : "000744",
								"owner" : "root",
								"group" : "root"
							},
							"/etc/cfn/cfn-hup.conf" : {
								"mode" : "000400",
								"owner" : "root",
								"group" : "root",
								"content" : { "Fn::Join" : [ "\n", [
									"[main]",
									{ "Fn::Sub" : "stack=${AWS::StackId}" },
									{ "Fn::Sub" : "region=${AWS::Region} "}
								]]}
							},
							"/etc/cfn/hooks.d/cfn-auto-reloader.conf" : {
								"content" : { "Fn::Join" : [ "\n", [
									"[cfn-auto-reloader-hook]",
									"triggers=post.update",
									"path=Resources.ECSLaunchConfiguration.Metadata.AWS::CloudFormation::Init",
									{ "Fn::Sub" : "action=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSLaunchConfiguration" }
								]]}
							},
							"/etc/awslogs/awscli.conf" : {
								"content" : { "Fn::Join" : [ "\n", [
									"[plugins]",
									"cwlogs = cwlogs",
									"[default]",
									{ "Fn::Sub" : "region = ${AWS::Region}" }
								]]}
							},
							"/etc/awslogs/awslogs.conf" : {
								"content" : { "Fn::Join" : [ "\n", [
									"[general]",
									"state_file = /var/lib/awslogs/agent-state",
									"",
									"[/var/log/dmesg]",
									"file = /var/log/dmesg",
									{ "Fn::Sub" : "log_group_name = ${GlobalPrefix}-${Landscape}-${ECSCluster}" },
									{ "Fn::Sub" : "log_stream_name = /var/log/dmesg" },
									"",
									"[/var/log/messages]",
									"file = /var/log/messages",
									{ "Fn::Sub" : "log_group_name = ${GlobalPrefix}-${Landscape}-${ECSCluster}" },
									{ "Fn::Sub" : "log_stream_name = /var/log/messages" },
									"datetime_format = %b %d %H:%M:%S",
									"",
									"[/var/log/docker]",
									"file = /var/log/docker",
									{ "Fn::Sub" : "log_group_name = ${GlobalPrefix}-${Landscape}-${ECSCluster}-docker" },
									{ "Fn::Sub" : "log_stream_name = /var/log/docker" },
									"datetime_format = %Y-%m-%dT%H:%M:%S.%f",
									"",
									"[/var/log/ecs/ecs-init.log]",
									"file = /var/log/ecs/ecs-init.log.*",
									{ "Fn::Sub" : "log_group_name = ${GlobalPrefix}-${Landscape}-${ECSCluster}-ecs" },
									{ "Fn::Sub" : "log_stream_name = /var/log/ecs/ecs-init.log" },
									"datetime_format = %Y-%m-%dT%H:%M:%SZ",
									"",
									"[/var/log/ecs/ecs-agent.log]",
									"file = /var/log/ecs/ecs-agent.log.*",
									{ "Fn::Sub" : "log_group_name = ${GlobalPrefix}-${Landscape}-${ECSCluster}-ecs" },
									{ "Fn::Sub" : "log_stream_name = /var/log/ecs/ecs-agent.log" },
									"datetime_format = %Y-%m-%dT%H:%M:%SZ",
									"",
									"[/var/log/ecs/audit.log]",
									"file = /var/log/ecs/audit.log.*",
									{ "Fn::Sub" : "log_group_name = ${GlobalPrefix}-${Landscape}-${ECSCluster}-ecs" },
									{ "Fn::Sub" : "log_stream_name = /var/log/ecs/audit.log" },
									"datetime_format = %Y-%m-%dT%H:%M:%SZ"								
								]]}
							},
							"/var/kuali/scripts/s3.download.configs.sh" : {
								"content" : { "Fn::Join" : [ "\n", [
									"#!/bin/bash",
									"",
									"echo \"Downloading all configurations for the container from the s3 bucket\"",
									"[ ! -d /var/kuali/s3 ] && mkdir /var/kuali/s3",
									"cd /var/kuali/s3",
									"aws s3 sync --delete s3://kuali-research-ec2-setup/${LANDSCAPE}/core/ ."
								]]},
								"mode" : "000775",
								"owner" : "root",
								"group" : "root"
							},
							"/var/kuali/scripts/process.env.file.sh" : {
								"content" : { "Fn::Join" : [ "\n", [
									"#!/bin/bash",
									"",
									"# Turn a name=value line into an \"export name=\"value\"\" line",
									"getLineExport() {",
									"  local line=$(echo -n \"$1\" | xargs) # Use xargs to trim the line.",
									"  # Return and empty string if the line is a properties file comment", 
									"  [ \"${line:0:1}\" == \"#\" ] && echo \"\" && exit 0;",
									"  [ -z \"$line\" ] && echo \"\" && exit 0;",
									"  if [ -n \"$(echo $testline | grep -P '\\x22')\" ] ; then", 
									"    echo \"export $line\"",
									"  else",
									"    # Put double quotes around the exported variable value",
									"    echo \"export $(echo $line | sed 's/=/=\"/1')\\\"\"",
									"  fi",
									"}",
									"",
									"# Create a script to export all environment variables in the mounted directory before starting node",
									"if [ ! -f $ENV_FILE_FROM_S3 ] ; then",
									"  echo \"ERROR! MISSING $ENV_FILE_FROM_S3\"",
									"  exit 1",
									"else",
									"  cd $(dirname $ENV_FILE_FROM_S3)",
									"  CORE_HOST=$(curl -s http://169.254.169.254/latest/meta-data/public-hostname)",
									"  rm -f export.sh",
									"  echo \"Creating $(pwd)/export.sh...\"",
									"  while read line ; do",
									"    expline=\"$(getLineExport \"$line\")\" ",
									"    [ -z \"$expline\" ] && continue",
									"    prop=$(echo \"$line\" | cut -f1 -d '=') ",
									"    # Override some of the existing environment variables",
									"    [ \"${prop^^}\" == \"CORE_HOST\" ] && expline=\"export CORE_HOST=${CORE_HOST}\"",
									"    [ \"${prop^^}\" == \"SHIB_HOST\" ] && expline=\"export SHIB_HOST=\"",
									"    [ \"${prop^^}\" == \"ROOT_DIR\" ]  && expline=\"export ROOT_DIR=/var/core-temp\"",
									"    echo \"Setting env var $prop\" ",
									"    echo \"$expline\" >> export.sh",
									"  done < $ENV_FILE_FROM_S3",
									"  # In case the file from s3 originated on a windows file system, remove return carriage chars",
									"  sed -i 's/\\r//g' export.sh",
									"fi",
									"",
									"exit 0"
								]]},
								"mode" : "000775",
								"owner" : "root",
								"group" : "root"
							}
						}
					},
					"01_get_configs_from_s3" : {
						"commands" : {
							"cmd01" : {
								"cwd" : "/var/kuali/scripts",
								"env" : { "LANDSCAPE" : { "Fn::Sub" : "${Landscape}" } },
								"command" : "bash s3.download.configs.sh"
							}
						}
					},
					"02_create_env_exports_file" : {
						"commands" : {
							"cmd01" : {
								"cwd" : "/var/kuali/scripts",
								"env" : { "ENV_FILE_FROM_S3" : "/var/kuali/s3/environment.variables.s3" },
								"command" : "bash process.env.file.sh"
							}
						}
					},
					"03_add_instance_to_cluster" : {
						"commands" : {
							"cmd01" : {
								"command" : { "Fn::Sub" : "echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config" }
							}
						},
						"services" : {
							"sysvinit" : {
								"cfn-hup" : {
									"enabled": "true",
									"ensureRunning" : "true",
									"files" : [
										"/etc/cfn/cfn-hup.conf",
										"/etc/cfn/hooks.d/cfn-auto-reloader.conf"
									]
								},
								"awslogs" : {
									"enabled": "true",
									"ensureRunning" : "true",
									"files" : [
										"/etc/awslogs/awslogs.conf",
										"/etc/awslogs/awscli.conf"
									]
								}
							}
						}             
					},
					"04_start_cron_for_custom_cloudwatch_metrics" : {
						"commands" : {
							"cmd01" : "crontab -u root /root/crontab"
						}
					}
				}
			}
        },
		"ECSRole" : {
		    "Type" : "AWS::IAM::Role",
			"Description" : "This IAM Role is attached to all of the ECS hosts. Add other IAM policy statements here to allow access from your ECS hosts to other AWS services. This role will be used by ALL containers running on the ECS host.",
		    "Properties" : {
				"Path" : "/",
                "RoleName" : { "Fn::Sub" : "${GlobalPrefix}-ECSRole-${Landscape}-${AWS::Region}" },
		        "AssumeRolePolicyDocument" : {
					"Statement" : [{
						"Action" : [ "sts:AssumeRole" ],
						"Effect" : "Allow",
						"Principal" : { "Service" : [ "ec2.amazonaws.com" ] }
					}]
		        },
                "ManagedPolicyArns" : [
					"arn:aws:iam::aws:policy/AmazonEC2RoleforSSM"
				],
                "Policies" : [
					{
						"PolicyName": { "Fn::Sub" : "${GlobalPrefix}-${Landscape}-ecs-service-policy" },
                        "PolicyDocument" : {
							"Statement" : [{
								"Effect" : "Allow",
								"Resource" : "*",
								"Action" : [
									"ecs:CreateCluster",
									"ecs:DeregisterContainerInstance",
									"ecs:DiscoverPollEndpoint",
									"ecs:Poll",
									"ecs:RegisterContainerInstance",
									"ecs:StartTelemetrySession",
									"ecs:Submit*",
									"logs:CreateLogStream",
									"logs:PutLogEvents",
									"ecr:BatchCheckLayerAvailability",
									"ecr:BatchGetImage",
									"ecr:GetDownloadUrlForLayer",
									"ecr:GetAuthorizationToken",
									"ec2messages:AcknowledgeMessage",
									"ec2messages:DeleteMessage",
									"ec2messages:FailMessage",
									"ec2messages:GetEndpoint",
									"ec2messages:GetMessages",
									"ec2messages:SendReply",
									"cloudwatch:PutMetricData",
									"cloudwatch:GetMetricStatistics",
									"cloudwatch:ListMetrics",
									"ec2:DescribeInstanceStatus",
									"ec2:DescribeTags",
									"ds:CreateComputer",
									"ds:DescribeDirectories",
									"logs:CreateLogGroup",
									"logs:CreateLogStream",
									"logs:DescribeLogGroups",
									"logs:DescribeLogStreams",
									"logs:PutLogEvents",
									"s3:PutObject",
									"s3:GetObject",
									"s3:AbortMultipartUpload",
									"s3:ListMultipartUploadParts",
									"s3:ListBucket",
									"s3:ListBucketMultipartUploads"
								]
							}]
						}
					}
				]
		    }
		},
		"ECSInstanceProfile" : {
			"Type": "AWS::IAM::InstanceProfile",
            "Properties" : {
				"InstanceProfileName" : "Profile-for-ECS-Role",
                "Path" : "/",
                "Roles" : [ { "Ref" : "ECSRole" } ]
			}
		},
		"ECSContainerInstanceAutoScalingRole" : {
		    "Type" : "AWS::IAM::Role",
		    "Properties" : {
				"Path" : "/",
                "RoleName" : { "Fn::Sub" : "${GlobalPrefix}-ECS-Autoscale-Role-${Landscape}-${AWS::Region}" },
		        "AssumeRolePolicyDocument" : {
					"Version" : "2012-10-17",
					"Statement" : [{
						"Action" : [ "sts:AssumeRole" ],
						"Effect" : "Allow",
						"Principal" : { "Service" : [ "application-autoscaling.amazonaws.com" ] }
					}]
		        },
                "Policies" : [
					{
						"PolicyName": { "Fn::Sub" : "${GlobalPrefix}-${Landscape}-ecs-autoscale-service-policy" },
                        "PolicyDocument" : {
							"Statement" : [{
								"Effect" : "Allow",
								"Resource" : "*",
								"Action" : [
									"application-autoscaling:*",
									"cloudwatch:DescribeAlarms",
									"cloudwatch:PutMetricAlarm",
									"ecs:DescribeServices",
									"ecs:UpdateService"
								]
							}]
						}
					}
				]
		    }
		}
	},

	"Outputs" : {
		"Cluster" : {
			"Description" : "A reference to the ECS cluster",
		    "Value" : { "Ref" : "ECSCluster" }
		},
        "ECSContainerInstanceAutoScalingRole" : {
			"Description" : "A reference to ECS service auto scaling role",
            "Value" : {"Fn::GetAtt" : [ "ECSContainerInstanceAutoScalingRole", "Arn"]}
        },
        "ECSContainerInstanceAutoScalingGroupName" : {
			"Description" : "A reference to ECS AutoScaling Group Name",
            "Value" : { "Ref" : "ECSContainerInstanceAutoScalingGroup" }
        }
	}
}
