{
	"AWSTemplateFormatVersion" : "2010-09-09",

	"Description" : "Deploys an ECS cluster to the specified VPC and subnets using an auto scaling group. ",

	"Parameters" : {
		"Landscape" : {
		  "Description": "Specify which landscape to build into the VPC",
		  "Type": "String",
		  "AllowedValues" : [ "sb", "ci", "qa", "stg", "prod" ],
		  "ConstraintDescription" : "This parameter is restricted to the following values: sb, ci, qa, stg, prod",
		  "Default" : "sb"
		},
        "GlobalPrefix" : {
		    "Type" : "String",
			"Description": "A common value that all resources in this template will prefix to their name to establish a bundling through naming convention. If a nested stack, this will most likely be the name of the top-most stack.",
			"Default" : "ECS-test"
        },
        "vpcid" : {
            "Type" : "AWS::EC2::VPC::Id",
            "Description" : "The id of the vpc this is a subnet of."
        },
        "InstanceType" : {
            "Type" : "String",
			"Description" : "What type of EC2 instance should be used for ECS hosting?",
            "AllowedValues" : [
				"t2.medium", "t2.large", "t2.xlarge",
				"m4.large", "m4.xlarge", "m4.2xlarge",
				"m5.large", "m5.xlarge", "m5.2xlarge"
			],
            "ConstraintDescription" : "Specified instance type is not within selection list.",
            "Default" : "m4.large"
        },
        "ClusterSize" : {
            "Type" : "Number",
            "Description" : "How many EC2 instances are to be initially deployed as ECS hosts?",
            "AllowedValues" : [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ],
			"ConstraintDescription" : "Cluster size is limited between 1 and 10 instances.",
            "Default" : "2"
        },
        "Subnets" : {
            "Type" : "List<AWS::EC2::Subnet::Id>",
            "Description" : "The subnets this cluster should span."
        },
        "SecurityGroup" : {
            "Type" : "AWS::EC2::SecurityGroup::Id",
            "Description" : "The security group to use for ECS cluster hosts."
        }
	},
	
    "Metadata" : {
		"EC2" : { 
			"image_name" : "amzn-ami-2018.03.a-amazon-ecs-optimized" ,
			"os" : "Amazon Linux",
			"ecs_runtime_version" : "Docker version 17.12.1-ce",
			"ecs_agent_version" : "1.18.0",
			"NOTES" : {"Fn::Join" : [ "\n", [
				"The mappings included in this template are for the latest ECS optimized AMIs as of June 2018.",
				"They only include those AMIs for US regions.",
				"To query for the latest AMI per region, use the following command in the aws CLI:",
				"aws ssm get-parameters --names /aws/service/ecs/optimized-ami/amazon-linux/recommended/image_id --region [REGION]",
				"where REGION is us-east-1, us-west-2, etc."
			]]}
		},
        "AUTO-SCALING" : {
			"NOTES" : { "Fn::Join" : [ "\n", [
				"In this template we define EC2 auto-scaling as distinct from application auto-scaling employed by the service(s) for ECS.",
				"The difference is that EC2 auto-scaling uses properties like MinSize, MaxSize, DesiredCapacity, etc. to refer to the number",
				"of EC2 instances need to run in order to meet targets for metric thresholds.",
				"ECS auto-scaling uses these properties to refer to docker containers (tasks) and how many of them should be running across",
				"the ECS cluster (can span one or more EC2 instances) to meet targets for metric thresholds.",
				"Combined, these two auto-scaling types define the overall auto-scaling strategy. This implies a certain amount of orchestration",
				"to make sure the two types collaborate with each other instead of clash.",
				"SEE: https://www.reddit.com/r/aws/comments/5swd80/ec2_vs_ecs_autoscaling_question/"
			]]}
		},
		"AUTO_SCALING-GROUP" : {
			"NOTES" : {"Fn::Join" : [ "\n", [
				"The ECSAutoScalingGroup resource will not go into a CREATE_COMPLETE state until enough EC2 instances are heard back from to say they are running.",
				"The userdata defined to run on EC2 startup will call the cfn-signal function that comes packaged in the aws optimized",
				"ami to signal that the instance is running. We are requiring that a minimum of 2 such signals are received by setting",
				"the ECSAutoScalingGroup.CreationPolicy.ResourceSignal.Count property. Currently the signal is sent upon startup, but",
				"it could be made contingent on further conditionas written into the EC2 userdata, like a test that a task(s) is running",
				"must also succeed."
			]]}
		}
	},

    "Mappings" : {
		"RegionMap" : {
			"us-east-1": { "AMI": "ami-5253c32d" },
			"us-east-2": { "AMI": "ami-956e52f0" },
			"us-west-1": { "AMI": "ami-6b81980b" },
			"us-west-2": { "AMI": "ami-d2f489aa" }
		},
		"sshKeys" : {
			"key1" : {
				"user": "wrh",
				"public": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCxXNWjzJ4zYiIW0MW88x2rkKxEM77DPcS19WPLzYoDfakoHrvhzhKN2rCB86zg9HJ9n2HhzLd1im43+I9fsYgawS3QY/FL6kPosF9bm56+mwYU6AlWV9J82QJyRPgMAySDOkXY5DLKPI5os0kVr9nqMVdsWc0Z4hsJI8OpR1mVnbbnoKVQku1ao24T2kOneqtFDJunNMUuBannW9B51Gs+UIjk/TVTwzFPUJ2HYPhD1O1vXeKtojsQw4SvtGJlNv/MWJqH9t35KjOjuwSCdBOCZni9+qKKrNi3ZDW9t9HtQ7lh8SNhljP29m116rzvK50QoMqZ/XIJAnNRmqDXd4Id"
			}
		}
	},

	"Resources" : {

		"Utils" : {
		    "Type" : "AWS::CloudFormation::Stack",
		    "Properties" : {
		        "TemplateURL" : "https://s3.amazonaws.com/kuali-research-ec2-setup/ecs/cloudformation/utils.template",
                "Parameters" : {
					"GlobalPrefix": { "Ref" : "GlobalPrefix" },
					"Landscape": { "Ref" : "Landscape" }
				}
		    }
		},
				
        "ClusterSizeParms" : {
            "Type" : "Custom::Functions",
            "Properties" : {
				"ServiceToken" : {"Fn::GetAtt" : [ "Utils", "Outputs.HelperFunction.Arn"]},
				"task" : "cluster-size",
                "parm1" : { "Ref" : "ClusterSize" }
			}
        },
	
        "ECSCluster" : {
            "Type" : "AWS::ECS::Cluster",
            "Properties" : {
				"ClusterName" : {"Fn::Join" : [ "-", [ { "Ref" : "GlobalPrefix" }, "ecs-cluster"] ]}
            }
        },
		
        "ECSAutoScalingGroup" : {
            "Type" : "AWS::AutoScaling::AutoScalingGroup",
            "Properties" : {
				"VPCZoneIdentifier" : { "Ref" : "Subnets" },
                "LaunchConfigurationName" : { "Ref" : "ECSLaunchConfiguration" },
                "MaxSize" : {"Fn::GetAtt" : [ "ClusterSizeParms", "maxSize"]},
                "MinSize" : {"Fn::GetAtt" : [ "ClusterSizeParms", "minSize"]},
                "DesiredCapacity" : { "Ref" : "ClusterSize" },
                "Tags" : [{
					"Key" : "Name",
                    "Value" : {"Fn::Join" : [ "-", [ { "Ref" : "GlobalPrefix" }, "ecs-host", { "Ref" : "Landscape" } ] ]},
                    "PropagateAtLaunch" : true
				}]
            },
            "CreationPolicy" : {
				"ResourceSignal" : {
					"Count" : "2",
                    "Timeout" : "PT5M"
				}
			},
            "UpdatePolicy" : {
				"AutoScalingRollingUpdate": {
					"MinInstancesInService" : "1",
					"MaxBatchSize" : "1",
					"WaitOnResourceSignals" : "true",
					"PauseTime" : "PT10M",
					"SuspendProcesses": [
						"HealthCheck",
						"ReplaceUnhealthy",
						"AZRebalance",
						"AlarmNotification",
						"ScheduledActions"
					]
				}
			}
        },
        "ECSLaunchConfiguration" : {
            "Type" : "AWS::AutoScaling::LaunchConfiguration",
            "Properties" : {
				"ImageId" : {"Fn::FindInMap" : [ "RegionMap" , { "Ref" : "AWS::Region" }, "AMI"] },
                "InstanceType" : { "Ref" : "InstanceType" },
                "SecurityGroups" : [ { "Ref" : "SecurityGroup" } ],
                "IamInstanceProfile" : { "Ref" : "ECSInstanceProfile" },
                "UserData" : { "Fn::Base64" : { "Fn::Join" : [ "\n", [
					"#!/bin/bash",
					"yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm",
					"yum install -y aws-cfn-bootstrap",
					"",
					"# NOTE: Creating users here and not in Metadata.AWS::CloudFormation::Init.config.users due to restrictions: ",
					"# \"Users are created as non-interactive system users with a shell of /sbin/nologin. This is by design and cannot be modified.\"",
					"users=(wrh mukadder dhaywood mkousheh)",
					"for user in ${users[@]}; do",
					"   adduser -m $user && \\",
					"   usermod -aG root $user && \\",
					"   usermod -aG docker $user && \\",
					"   mkdir /home/$user/.ssh && \\",
					"   chmod 700 /home/$user/.ssh",
					"done",
					"",
					"# Implement all the metadata in AWS::CloudFormation::Init",
					"/opt/aws/bin/cfn-init",
					"   -v",
					{ "Fn::Sub" : "   --region ${AWS::Region}" },
					{ "Fn::Sub" : "   --stack ${AWS::StackName}" },
					"   --resource ECSLaunchConfiguration",
					"",
					"# Now that all initialization is done signal success",
					"/opt/aws/bin/cfn-signal",
					"   -e $?",
					{ "Fn::Sub" : "   --region ${AWS::Region}" },
					{ "Fn::Sub" : "   --stack ${AWS::StackName}" },
					"   --resource ECSAutoScalingGroup"
				]]}}
            },
            "Metadata" : {
				"COMMENTS" : {"Fn::Join" : [ "\n", [
					"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-init.html", 
					"1) If your template calls the cfn-init script, the script looks for resource metadata rooted in the AWS::CloudFormation::Init metadata key.",
					"2) The cfn-hup helper is a daemon that detects changes in resource metadata and runs user-specified actions when a change is detected.",
					"   This allows you to make configuration updates on your running Amazon EC2 instances through the UpdateStack API action",
					"3) The user actions that the cfn-hup daemon calls periodically are defined in the hooks.conf configuration file.",
					"   To support composition of several applications deploying change notification hooks, cfn-hup supports a directory named hooks.d that ",
					"   is located in the hooks configuration directory. You can place one or more additional hooks configuration files in the hooks.d directory.",
					"   The additional hooks files must use the same layout as the hooks.conf file.",
					"4) services.sysvinit.servicename.files: A list of files. If cfn-init changes one directly via the files block, this service will be restarted.",
					"5) The cfn-init helper script processes these configuration sections in the following order: packages, groups, users, sources, files, commands, ",
					"   and then services. If you require a different order, separate your sections into different config keys, and then use a configset that ",
					"   specifies the order in which the config keys should be processed."
				]]},
				"AWS::CloudFormation::Init" : {
					"config" : {
						"packages" : {
							"yum" : {
								"awslogs" : []
							}
						},
						"groups" : {
						
						},
						"users" : {
						
						},
						"sources" : {
						
						},
						"files" : {
							"/etc/cfn/cfn-hup.conf" : {
								"mode" : "000400",
								"owner" : "root",
								"group" : "root",
								"content" : { "Fn::Join" : [ "\n", [
									"[main]",
									{ "Fn::Sub" : "stack=${AWS::StackId}" },
									{ "Fn::Sub" : "region=${AWS::Region} "}
								]]}
							},
							"/etc/cfn/hooks.d/cfn-auto-reloader.conf" : {
								"content" : { "Fn::Join" : [ "\n", [
									"[cfn-auto-reloader-hook]",
									"triggers=post.update",
									"path=Resources.ECSLaunchConfiguration.Metadata.AWS::CloudFormation::Init",
									{ "Fn::Sub" : "action=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSLaunchConfiguration" }
								]]}
							},
							"/etc/awslogs/awscli.conf" : {
								"content" : { "Fn::Join" : [ "\n", [
									"[plugins]",
									"cwlogs = cwlogs",
									"[default]",
									{ "Fn::Sub" : "region = ${AWS::Region}" }
								]]}
							},
							"/etc/awslogs/awslogs.conf" : {
								"content" : { "Fn::Join" : [ "\n", [
									"[general]",
									"state_file = /var/lib/awslogs/agent-state",
									"",
									"[/var/log/dmesg]",
									"file = /var/log/dmesg",
									{ "Fn::Sub" : "log_group_name = ${ECSCluster}-/var/log/dmesg" },
									{ "Fn::Sub" : "log_stream_name = ${ECSCluster}" },
									"",
									"[/var/log/messages]",
									"file = /var/log/messages",
									{ "Fn::Sub" : "log_group_name = ${ECSCluster}-/var/log/messages" },
									{ "Fn::Sub" : "log_stream_name = ${ECSCluster}" },
									"datetime_format = %b %d %H:%M:%S",
									"",
									"[/var/log/docker]",
									"file = /var/log/docker",
									{ "Fn::Sub" : "log_group_name = ${ECSCluster}-/var/log/docker" },
									{ "Fn::Sub" : "log_stream_name = ${ECSCluster}" },
									"datetime_format = %Y-%m-%dT%H:%M:%S.%f",
									"",
									"[/var/log/ecs/ecs-init.log]",
									"file = /var/log/ecs/ecs-init.log.*",
									{ "Fn::Sub" : "log_group_name = ${ECSCluster}-/var/log/ecs/ecs-init.log" },
									{ "Fn::Sub" : "log_stream_name = ${ECSCluster}" },
									"datetime_format = %Y-%m-%dT%H:%M:%SZ",
									"",
									"[/var/log/ecs/ecs-agent.log]",
									"file = /var/log/ecs/ecs-agent.log.*",
									{ "Fn::Sub" : "log_group_name = ${ECSCluster}-/var/log/ecs/ecs-agent.log" },
									{ "Fn::Sub" : "log_stream_name = ${ECSCluster}" },
									"datetime_format = %Y-%m-%dT%H:%M:%SZ",
									"",
									"[/var/log/ecs/audit.log]",
									"file = /var/log/ecs/audit.log.*",
									{ "Fn::Sub" : "log_group_name = ${ECSCluster}-/var/log/ecs/audit.log" },
									{ "Fn::Sub" : "log_stream_name = ${ECSCluster}" },
									"datetime_format = %Y-%m-%dT%H:%M:%SZ"								
								]]}
							},
							"/home/wrh/.ssh/authorized_keys" : {
								"mode" : "000600",
								"owner" : "wrh",
								"group" : "wrh",
								"content": {"Fn::Join" : [ "", [ "ssh-rsa ",
									"AAAAB3NzaC1yc2EAAAADAQABAAABAQCxXNWjzJ4zYiIW0MW88x2rkKxEM77DPcS19WPLzYoDfakoHrvhzhKN2rCB86zg9HJ9n2Hh",
									"zLd1im43+I9fsYgawS3QY/FL6kPosF9bm56+mwYU6AlWV9J82QJyRPgMAySDOkXY5DLKPI5os0kVr9nqMVdsWc0Z4hsJI8OpR1mV",									"nbbnoKVQku1ao24T2kOneqtFDJunNMUuBannW9B51Gs+UIjk/TVTwzFPUJ2HYPhD1O1vXeKtojsQw4SvtGJlNv/MWJqH9t35KjOj",									"uwSCdBOCZni9+qKKrNi3ZDW9t9HtQ7lh8SNhljP29m116rzvK50QoMqZ/XIJAnNRmqDXd4Id"
								]]}
							},
							"/home/mkousheh/.ssh/authorized_keys" : {
								"mode" : "000600",
								"owner" : "mkousheh",
								"group" : "mkousheh",
								"content": {"Fn::Join" : [ "", [ "ssh-rsa ",
									"AAAAB3NzaC1yc2EAAAADAQABAAABAQCzgIDqcIpJ0+uNYWGWciep/vnfJ6uLGuHOfLYsYm1JFoSNNS3PTirK6RIBkJocGvcM5/ea",
									"pLtN9V55uhCrfolBxRvYSSNLBCeH3KdgHTSfSkN71NjTisPz5luyrFFjFgFq4jNr8OSuBFzjasfBeSVIR9dXB/AxjauIPfY6TCVi",
									"9j0hTjhsoIuup+gGayD0pFuj95zZCzZmnpci6Q2j+rQ4xDXZMih/cyr9rkpTASmFuAPdJ8j05YcyBnTD5BWGkLb6wbOCsOjr641R",
									"aKLw4FMeSA4kI315fE5Nh0ffYrgk7rnOzQkSfnIcBPagVHyjmSnObcP1tJSI/07+iwZMASct"
								]]}
							},
							"/home/mukadder/.ssh/authorized_keys" : {
								"mode" : "000600",
								"owner" : "mukadder",
								"group" : "mukadder",
								"content": {"Fn::Join" : [ "", [ "ssh-rsa ",
									"AAAAB3NzaC1yc2EAAAADAQABAAABAQCwAc8aK5xqcgpCxdGa+2g2EaYWE1N0Xv9qJw9TW2znj4HxqVIEBk4jC7b1lsJbF1NJHaPG",
									"T2o0YaDX/xoSaVJ1pz03ai08mm71nuQteZ/LoXDYYM9EOM6orVmmhI6tyrqeJQsK6oOy3QubRVvfyEkwn18Rp4qun3IlZrtSCd9k",
									"6O+8LkofX45e/PbnfUzKJHI2XCoiJcSrdSQ7vzOxBPIIRY9iiuZX0KnlTAgaohWRvXAOLxFXrrxz8z+prCfRacrpKsnEllMYVuzd",
									"xqh3nDuXfML6ikcwJfoMujU6umepqwgJaF8hpg2utYf/qddr9PzktuUtEaB47F1QboBGxmMP"
								]]}
							},
							"/home/dhaywood/.ssh/authorized_keys" : {
								"mode" : "000600",
								"owner" : "dhaywood",
								"group" : "dhaywood",
								"content": {"Fn::Join" : [ "", [ "ssh-rsa ",
									"AAAAB3NzaC1yc2EAAAADAQABAAABAQDTjbU47P9X0vHP4Ubre625O6/KNK0+9nN97j8U9y/Q3UdviYibejGmOPaD5n1sYcntAShO",
									"D4bGHpriZtITuMxeu+a5LnJqSWHxOUO/IE74pVHqLp6HlRueDSMenmCZL1llBtPd8bYYXfilQ0AN7ulkG0R5s73wfgAiYAQeeY0V",
									"0KFt0KaeCoUCNQmJm1LudSxX167o3ODZaXIWFS8ryjKP5JLR8t3KQIHzo7yQA85EVjTtKzHIEOGahAt+J0RwhyrXYmpK5gYVwdCr",
									"dh0uttAz8/+f5Phx7qyVCz1/tQqQ4wVYmqxC/z5+XNd2lOGSkFeuQW30dWanlWmBKWMPHIg7"
								]]}
							}
						},
						"commands" : {
							"01_add_instance_to_cluster" : {
								"command" : { "Fn::Sub" : "echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config" }
							}
						},
						"services" : {
							"sysvinit" : {
								"cfn-hup" : {
									"enabled": "true",
									"ensureRunning" : "true",
									"files" : [
										"/etc/cfn/cfn-hup.conf",
										"/etc/cfn/hooks.d/cfn-auto-reloader.conf"
									]
								},
								"awslogs" : {
									"enabled": "true",
									"ensureRunning" : "true",
									"files" : [
										"/etc/awslogs/awslogs.conf",
										"/etc/awslogs/awscli.conf"
									]
								}
							}
						}             
					}
				}
			}
        },
		"ECSRole" : {
		    "Type" : "AWS::IAM::Role",
		    "Properties" : {
				"Path" : "/",
                "RoleName" : { "Fn::Sub" : "${GlobalPrefix}-ECSRole-${Landscape}-${AWS::Region}" },
		        "AssumeRolePolicyDocument" : {
					"Statement" : [{
						"Action" : [ "sts:AssumeRole" ],
						"Effect" : "Allow",
						"Principal" : { "Service" : [ "ec2.amazonaws.com" ] }
					}]
		        },
                "Policies" : [
					{
						"PolicyName": { "Fn::Sub" : "${GlobalPrefix}-${Landscape}-ecs-service-policy" },
                        "PolicyDocument" : {
							"Statement" : [{
								"Effect" : "Allow",
								"Resource" : "*",
								"Action" : [
									"ecs:CreateCluster",
									"ecs:DeregisterContainerInstance",
									"ecs:DiscoverPollEndpoint",
									"ecs:Poll",
									"ecs:RegisterContainerInstance",
									"ecs:StartTelemetrySession",
									"ecs:Submit*",
									"logs:CreateLogStream",
									"logs:PutLogEvents",
									"ecr:BatchCheckLayerAvailability",
									"ecr:BatchGetImage",
									"ecr:GetDownloadUrlForLayer",
									"ecr:GetAuthorizationToken",
									"ssm:DescribeAssociation",
									"ssm:GetDeployablePatchSnapshotForInstance",
									"ssm:GetDocument",
									"ssm:GetManifest",
									"ssm:GetParameters",
									"ssm:ListAssociations",
									"ssm:ListInstanceAssociations",
									"ssm:PutInventory",
									"ssm:PutComplianceItems",
									"ssm:PutConfigurePackageResult",
									"ssm:UpdateAssociationStatus",
									"ssm:UpdateInstanceAssociationStatus",
									"ssm:UpdateInstanceInformation",
									"ec2messages:AcknowledgeMessage",
									"ec2messages:DeleteMessage",
									"ec2messages:FailMessage",
									"ec2messages:GetEndpoint",
									"ec2messages:GetMessages",
									"ec2messages:SendReply",
									"cloudwatch:PutMetricData",
									"ec2:DescribeInstanceStatus",
									"ds:CreateComputer",
									"ds:DescribeDirectories",
									"logs:CreateLogGroup",
									"logs:CreateLogStream",
									"logs:DescribeLogGroups",
									"logs:DescribeLogStreams",
									"logs:PutLogEvents",
									"s3:PutObject",
									"s3:GetObject",
									"s3:AbortMultipartUpload",
									"s3:ListMultipartUploadParts",
									"s3:ListBucket",
									"s3:ListBucketMultipartUploads"
								]
							}]
						}
					}
				]
		    }
		},
		"ECSInstanceProfile" : {
			"Type": "AWS::IAM::InstanceProfile",
            "Properties" : {
				"InstanceProfileName" : "Profile-for-ECS-Role",
                "Path" : "/",
                "Roles" : [ { "Ref" : "ECSRole" } ]
			}
		},
		"ECSServiceAutoScalingRole" : {
		    "Type" : "AWS::IAM::Role",
		    "Properties" : {
				"Path" : "/",
                "RoleName" : { "Fn::Sub" : "${GlobalPrefix}-ECS-Autoscale-Role-${Landscape}-${AWS::Region}" },
		        "AssumeRolePolicyDocument" : {
					"Version" : "2012-10-17",
					"Statement" : [{
						"Action" : [ "sts:AssumeRole" ],
						"Effect" : "Allow",
						"Principal" : { "Service" : [ "application-autoscaling.amazonaws.com" ] }
					}]
		        },
                "Policies" : [
					{
						"PolicyName": { "Fn::Sub" : "${GlobalPrefix}-${Landscape}-ecs-autoscale-service-policy" },
                        "PolicyDocument" : {
							"Statement" : [{
								"Effect" : "Allow",
								"Resource" : "*",
								"Action" : [
									"application-autoscaling:*",
									"cloudwatch:DescribeAlarms",
									"cloudwatch:PutMetricAlarm",
									"ecs:DescribeServices",
									"ecs:UpdateService"
								]
							}]
						}
					}
				]
		    }
		}
	},

	"Outputs" : {
		"Cluster" : {
			"Description" : "A reference to the ECS cluster",
		    "Value" : { "Ref" : "ECSCluster" }
		},
        "ECSServiceAutoScalingRole" : {
			"Description" : "A reference to ECS service auto scaling role",
            "Value" : {"Fn::GetAtt" : [ "ECSServiceAutoScalingRole", "Arn"]}
        },
        "ECSAutoScalingGroupName" : {
			"Description" : "A reference to ECS AutoScaling Group Name",
            "Value" : { "Ref" : "ECSAutoScalingGroup" }
        }
	}
}
