{
	"AWSTemplateFormatVersion" : "2010-09-09",

	"Description" : "Deploys an ECS cluster to the specified VPC and subnets using an auto scaling group. ",

	"Parameters" : {
		"Landscape" : {
		  "Description": "Specify which landscape to build into the VPC",
		  "Type": "String",
		  "AllowedValues" : [ "sb", "ci", "qa", "stg", "prod" ],
		  "ConstraintDescription" : "This parameter is restricted to the following values: sb, ci, qa, stg, prod",
		  "Default" : "sb"
		},
        "GlobalPrefix" : {
		    "Type" : "String",
			"Description": "A common value that all resources in this template will prefix to their name to establish a bundling through naming convention. If a nested stack, this will most likely be the name of the top-most stack.",
			"Default" : "ECS-test"
        },
        "vpcid" : {
            "Type" : "AWS::EC2::VPC::Id",
            "Description" : "The id of the vpc this is a subnet of."
        },
        "InstanceType" : {
            "Type" : "String",
			"Description" : "What type of EC2 instance should be used for ECS hosting?",
            "AllowedValues" : [
				"t2.medium", "t2.large", "t2.xlarge",
				"m4.large", "m4.xlarge", "m4.2xlarge",
				"m5.large", "m5.xlarge", "m5.2xlarge"
			],
            "ConstraintDescription" : "Specified instance type is not within selection list.",
            "Default" : "m4.large"
        },
        "ClusterSize" : {
            "Type" : "Number",
            "Description" : "How many EC2 instances are to be initially deployed as ECS hosts?",
            "AllowedValues" : [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ],
			"ConstraintDescription" : "Cluster size is limited between 1 and 10 instances.",
            "Default" : "2"
        },
        "Subnets" : {
            "Type" : "List<AWS::EC2::Subnet::Id>",
            "Description" : "The subnets this cluster should span."
        },
        "SecurityGroup" : {
            "Type" : "AWS::EC2::SecurityGroup::Id",
            "Description" : "The security group to use for ECS cluster hosts."
        }
	},
	
    "Metadata" : {
		"EC2" : { 
			"image_name" : "amzn-ami-2018.03.a-amazon-ecs-optimized" ,
			"os" : "Amazon Linux",
			"ecs_runtime_version" : "Docker version 17.12.1-ce",
			"ecs_agent_version" : "1.18.0",
			"NOTES" : {"Fn::Join" : [ " ", [
				"The mappings included in this template are for the latest ECS optimized AMIs as of June 2018.",
				"They only include those AMIs for US regions.",
				"To query for the latest AMI per region, use the following command in the aws CLI:",
				"aws ssm get-parameters --names /aws/service/ecs/optimized-ami/amazon-linux/recommended/image_id --region [REGION]",
				"where REGION is us-east-1, us-west-2, etc."
			]]}
		},
        "AUTO-SCALING" : {
			"NOTES" : { "Fn::Join" : [ " ", [
				"In this template we define EC2 auto-scaling as distinct from application auto-scaling employed by the service(s) for ECS.",
				"The difference is that EC2 auto-scaling uses properties like MinSize, MaxSize, DesiredCapacity, etc. to refer to the number",
				"of EC2 instances need to run in order to meet targets for metric thresholds.",
				"ECS auto-scaling uses these properties to refer to docker containers (tasks) and how many of them should be running across",
				"the ECS cluster (can span one or more EC2 instances) to meet targets for metric thresholds.",
				"Combined, these two auto-scaling types define the overall auto-scaling strategy. This implies a certain amount of orchestration",
				"to make sure the two types collaborate with each other instead of clash.",
				"SEE: https://www.reddit.com/r/aws/comments/5swd80/ec2_vs_ecs_autoscaling_question/"
			]]}
		},
		"AUTO_SCALING-GROUP" : {
			"NOTES" : {"Fn::Join" : [ " ", [
				"The ECSAutoScalingGroup resource will not go into a CREATE_COMPLETE state until enough EC2 instances are heard back from to say they are running.",
				"The userdata defined to run on EC2 startup will call the cfn-signal function that comes packaged in the aws optimized",
				"ami to signal that the instance is running. We are requiring that a minimum of 2 such signals are received by setting",
				"the ECSAutoScalingGroup.CreationPolicy.ResourceSignal.Count property. Currently the signal is sent upon startup, but",
				"it could be made contingent on further conditionas written into the EC2 userdata, like a test that a task(s) is running",
				"must also succeed."
			]]}
		}
	},

    "Mappings" : {
		"RegionMap" : {
			"us-east-1": { "AMI": "ami-5253c32d" },
			"us-east-2": { "AMI": "ami-956e52f0" },
			"us-west-1": { "AMI": "ami-6b81980b" },
			"us-west-2": { "AMI": "ami-d2f489aa" }
		}
	},

	"Resources" : {

		"Utils" : {
		    "Type" : "AWS::CloudFormation::Stack",
		    "Properties" : {
		        "TemplateURL" : "https://s3.amazonaws.com/kuali-research-ec2-setup/ecs/cloudformation/Utils.template",
                "Parameters" : {
					"GlobalPrefix": { "Ref" : "GlobalPrefix" },
					"Landscape": { "Ref" : "Landscape" }
				}
		    }
		},
				
        "ClusterSizeParms" : {
            "Type" : "Custom::Functions",
            "Properties" : {
				"ServiceToken" : {"Fn::GetAtt" : [ "Utils", "Outputs.HelperFunction.Arn"]},
				"task" : "cluster-size",
                "parm1" : { "Ref" : "ClusterSize" }
			}
        },
	
        "ECSCluster" : {
            "Type" : "AWS::ECS::Cluster",
            "Properties" : {
				"ClusterName" : {"Fn::Join" : [ "-", [ { "Ref" : "GlobalPrefix" }, "ecs-cluster"] ]}
            }
        },
		
        "ECSAutoScalingGroup" : {
            "Type" : "AWS::AutoScaling::AutoScalingGroup",
            "Properties" : {
				"VPCZoneIdentifier" : { "Ref" : "Subnets" },
                "LaunchConfigurationName" : { "Ref" : "ECSLaunchConfiguration" },
                "MaxSize" : {"Fn::GetAtt" : [ "ClusterSizeParms", "maxSize"]},
                "MinSize" : {"Fn::GetAtt" : [ "ClusterSizeParms", "minSize"]},
                "DesiredCapacity" : { "Ref" : "ClusterSize" },
                "Tags" : [{
					"Key" : "Name",
                    "Value" : {"Fn::Join" : [ "-", [ { "Ref" : "GlobalPrefix" }, "ecs-host", { "Ref" : "Landscape" } ] ]},
                    "PropagateAtLaunch" : true
				}]
            },
            "CreationPolicy" : {
				"ResourceSignal" : {
					"Count" : "2",
                    "Timeout" : "PT5M"
				}
			},
            "UpdatePolicy" : {
				
			}
        },

        "ECSLaunchConfiguration" : {
            "Type" : "AWS::AutoScaling::LaunchConfiguration",
            "Properties" : {
				
            }
        }
	},

	"Outputs" : {
    
	}
}
