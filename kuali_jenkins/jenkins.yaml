AWSTemplateFormatVersion: 2010-09-09


Description: >
  Create a single ec2 instance that runs a jenkins server for the building and deploying of kuali modules and cloudformation stacks


Parameters:

  GlobalTag:
    Type: String
    Description: >
      A common value that all resources in this template will have prefixed to
      their name and attached as a tag to establish a bundling through naming convention.
    Default: kuali-mongo

  TemplateBucketName:
    Type: String
    Description: The S3 bucket kuali research cloudformation templates, config files, keys, etc. are stored
    Default: kuali-conf
    
  Service:
    Description: Service catalog name
    Type: String
    Default: research-administration

  Function:
    Description: The Function within the Service
    Type: String
    Default: kuali

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: The id of the vpc to deploy to.

  JenkinsSubnet:
    Type: AWS::EC2::Subnet::Id
    Description: Id of the private subnet that the jenkins ec2 instance is deployed to.
    Default: empty

  JavaVersion:
    Type: String
    Description: Java 8 or Java 11 (earlier versions of jenkins need java 8)
    Default: 11
    AllowedValues:
    - 8
    - 11

  # https://docs.aws.amazon.com/AmazonECS/latest/developerguide/retrieve-ecs-optimized_AMI.html
  EC2AMI:
    Description: AMI ID
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
    # Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id

  EC2InstanceType:
    Type: String
    Description: What type of EC2 instance should be used for hosting?
    AllowedValues:
    - t3.small
    - t3.medium
    - t3.large
    - t3.xlarge
    - m4.large
    - m4.xlarge
    - m5.large
    - m5.xlarge
    - c5.large
    - c5.xlarge
    ConstraintDescription: Specified instance type is not within selection list.
    Default: m5.xlarge

  JenkinsAdminPassword: 
    Type: String
    Description: The password of the Jenkins initial administrator
    NoEcho: true
    Default: empty

Conditions:
  CreateAdminSecret: !Not [!Equals [!Ref JenkinsAdminPassword, empty]]

Resources:

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VpcId
      GroupDescription: !Sub Security group for jenkins ec2 instance.
      GroupName: !Sub ${GlobalTag}-ec2-security-group
      SecurityGroupIngress:
      - Description: Allows inbound http access
        IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - Description: Allows inbound http access
        IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        CidrIp: 0.0.0.0/0
      - Description: Allows inbound https access
        IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${GlobalTag}-jenkins-security-group
        - Key: Service
          Value: !Ref Service
        - Key: Function
          Value: !Ref Function

  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      RoleName: !Sub ${GlobalTag}-ec2-role
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
      - PolicyName:
          !Sub ${GlobalTag}-read-ec2-tags
        PolicyDocument:
          Statement:
          - Effect: Allow
            Resource: "*"
            Action:
            - ec2:DescribeTags
      - PolicyName:
          !Sub ${GlobalTag}-s3-access
        PolicyDocument:
          Statement:
          - Effect: Allow
            Resource:
            - arn:aws:s3:::kuali-*
            # - arn:aws:s3:::kuali-conf*
            # - arn:aws:s3:::kuali-docker-run-stdout*
            Action: "*"
      - PolicyName:
          !Sub ${GlobalTag}-read-secrets
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - secretsmanager:ListSecrets
            - secretsmanager:GetResourcePolicy
            - secretsmanager:GetSecretValue
            - secretsmanager:DescribeSecret
            - secretsmanager:ListSecretVersionIds
            Resource:
            - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:kuali/*/*
      - PolicyName:
          !Sub ${GlobalTag}-cloudformation
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: "*"
            Resource: 
            - arn:aws:cloudformation:*:*:stack/kuali*/*
          - Effect: Allow
            Action: 
              - "cloudformation:List*"
              - "cloudformation:Describe*"
            Resource: "*"
      - PolicyName:
          !Sub ${GlobalTag}-logging
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: "*"
            Resource:
              - arn:aws:logs:*:*:log-group:*kuali*
              - arn:aws:logs:*:*:log-group:*kuali*:log-stream:*
      - PolicyName:
          !Sub ${GlobalTag}-repository-access
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: ecr:*
            Resource:
              - arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/kuali*
          - Effect: Allow
            Action:
              - ecr:Describe*
              - ecr:Get*
              - ecr:List*
              - ecr:Detect*
            Resource:
              - arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/*

  JenkinsAdministrator:
    Type: AWS::SecretsManager::Secret
    Condition: CreateAdminSecret
    DeletionPolicy: Retain
    Properties: 
      Name: kuali/jenkins/administrator
      Description: !Sub |
        The name and password for the jenkins administrator.
      SecretString: !Sub |
        {
          "username": "admin", 
          "password": "${JenkinsAdminPassword}"
        }
      Tags: 
        - Key: Name
          Value: kuali/jenkins/administrator
        - Key: Service
          Value: !Ref Service
        - Key: Function
          Value: !Ref Function
        - Key: Landscape
          Value: Jenkins

  EC2InstanceLogsGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub ${GlobalTag}
      RetentionInDays: 30

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub ${GlobalTag}-profile
      Path: "/"
      Roles:
      - !Ref EC2Role

  EC2Instance:
    Type: AWS::EC2::Instance
    Description: EC2 instance for hosting jenkins.
    Properties:
      Tags:
      - Key: Name
        Value: !Sub ${GlobalTag}
      - Key: ShortName
        Value: jenkins  
      - Key: Service
        Value: !Ref Service
      - Key: Function
        Value: !Ref Function
      ImageId: 
        !Ref EC2AMI
      InstanceType:
        !Ref EC2InstanceType
      SecurityGroupIds:
      - !GetAtt EC2SecurityGroup.GroupId
      IamInstanceProfile:
        !Ref EC2InstanceProfile
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 64
            DeleteOnTermination: true
      SubnetId: !Ref JenkinsSubnet

      UserData: 
        "Fn::Base64": !Sub |
          #!/bin/bash

          yum install -y aws-cfn-bootstrap

          # Perform initialization, output is logged to /var/log/cfn-init.log
          /opt/aws/bin/cfn-init \
            -v --configsets AllConfigs \
            --region ${AWS::Region} \
            --stack ${AWS::StackName} \
            --resource EC2Instance
            
          # Now that all initialization is done signal success
          /opt/aws/bin/cfn-signal \
            -e $? \
            --region \
            ${AWS::Region}  \
            --stack ${AWS::StackName} \
            --resource EC2Instance

    Metadata:
      AWS::CloudFormation::Authentication:
        # This authentication will make possible replacing inline file content with paths to files in s3
        # https://aws.amazon.com/blogs/devops/authenticated-file-downloads-with-cloudformation/
        S3AccessCreds:
          type: S3
          roleName:
            !Ref EC2Role
          buckets:
          - !Ref TemplateBucketName

      AWS::CloudFormation::Init:
        configSets:
          AllConfigs:
            - ConfigSet: GetHelperScripts
            - ConfigSet: YumInstall
            - ConfigSet: InstallVarious
            - ConfigSet: InstallJenkins
            - ConfigSet: LoadPlugins
            - ConfigSet: ConfigureJenkins
            - ConfigSet: PullJobsFromGit
            - ConfigSet: AddGroovyHelperFiles
          GetHelperScripts:
            - 01_get_helper_scripts
          YumInstall:
            - 02_yum_install
          InstallVarious:
            - 03_install_various
          InstallJenkins:
            - 04_install_jenkins
          LoadPlugins:
            - 05_load_jenkins_plugins
          ConfigureJenkins:
            - 06_configure_jenkins
          PullJobsFromGit:
            - 07_pull_jobs_from_git
          AddGroovyHelperFiles:
            - 08_add_groovy_helper_files
          

        01_get_helper_scripts:
          packages:
            yum:
              awslogs: []
          files:
            /etc/cfn/cfn-hup.conf:
              mode: "000400"
              owner: root
              group: root
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                # Change interval from default 15 minutes to 5
                interval=5
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.EC2Instance.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource EC2Instance --configsets AllConfigs
            /etc/awslogs/awscli.conf:
              content: !Sub |
                [plugins]
                cwlogs = cwlogs
                [default]
                region = ${AWS::Region}
            /etc/awslogs/awslogs.conf:
              content: !Sub |
                [general]
                state_file = /var/lib/awslogs/agent-state
                
                [/var/log/dmesg]
                file = /var/log/dmesg
                log_group_name = ${GlobalTag}
                log_stream_name = /var/log/dmesg
                
                [/var/log/messages]
                file = /var/log/messages
                log_group_name = ${GlobalTag}
                log_stream_name = /var/log/messages
                datetime_format = %b %d %H:%M:%S
                
                [/var/log/cfn-init]
                file = /var/log/cfn-init.log
                log_group_name = ${GlobalTag}
                log_stream_name = /var/log/cfn-init
                datetime_format = %Y-%m-%d %H:%M:%S
                # multi_line_start_pattern = \d{4}\-\d{2}\-\d{2} \d{2}:\d{2}:\d{2},\d{3}

                [/var/log/jenkins/jenkins.log]
                file = /var/log/jenkins/jenkins.log
                log_group_name = ${GlobalTag}
                log_stream_name = /var/log/jenkins/jenkins.log
                datetime_format = %Y-%m-%d %H:%M:%S
            /etc/init.d/jenkins-docker.sh:
              content: |
                #!/bin/bash

                JENKINS_IMAGE='wrh1/kuali-jenkins-http-server'

                killContainers() {
                  echo "Removing containers..."
                  for c in $(docker ps -a --format='{{.ID}}|{{.Image}}') ; do
                    local id=$(echo "$c" | cut -d'|' -f1)
                    local image=$(echo "$c" | cut -d'|' -f2)
                    if [ $image == $JENKINS_IMAGE ] ; then
                      echo "Removing container: $id ..."
                      docker rm -f $id
                    fi
                  done
                }

                killImage() {
                  echo "Removing image $JENKINS_IMAGE ..."
                  docker rmi $JENKINS_IMAGE
                  echo "Removing dangling images..."
                  for i in $(docker images -a -q --filter dangling=true) ; do
                    docker rmi $i
                  done
                }

                runContainer() {
                  local port=$1
                  local jobClass=$2
                  local host=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4 2> /dev/null)
                  docker run \
                    -d \
                    --restart unless-stopped \
                    --name $jobClass \
                    -p $port:8001 \
                    $JENKINS_IMAGE \
                    job-class=$jobClass \
                    ajax-host=$host
                }

                runContainers() {
                  echo "Running containers..."
                  runContainer '8001' 'org.bu.jenkins.job.kuali.StackCreateDelete'
                }

                task="$1"
                shift

                case "$task" in
                  start)
                    runContainers
                    ;;
                  refresh)
                    killContainers
                    killImage
                    runContainers
                    ;;
                  *)
                    runContainers
                    ;;
                esac

              mode: "000775"
              owner: root
              group: root

            /var/lib/jenkins/_cfn-config/README.txt:
              content: |
                All files in this directory comprise pieces of configuration that are used during the cloud-formation init period 
                by scripts in the cfn-scripts directory to adjust certain configurations before jenkins startup.
            /var/lib/jenkins/_cfn-scripts/README.txt:
              content: |
                All scripts in this directory perform configuration setup and adjustments of jenkins for security, plugins, jobs, restarts, 
                etc, during the cloud-formation init period. They replace what would otherwise be many laborious manual configurations
                required by an adminstrator to reproduce the current state of our kuali ci/cd that has been built up over time.

                Documentation: https://www.jenkins.io/doc/

            /var/lib/jenkins/_cfn-scripts/utils.sh:
              content: !Sub |
                #!/bin/bash

                JENKINS_HOME=/var/lib/jenkins
                JENKINS_CLI_JAR=$JENKINS_HOME/jenkins-cli.jar
                PASSWORD_FILE=$JENKINS_HOME/secrets/initialAdminPassword
                CRUMB_FILE=$JENKINS_HOME/_cfn-config/crumb
                COOKIE_JAR=$JENKINS_HOME/_cfn-config/cookiejar
                ADMIN_PASSWORD_RESET=$JENKINS_HOME/_cfn-config/LastAdminPasswordReset

                jenkinsIsSecure() {
                  local cfgxml=$JENKINS_HOME/config.xml
                  if [ -f ${!cfgxml} ] ; then
                    local secure=$(grep -Po '(?<=<useSecurity>)[^<]+' ${!cfgxml})
                    if [ "${!secure}" == 'true' ] ; then
                      local strategy=$(grep '<authorizationStrategy' ${!cfgxml} | grep -o 'Unsecured')
                      if [ "${!strategy,,}" == 'unsecured' ] ; then
                        secure='false'
                      fi
                    fi
                  else
                    # On first startup, jenkins is secure by default
                    local secure='true'
                  fi
                  [ "${!secure}" == 'true' ] && true || false
                }

                # Use this if you don't want to have to include the "-auth username:password" parameter when making jenkins cli function calls.
                # This will make the logged in user alway "Anonymous", even if you do pass in -auth or --user parameters to the cli or api respectively.
                # Therefore, the /me api endpoint becomes inaccessible to curl calls, so don't forget to turn security back on.
                turnOffSecurity() {
                  [ ! -f $JENKINS_HOME/config.xml ] && return 0
                  sed -i 's/\(<useSecurity>\)true/\1false/' $JENKINS_HOME/config.xml
                  restartJenkins
                }

                getAdminPasswordFromSecretsManager() {
                  aws secretsmanager get-secret-value \
                    --secret-id kuali/jenkins/administrator \
                    --output text \
                    --query '{SecretString:SecretString}' | jq '.password' | sed 's/"//g' 2> /dev/null
                }

                # If the admin user has had its password reset, then the JENKINS_HOME/secrets/initialAdminPassword is now no good and the new one needs to be used.
                tryAdminPassword() {
                  if [ -f "$ADMIN_PASSWORD_RESET" ] ; then
                    getAdminPasswordFromSecretsManager
                    if [ $? -gt 0 ] || [ ]; then
                      err "No admin secret in the secrets manager service (may have not been added yet or permissions to retrieve are lacking)"
                    fi
                  fi
                }

                getAdminPassword() {
                  if jenkinsIsSecure ; then
                    local passwd="$(tryAdminPassword)"
                    if [ -n "$passwd" ] ; then
                      echo "$passwd"
                    elif [ -f $PASSWORD_FILE ] ; then
                      cat $PASSWORD_FILE
                    else
                      err "$PASSWORD_FILE does not exist!"
                    fi
                  fi
                }

                getAdminUserCliParm() {
                  if jenkinsIsSecure ; then
                    echo "-auth admin:$(getAdminPassword)"
                  fi
                }

                getAdminUserApiParm() {
                  if jenkinsIsSecure ; then
                    echo "--user admin:$(getAdminPassword)"
                  fi
                }

                authenticateForCLI() {
                  echo "Setting api token credential environment variables"
                  local credfile=$JENKINS_HOME/cli-credentials.sh
                  [ ! -f $credfile ] && createTokenFile
                  source $credfile
                }

                # The JENKINS_HOME/secrets/initialAdminPassword file won't appear immediately after initial start up, so wait for it (it takes a couple of seconds)
                waitUntilPasswordIsReady() {
                  echo "Checking for $PASSWORD_FILE..."
                  local counter=0
                  while true ; do
                    ((counter++))
                    if [ -f $PASSWORD_FILE ] ; then
                      echo "Found it!"
                      passwd=$(cat $PASSWORD_FILE)
                      break;
                    fi
                    echo "Not found! Trying again..."
                    if [ $counter -gt 120 ] ; then
                      echo "It's been a minute and the file has not turned up."
                      echo "Exiting..."
                      exit 1
                    fi
                    sleep .5
                  done
                }

                # Ostensibly, if the jenkins website is ready, then most everything else is ready.
                waitUntilServletContainerIsReady() {
                  echo 'Checking jenkins status code...'
                  local counter=0
                  while true ; do
                    ((counter++))
                    statuscode="$(curl -I -s http://localhost:8080 $(getAdminUserApiParm) | grep HTTP | awk '{print $2}')"
                    echo "Jenkins status code: ${!statuscode}"
                    if [ "${!statuscode:0:2}" == '20' ] ; then
                      echo "Status code ${!statuscode} is what we've been waiting for, Jenkins is ready!"
                      break;
                    fi
                    if [ $counter -gt 60 ] ; then
                      echo "It's been a minute and jenkins is not ready."
                      echo "Exiting..."
                      exit 1
                    fi
                    sleep 1
                  done
                }

                # Files and state get generated as jenkins is starting up. But, it isn't immediate, so a small wait time is needed.
                waitUntilJenkinsIsReady() {
                  if jenkinsIsSecure ; then
                    if [ ! -f $ADMIN_PASSWORD_RESET ] ; then
                      waitUntilPasswordIsReady
                    fi
                  fi
                  waitUntilServletContainerIsReady
                  # Wait a little more for good measures
                  sleep 5
                }

                startJenkins() {
                  echo "Starting Jenkins..."
                  sudo service jenkins start
                    # Equivalent to:
                    # /etc/alternatives/java \
                    #   -Dcom.sun.akuma.Daemon=daemonized \
                    #   -Djava.awt.headless=true \
                    #   -DJENKINS_HOME=/var/lib/jenkins \
                    #   -Dhudson.model.DirectoryBrowserSupport.CSP= \
                    #   -jar /usr/lib/jenkins/jenkins.war \
                    #   --logfile=/var/log/jenkins/jenkins.log \
                    #   --webroot=/var/cache/jenkins/war \
                    #   --daemon \
                    #   --httpPort=8080 \
                    #   --debug=5 \
                    #   --handlerCountMax=100 \
                    #   --handlerCountMaxIdle=20
                  waitUntilJenkinsIsReady
                }

                restartJenkins() {
                  echo "Restarting Jenkins..."
                  sudo service jenkins restart
                  waitUntilJenkinsIsReady
                }

                getCLI() {
                  # https://www.jenkins.io/doc/book/managing/cli/
                  # https://wiki.jenkins.io/display/JENKINS//Starting+and+Accessing+Jenkins

                  echo "Getting the jenkins-cli.jar..."
                  curl http://localhost:8080/jnlpJars/jenkins-cli.jar -o $JENKINS_CLI_JAR
                  chown jenkins:jenkins $JENKINS_CLI_JAR
                  chmod +x $JENKINS_CLI_JAR

                  # Print cli commands
                  # java -jar $JENKINS_CLI_JAR $(getAdminUserCliParm) -s http://localhost:8080 help
                }

                getNewCrumb() {
                  curl -s -L \
                  --cookie-jar $COOKIE_JAR \
                  -X GET http://localhost:8080/crumbIssuer/api/json $(getAdminUserApiParm) \
                  | jq '.crumb' | sed 's/"//g' > $CRUMB_FILE
                  cat $CRUMB_FILE
                }

                # You could use the last crumb that was generated, but to do so you must use it in the same session, which means
                # saving session (JSESSION) cookies in the curl cookie jar and resusing them (--cookie $COOKIE_JAR --cookie-jar $COOKIE_JAR).
                getLastCrumb() {
                  cat $CRUMB_FILE
                }

                # Create a script that can be invoked to put credentials into the environment so as to properly authenticate cli/api calls.
                # Exposes the admin users api token by saving it in a file - ok in this setup, but would be insecure in others.
                createTokenFile() {
                  rm -f $COOKIE_JAR
                  local tokenName=${!1:-'admin-api-token'}
                  local credfile=$JENKINS_HOME/cli-credentials.sh
                  echo "Creating $credfile..."
                  echo "export JENKINS_USER_ID=admin" > $credfile
                  echo "export JENKINS_API_TOKEN=$(getApiToken $tokenName)" >> $credfile
                  # cat $credfile
                }

                getApiToken() {
                  local tokenName="$1"
                  curl -s -L \
                    --cookie $COOKIE_JAR \
                    --cookie-jar $COOKIE_JAR \
                    -d "newTokenName=$tokenName" \
                    -H "Jenkins-Crumb: $(getNewCrumb)" \
                    http://localhost:8080/me/descriptorByName/jenkins.security.ApiTokenProperty/generateNewToken $(getAdminUserApiParm) \
                    | jq '.data.tokenValue' | sed 's/"//g'
                }

                resetAdminPassword() {
                  local cfg="$JENKINS_HOME/users/$(ls -1 $JENKINS_HOME/users | grep 'admin_')/config.xml"
                  [ ! -f "$cfg" ] && echo "No such admin user config file: $cfg" && return 1
                  echo "Resetting admin password configuration: $cfg"
                  local method=${!1:-'sha256'}
                  local password=$(getAdminPasswordFromSecretsManager) 
                  case $method in
                    sha256)
                      # Use of the sha256 method does not seem to work - cloudbees may have phased it out at some point in the release history.
                      local digest=$(echo -n "$password{admin}" | /usr/bin/sha256sum | awk '{print $1}')
                      local phash="admin:$digest"
                      ;;
                    bcrypt)
                      if [ -z "$(npm ls | grep 'bcrypt')" ] ; then
                        echo "bcrypt not found as a package, installing..."
                        if [ -z "$(npm ls | grep 'node-pre-gyp')" ] ; then
                          # Without this package installed, the bcrypt install fails with a missing node_modules/bcrypt/lib directory
                          # This does not seem to happen if you install bcrypt globally (but you have to navigate use npm link for the 
                          # module to be visible within the current node project folder)
                          echo "node-pre-gyp not found as a package, installing..."
                          npm install node-pre-gyp
                          ln -s $(find $(pwd) -type f -iname node-pre-gyp) /usr/bin/node-pre-gyp
                          echo "node-pre-gyp version: $(node-pre-gyp --version)"
                        fi
                        npm install bcrypt
                      fi
                      javascript="$(cat <<EOF
                        const bcrypt = require('bcrypt');
                        bcrypt.genSalt(10, 'a', function(err, salt) {
                          bcrypt.hash("$password", salt, function(err, hash) {
                            if(err) {
                              console.log(err.name + ': ' + err.message);
                            }
                            else {
                              console.log('#jbcrypt:', hash);
                            }   
                          });
                        });
                EOF
                      )"
                      local phash=$(node -pe "$javascript" | sed 's/ //g' | tail -1)
                      ;;
                    esac
                    sed -i "s|<passwordHash>.*</passwordHash>|<passwordHash>$phash</passwordHash>|" $cfg                    
                    echo "$(grep '<passwordHash>' $cfg)"
                    echo "$(date)" > $ADMIN_PASSWORD_RESET
                }

                login() {
                  local username=${!1:-'admin'}
                  # Use crumb in header, maintain the same session (using session cookie) and post a first-time login attempt
                  curl -s -L \
                    --cookie $COOKIE_JAR \
                    --cookie-jar $COOKIE_JAR \
                    -d j_username=$username \
                    -d j_password=$(getAdminPassword) \
                    -H "Jenkins-Crumb: $(getNewCrumb)" \
                    http://localhost:8080/j_spring_security_check $(getAdminUserApiParm)
                }

                whoAmI() {
                  java -jar $JENKINS_CLI_JAR $(getAdminUserCliParm) -s http://localhost:8080 who-am-i
                }

                IAmLoggedIn() {
                  [ -z "$(whoAmI | grep -i 'anonymous')" ] && true || false
                }

                err(){
                  echo "E: $*" >>/dev/stderr
                }
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                - /etc/cfn/cfn-hup.conf
                - /etc/cfn/hooks.d/cfn-auto-reloader.conf
              # awslogs:
              # NOTE: If you are using Amazon Linux 2, the awslogs service is now called "awslogsd"
              awslogsd:
                enabled: true
                ensureRunning: true
                files:
                - /etc/awslogs/awslogs.conf
                - /etc/awslogs/awscli.conf
          commands:
            print_blank_lines:
              command: printf "\n\n"

        02_yum_install:
          files:
            /var/lib/jenkins/_cfn-scripts/02_yum_install.sh:
              content: !Sub |
                #!/bin/bash
                yum update -y
                yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
                yum install -y git
                yum install -y zip unzip
                yum install -y sysstat
                yum install -y jq
                yum install -y vim
                printf "\n\n"
              mode: "000775"
              owner: root
              group: root
          commands:
            Update:
              cwd: /var/lib/jenkins/_cfn-scripts
              command: bash 02_yum_install.sh

        03_install_various:
          files:
            /var/lib/jenkins/_cfn-scripts/03_install_various.sh:
              content: !Sub |
                #!/bin/bash

                # Install docker
                amazon-linux-extras install -y docker
                service docker start
                usermod -a -G docker ec2-user
                chkconfig docker on

                # Replace version 1 of awscli with version 2
                cliVersion=$(aws --version 2>&1 | awk '{print $1}' | cut -d'/' -f2 | cut -d'.' -f1)
                case "$cliVersion" in
                  1)
                    # Upgrade to version 2
                    curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                    unzip awscliv2.zip
                    ./aws/install --bin-dir /bin --install-dir /usr/local/aws-cli --update
                    aws --version
                    ;;
                  2)
                    # Update version 2
                    aws --version
                    ;;
                esac

                if [ "${JavaVersion}" == '8' ] ; then
                  sudo yum install -y java-1.8.0-openjdk -y
                  javaExe=$(namei -v $(which javac) | grep -P '^l\s+' | tail -1 | awk '{print $4}')                  
                else
                  echo "Installing amazon coretto 11..."
                  sudo yum install -y java-11-amazon-corretto
                  # javaExe=$(namei -v $(which javac) | grep -P '^l\s+' | tail -1 | awk '{print $4}')                  
                  javaExe=$(update-alternatives --list | grep -E '^javac\s' | awk '{print $3}')
                fi
                JAVA_HOME=$(dirname $(dirname $javaExe))
                echo "JAVA_HOME = ${!JAVA_HOME}"
                echo "" >> /etc/bashrc
                echo "JAVA_HOME=${!JAVA_HOME}" >> /etc/bashrc
                echo "JAVA_HOME=${!JAVA_HOME}" >> ../_cfn-config/env.sh

                # Install maven
                mkdir -p /usr/share/maven \
                && curl -fsSL http://apache.osuosl.org/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz \
                  | tar -xzC /usr/share/maven --strip-components=1 \
                && ln -s /usr/share/maven/bin/mvn /usr/bin/mvn
                echo "MAVEN_HOME=/usr/share/maven" >> /etc/bashrc
                echo "MAVEN_HOME=/usr/share/maven" >> ../_cfn-config/env.sh
                mvn --version

                # Install nginx
                amazon-linux-extras install -y nginx1

                # Install node
                curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash
                . /.nvm/nvm.sh
                nvm install node

                # For some reason, nvm may not create symlinks to npm and/or node, so check and correct if necessary.
                if [ -z "$(ls -1 /usr/bin | grep 'npm')" ] ; then
                  echo "Symlink for npm wasn't created by nvm during install, creating now..."
                  ln -s $(find /.nvm -type f -iname npm-cli.js) /usr/bin/npm
                fi
                if [ -z "$(ls -1 /usr/bin | grep 'node')" ] ; then
                  echo "Symlink for node wasn't created by nvm during install, creating now..."
                  ln -s $(find /.nvm -type f -iname node) /usr/bin/node
                fi
                echo "npm version: $(sh -c 'npm --version')"
                echo "node version: $(sh -c 'node --version')"

                printf "\n\n"
              mode: "000775"
              owner: root
              group: root
          commands:
            Install:
              cwd: /var/lib/jenkins/_cfn-scripts
              command: bash 03_install_various.sh

        04_install_jenkins:
          files:
            /var/lib/jenkins/_cfn-scripts/04_install_jenkins.sh:
              content: !Sub |
                #!/bin/bash
                
                wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat/jenkins.repo
                rpm --import https://pkg.jenkins.io/redhat/jenkins.io.key
                # sudo yum --showduplicates list jenkins | expand
                yum install jenkins -y
                # yum install --nogpgcheck jenkins-2.150-1.1 -y
                
                sudo usermod -a -G docker jenkins
                sudo usermod --shell /bin/bash jenkins
                sudo chkconfig --add jenkins

                # Turn off Jenkins Content Security Policy to allow for javascript in jobs (for better active choices reactive parameter behavior)
                if [ -f /etc/sysconfig/jenkins ] ; then
                  sed -i 's/JENKINS_JAVA_OPTIONS="/JENKINS_JAVA_OPTIONS="-Dhudson.model.DirectoryBrowserSupport.CSP= /' /etc/sysconfig/jenkins
                fi

                printf "\n\n"
              mode: "000775"
              owner: root
              group: root
          commands:
            Install:
              cwd: /var/lib/jenkins/_cfn-scripts
              command: bash 04_install_jenkins.sh

        05_load_jenkins_plugins:
          files:
            /var/lib/jenkins/plugin-list:
              content: |
                uno-choice:2.5.1
                maven-plugin:3.8
                build-timeout:1.20
                email-ext:2.80
                # environment-script:1.2.5
                git-parameter:0.9.13
                icon-shim:2.0.3
                workflow-aggregator:2.6
                saml:1.1.7
                ssh-agent:1.20
                ssh-slaves:1.31.3
                timestamper:1.11.8
                ws-cleanup:0.38
              mode: "000644"
              owner: jenkins
              group: jenkins
            /var/lib/jenkins/_cfn-scripts/05_load_jenkins_plugins.sh:
              content: !Sub |
                #!/bin/bash
                
                source /var/lib/jenkins/_cfn-scripts/utils.sh

                startJenkins

                # turnOffSecurity

                getCLI

                # # Download any .jpi file available directly from s3:
                # aws s3 cp s3://${TemplateBucketName}/cloudformation/kuali_jenkins/plugin-files/dynamicparameter.jpi plugins/
                # chown jenkins:jenkins 

                # Download the rest from the download center:
                for plugin in $(cat plugin-list | sed 's/\ \+//g') ; do
                  if [ "${!plugin:0:1}" != '#' ] ; then
                    java -jar $JENKINS_CLI_JAR $(getAdminUserCliParm) -s http://localhost:8080 install-plugin ${!plugin}
                  fi
                done

                chown -R jenkins:jenkins $JENKINS_HOME

                restartJenkins

                printf "\n\n"
              mode: "000755"
              owner: root
              group: root
          commands:
            Install:
              cwd: /var/lib/jenkins
              command: bash /var/lib/jenkins/_cfn-scripts/05_load_jenkins_plugins.sh

        06_configure_jenkins:
          files:
            /var/lib/jenkins/_cfn-config/config.xml:
              content: |
                <?xml version='1.1' encoding='UTF-8'?>
                <hudson>
                  <disabledAdministrativeMonitors/>
                  <version>JENKINS_VERSION</version>
                  <installStateName>RUNNING</installStateName>
                  <numExecutors>5</numExecutors>
                  <mode>NORMAL</mode>
                  <useSecurity>true</useSecurity>
                  <authorizationStrategy class="hudson.security.FullControlOnceLoggedInAuthorizationStrategy">
                    <denyAnonymousReadAccess>true</denyAnonymousReadAccess>
                  </authorizationStrategy>
                  <securityRealm class="hudson.security.HudsonPrivateSecurityRealm">
                    <disableSignup>true</disableSignup>
                    <enableCaptcha>false</enableCaptcha>
                  </securityRealm>
                  <disableRememberMe>false</disableRememberMe>
                  <projectNamingStrategy class="jenkins.model.ProjectNamingStrategy$DefaultProjectNamingStrategy"/>
                  <workspaceDir>${JENKINS_HOME}/workspace/${ITEM_FULL_NAME}</workspaceDir>
                  <buildsDir>${ITEM_ROOTDIR}/builds</buildsDir>
                  <jdks>
                    <jdk>
                      <name>JAVA_SHORTNAME</name>
                      <home>JAVA_HOME/</home>
                      <properties/>
                    </jdk>
                  </jdks>
                  <viewsTabBar class="hudson.views.DefaultViewsTabBar"/>
                  <myViewsTabBar class="hudson.views.DefaultMyViewsTabBar"/>
                  <clouds/>
                  <quietPeriod>5</quietPeriod>
                  <scmCheckoutRetryCount>0</scmCheckoutRetryCount>
                  <views>
                    <hudson.model.AllView>
                      <owner class="hudson" reference="../../.."/>
                      <name>all</name>
                      <filterExecutors>false</filterExecutors>
                      <filterQueue>false</filterQueue>
                      <properties class="hudson.model.View$PropertyList"/>
                    </hudson.model.AllView>
                  </views>
                  <primaryView>all</primaryView>
                  <slaveAgentPort>-1</slaveAgentPort>
                  <label></label>
                  <crumbIssuer class="hudson.security.csrf.DefaultCrumbIssuer">
                    <excludeClientIPFromCrumb>false</excludeClientIPFromCrumb>
                  </crumbIssuer>
                  <nodeProperties/>
                  <globalNodeProperties/>
                </hudson>
              mode: "000644"
              owner: jenkins
              group: jenkins
            /var/lib/jenkins/_cfn-config/hudson.maven.MavenModuleSet.xml:
              content:
                <?xml version='1.1' encoding='UTF-8'?>
                <hudson.maven.MavenModuleSet_-DescriptorImpl plugin="maven-plugin@3.8">
                  <globalMavenOpts>-Xmx3072m -Xms512m -XX:MaxPermSize=256m</globalMavenOpts>
                  <mavenValidationLevels class="linked-hash-map">
                    <entry>
                      <string>DEFAULT</string>
                      <int>-1</int>
                    </entry>
                    <entry>
                      <string>LEVEL_MINIMAL</string>
                      <int>0</int>
                    </entry>
                    <entry>
                      <string>LEVEL_MAVEN_2_0</string>
                      <int>20</int>
                    </entry>
                    <entry>
                      <string>LEVEL_MAVEN_3_0</string>
                      <int>30</int>
                    </entry>
                    <entry>
                      <string>LEVEL_MAVEN_3_1</string>
                      <int>31</int>
                    </entry>
                    <entry>
                      <string>LEVEL_STRICT</string>
                      <int>30</int>
                    </entry>
                  </mavenValidationLevels>
                  <localRepository class="hudson.maven.local_repo.DefaultLocalRepositoryLocator"/>
                </hudson.maven.MavenModuleSet_-DescriptorImpl>
              mode: "000644"
              owner: jenkins
              group: jenkins
            /var/lib/jenkins/_cfn-config/hudson.tasks.Maven.xml:
              content:
                <?xml version='1.1' encoding='UTF-8'?>
                <hudson.tasks.Maven_-DescriptorImpl>
                  <installations>
                    <hudson.tasks.Maven_-MavenInstallation>
                      <name>MAVEN_SHORTNAME</name>
                      <home>MAVEN_HOME</home>
                      <properties/>
                    </hudson.tasks.Maven_-MavenInstallation>
                  </installations>
                </hudson.tasks.Maven_-DescriptorImpl>
              mode: "000644"
              owner: jenkins
              group: jenkins
            /var/lib/jenkins/_cfn-config/credentials.admin.xml:
              content:
                <com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl plugin="credentials@2.3.14">
                  <scope>GLOBAL</scope>
                  <id>admin</id>
                  <description>Credentials for global authorization</description>
                  <username>admin</username>
                  <password>
                    <secret-redacted/>
                  </password>
                </com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl>
              mode: "000644"
              owner: jenkins
              group: jenkins
            /var/lib/jenkins/_cfn-config/credentials.kualico.github.xml:
              content:
                <com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl plugin="credentials@2.3.14">
                  <scope>GLOBAL</scope>
                  <id>credentials.kualico.github</id>
                  <description>Credentials to gain access to private kualico github repositories</description>
                  <username>bu-ist-user</username>
                  <password>
                    <secret-redacted/>
                  </password>
                </com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl>
              mode: "000644"
              owner: jenkins
              group: jenkins
            /var/lib/jenkins/_cfn-config/credentials.kualico.dockerhub.xml:
              content:
                <com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl plugin="credentials@2.3.14">
                  <scope>GLOBAL</scope>
                  <id>credentials.kualico.dockerhub</id>
                  <description>Credentials to gain access to private kualico dockerhub repositories</description>
                  <username>buistuser</username>
                  <password>
                    <secret-redacted/>
                  </password>
                </com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl>
              mode: "000644"
              owner: jenkins
              group: jenkins
            /var/lib/jenkins/_cfn-config/credentials.bu.github.token.xml:
              content:
                <org.jenkinsci.plugins.plaincredentials.impl.StringCredentialsImpl plugin="plain-credentials@1.7">
                  <scope>GLOBAL</scope>
                  <id>credentials.bu.github.token</id>
                  <description>Personal access token for api access to BU github repos in the research administration team</description>
                  <secret>
                    <secret-redacted/>
                  </secret>
                </org.jenkinsci.plugins.plaincredentials.impl.StringCredentialsImpl>
              mode: "000644"
              owner: jenkins
              group: jenkins
            /var/lib/jenkins/_cfn-config/credentials.newrelic.license.key.xml:
              content:
                <org.jenkinsci.plugins.plaincredentials.impl.StringCredentialsImpl plugin="plain-credentials@1.7">
                  <scope>GLOBAL</scope>
                  <id>credentials.newrelic.license.key</id>
                  <description>Credentials to allow logging of telemetry with the newrelic java agent to our new relic account</description>
                  <secret>
                    <secret-redacted/>
                  </secret>
                </org.jenkinsci.plugins.plaincredentials.impl.StringCredentialsImpl>
              mode: "000644"
              owner: jenkins
              group: jenkins
            /var/lib/jenkins/_cfn-config/credentials.github.ssh.bu-ist.kc.xml:
              content:
                <com.cloudbees.jenkins.plugins.sshcredentials.impl.BasicSSHUserPrivateKey plugin="ssh-credentials@1.18.1">
                  <scope>GLOBAL</scope>
                  <id>credentials.github.ssh.bu-ist.kc</id>
                  <description>Gains ssh access to bu-ist kuali-research github repositor</description>
                  <username>bu-ist-user</username>
                  <privateKeySource class="com.cloudbees.jenkins.plugins.sshcredentials.impl.BasicSSHUserPrivateKey$DirectEntryPrivateKeySource">
                    <privateKey>
                      <secret-redacted/>
                    </privateKey>
                  </privateKeySource>
                </com.cloudbees.jenkins.plugins.sshcredentials.impl.BasicSSHUserPrivateKey>
              mode: "000644"
              owner: jenkins
              group: jenkins
            /var/lib/jenkins/_cfn-config/credentials.github.ssh.bu-ist.rice.xml:
              content:
                <com.cloudbees.jenkins.plugins.sshcredentials.impl.BasicSSHUserPrivateKey plugin="ssh-credentials@1.18.1">
                  <scope>GLOBAL</scope>
                  <id>credentials.github.ssh.bu-ist.rice</id>
                  <description>Gains ssh access to bu-ist kuali-kc-rice github repository</description>
                  <username>bu-ist-user</username>
                  <privateKeySource class="com.cloudbees.jenkins.plugins.sshcredentials.impl.BasicSSHUserPrivateKey$DirectEntryPrivateKeySource">
                    <privateKey>
                      <secret-redacted/>
                    </privateKey>
                  </privateKeySource>
                </com.cloudbees.jenkins.plugins.sshcredentials.impl.BasicSSHUserPrivateKey>
            /var/lib/jenkins/_cfn-scripts/06_configure_jenkins.sh:
              content: !Sub |
                #!/bin/bash
                
                cfgdir=/var/lib/jenkins/_cfn-config
                srcdir=/var/lib/jenkins/_cfn-scripts

                source $srcdir/utils.sh

                # Set various parameters to be injected into above collection of config xml files.
                cat <<EOF >> $cfgdir/env.sh
                JAVA_SHORTNAME=$(echo "${!JAVA_HOME}" | rev | cut -d'/' -f1 | rev)
                JENKINS_VERSION=$(java -jar $JENKINS_CLI_JAR $(getAdminUserCliParm) -s http://localhost:8080 version)
                MAVEN_SHORTNAME=$(sudo mvn --version | grep -oP 'Maven (\d\.?)+' | sed 's/ /-/g')
                MAVEN_PLUGIN_VERSION=$(java -jar $JENKINS_CLI_JAR $(getAdminUserCliParm) -s http://localhost:8080 list-plugins | grep -E '^maven-plugin\s' | grep -oP '(\d\.?){2,}' | head -1)
                CREDENTIALS_PLUGIN_VERSION=$(java -jar $JENKINS_CLI_JAR $(getAdminUserCliParm) -s http://localhost:8080 list-plugins | grep -E '^credentials\s' | grep -oP '(\d\.?){2,}' | head -1)
                PLAIN_CREDENTIALS_PLUGIN_VERSION=$(java -jar $JENKINS_CLI_JAR $(getAdminUserCliParm) -s http://localhost:8080 list-plugins | grep -E '^plain-credentials\s' | grep -oP '(\d\.?){2,}' | head -1)
                SSH_CREDENTIALS_PLUGIN_VERSION=$(java -jar $JENKINS_CLI_JAR $(getAdminUserCliParm) -s http://localhost:8080 list-plugins | grep -E '^ssh-credentials\s' | grep -oP '(\d\.?){2,}' | head -1)
                EOF

                cat $cfgdir/env.sh
                source $cfgdir/env.sh

                # Replace placeholders in these config xml files with their values now that they're known
                # This will also turn security for jenkins back on again.
                echo "Modifying config.xml..."
                sed "s|JENKINS_VERSION|$JENKINS_VERSION|" $cfgdir/config.xml | \
                sed "s|JAVA_HOME|$JAVA_HOME|" | \
                sed "s|JAVA_SHORTNAME|$JAVA_SHORTNAME|" > config.xml

                echo "Setting MAVEN_HOME in hudson.tasks.Maven.xml..."
                sed "s|MAVEN_HOME|$MAVEN_HOME|" $cfgdir/hudson.tasks.Maven.xml | \
                sed "s|MAVEN_SHORTNAME|$MAVEN_SHORTNAME|" > hudson.tasks.Maven.xml

                # In case any of the credentials plugins have been manually updated, correct them in files before importing.
                echo "Ensuring correct credentials plugin version..."
                sed -i 's/maven-plugin@[0-9\.]\+/maven-plugin@'$MAVEN_PLUGIN_VERSION'/' $cfgdir/hudson.maven.MavenModuleSet.xml
                sed -i 's/credentials@[0-9\.]\+/credentials@'$CREDENTIALS_PLUGIN_VERSION'/' $cfgdir/credentials.kualico.github.xml
                sed -i 's/credentials@[0-9\.]\+/credentials@'$CREDENTIALS_PLUGIN_VERSION'/' $cfgdir/credentials.kualico.dockerhub.xml
                echo "Ensuring correct plain-credentials plugin version..."
                sed -i 's/plain-credentials@[0-9\.]\+/plain-credentials@'$PLAIN_CREDENTIALS_PLUGIN_VERSION'/' $cfgdir/credentials.bu.github.token.xml
                sed -i 's/plain-credentials@[0-9\.]\+/plain-credentials@'$PLAIN_CREDENTIALS_PLUGIN_VERSION'/' $cfgdir/credentials.newrelic.license.key.xml
                echo "Ensuring correct ssh-credentials plugin version..."
                sed -i 's/ssh-credentials@[0-9\.]\+/ssh-credentials@'$SSH_CREDENTIALS_PLUGIN_VERSION'/' $cfgdir/credentials.github.ssh.bu-ist.kc.xml
                sed -i 's/ssh-credentials@[0-9\.]\+/ssh-credentials@'$SSH_CREDENTIALS_PLUGIN_VERSION'/' $cfgdir/credentials.github.ssh.bu-ist.rice.xml

                # Create all credentials by importing their corresponding xml files.
                for credxml in $(ls -1 $cfgdir | grep credentials.) ; do
                  echo "Importing $credxml..."
                  java -jar $JENKINS_CLI_JAR $(getAdminUserCliParm) -s http://localhost:8080 create-credentials-by-xml system::system::jenkins _ < $cfgdir/$credxml
                done

                createTokenFile

                resetAdminPassword 'bcrypt'

                chown -R jenkins:jenkins $JENKINS_HOME

                restartJenkins

                printf "\n\n"
              mode: "000775"
              owner: root
              group: root
          commands:
            Install:
              cwd: /var/lib/jenkins
              command: bash /var/lib/jenkins/_cfn-scripts/06_configure_jenkins.sh

        07_pull_jobs_from_git:
          files:
            /var/lib/jenkins/.ssh/bu_github_id_coi_rsa:
              source: !Sub http://${TemplateBucketName}.s3.amazonaws.com/bu_github_id_coi_rsa
              mode: "000600"
              owner: jenkins
              group: jenkins
            /var/lib/jenkins/.ssh/bu_github_id_core_common_rsa:
              source: !Sub http://${TemplateBucketName}.s3.amazonaws.com/bu_github_id_core_common_rsa
              mode: "000600"
              owner: jenkins
              group: jenkins
            /var/lib/jenkins/.ssh/bu_github_id_core_rsa:
              source: !Sub http://${TemplateBucketName}.s3.amazonaws.com/bu_github_id_core_rsa
              mode: "000600"
              owner: jenkins
              group: jenkins
            /var/lib/jenkins/.ssh/bu_github_id_docker_rsa:
              source: !Sub http://${TemplateBucketName}.s3.amazonaws.com/bu_github_id_docker_rsa
              mode: "000600"
              owner: jenkins
              group: jenkins
            /var/lib/jenkins/.ssh/bu_github_id_jenkins_rsa:
              source: !Sub http://${TemplateBucketName}.s3.amazonaws.com/bu_github_id_jenkins_rsa
              mode: "000600"
              owner: jenkins
              group: jenkins
            /var/lib/jenkins/.ssh/bu_github_id_kc_rsa:
              source: !Sub http://${TemplateBucketName}.s3.amazonaws.com/bu_github_id_kc_rsa
              mode: "000600"
              owner: jenkins
              group: jenkins
            /var/lib/jenkins/.ssh/bu_github_id_research_portal_rsa:
              source: !Sub http://${TemplateBucketName}.s3.amazonaws.com/bu_github_id_research_portal_rsa
              mode: "000600"
              owner: jenkins
              group: jenkins
            /var/lib/jenkins/.ssh/bu_github_id_rice_rsa:
              source: !Sub http://${TemplateBucketName}.s3.amazonaws.com/bu_github_id_rice_rsa
              mode: "000600"
              owner: jenkins
              group: jenkins
            /var/lib/jenkins/.ssh/bu_kuali_id_jenkins_rsa:
              source: !Sub http://${TemplateBucketName}.s3.amazonaws.com/bu_kuali_id_jenkins_rsa
              mode: "000600"
              owner: jenkins
              group: jenkins
            /var/lib/jenkins/.ssh/bu_github_id_kuali_cloudformation_rsa:
              source: !Sub http://${TemplateBucketName}.s3.amazonaws.com/bu_github_id_kuali_cloudformation_rsa
              mode: "000600"
              owner: jenkins
              group: jenkins
            /var/lib/jenkins/jobs/.gitignore:
              content: |
                # Ignore everything in subdirectories
                /*/*
                # ...except the config.xml file in those subdirectories
                !/**/config.xml
                #...and this file
                !.gitignore
                #...and javajobs
                !/javajobs/ContinuousIntegration/
                #...and the config.xml backup file
                !config.xml.bkp                
            /var/lib/jenkins/_cfn-scripts/07_pull_jobs_from_git.sh:
              content: !Sub |
                #!/bin/bash
                
                source /var/lib/jenkins/_cfn-scripts/utils.sh

                # Adjust file/directory permissions
                chmod 700 .ssh
                ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
                ssh-keyscan -t rsa github.com >> $JENKINS_HOME/.ssh/known_hosts

                # Configure github access
                [ ! -d jobs ] && mkdir jobs
                cd jobs
                [ ! -d .git ] && git init
                git config user.email "jenkins@bu.edu"
                git config user.name jenkins
                git remote add github git@github.com:bu-ist/kuali-research-jenkins.git

                # Pull all main/job configuration files from github
                eval `ssh-agent -s`
                ssh-add ../.ssh/bu_github_id_jenkins_rsa
                echo "Fetching from upstream and performing hard reset"
                git fetch github master
                git reset --hard FETCH_HEAD
                eval `ssh-agent -k`

                chown -R jenkins:jenkins $JENKINS_HOME

                restartJenkins

                printf "\n\n"
              mode: "000775"
              owner: root
              group: root
          commands:
            Install:
              cwd: /var/lib/jenkins
              command: bash /var/lib/jenkins/_cfn-scripts/07_pull_jobs_from_git.sh

        08_add_groovy_helper_files:
          files:
            /var/lib/jenkins/.groovy/lib/JobFields.gvy:
              content: !Sub |
                import java.lang.reflect.Method;
                import org.codehaus.groovy.runtime.ReflectionMethodInvoker ;

                def getHtml(className, methodName, parmName, parmMap) {
                  try {
                    URL[] urls = [new File("/var/lib/jenkins/.groovy/lib/kuali-jenkins-ui.jar").toURI().toURL()] as URL[];
                    URLClassLoader loader = new URLClassLoader(urls, this.class.classLoader);

                    Class parmObjClass = Class.forName("org.bu.jenkins.job.AbstractJob\$ParameterConfiguration", true, loader);
                    Object parms = [parmName, parmMap] as Object[];
                    Object[] parmObj = ReflectionMethodInvoker.invoke(parmObjClass, "forActiveChoicesFragmentInstance", parms);

                    Class classToLoad = Class.forName(className, true, loader);
                    Object instance = classToLoad.newInstance();
                    return (String) ReflectionMethodInvoker.invoke(instance, methodName, parmObj);
                  }
                  catch(Exception e) {
                    StringWriter sw = new StringWriter();
                    PrintWriter pw = new PrintWriter(sw);
                    if(e.getMessage() != null) {
                      pw.write(e.getMessage());
                    }
                    pw.write("\n");
                    e.printStackTrace(pw);
                    return "<pre>" + sw.toString() + "</pre>";
                  }
                }

                def getHtml(className, methodName, parmName) {
                  return getHtml(className, methodName, parmName, new HashMap());
                }
              mode: "000775"
              owner: jenkins
              group: jenkins
            /var/lib/jenkins/.groovy/lib/*.jar:
              source: !Sub https://${TemplateBucketName}.s3.amazonaws.com/cloudformation/kuali_jenkins/*.jar
              mode: "000600"
              owner: jenkins
              group: jenkins

Outputs:

  JenkinsPrivateUrl:
    Value:
      !Sub
        - http://${ec2_ip}:8080
        - ec2_ip: !GetAtt EC2Instance.PrivateIp

  InstanceId:
    Value:
      !Ref EC2Instance