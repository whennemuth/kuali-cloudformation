AWSTemplateFormatVersion: 2010-09-09


Description: >
  Create a single ec2 instance that runs a jenkins server for the building and deploying of kuali modules and cloudformation stacks


Parameters:

  GlobalTag:
    Type: String
    Description: >
      A common value that all resources in this template will have prefixed to
      their name and attached as a tag to establish a bundling through naming convention.
    Default: kuali-jenkins

  TemplateBucketName:
    Type: String
    Description: The S3 bucket kuali research cloudformation templates, config files, keys, etc. are stored
    Default: kuali-conf
    
  Service:
    Description: Service catalog name
    Type: String
    Default: research-administration

  Function:
    Description: The Function within the Service
    Type: String
    Default: kuali

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: The id of the vpc to deploy to.

  JenkinsVersion:
    Type: String
    Description: > 
      The version of jenkins to install.
      If a specific version is selected, it should have already been tested with latest possible plugins, all of which uploaded to s3 for download during jenkins installation.
      If the latest version is selected, plugins will be installed by the jenkins cli and testing will be required. 
      
    AllowedValues:
      - 'jenkins-2.322-1.1'
      - 'latest'
    Default: 'jenkins-2.322-1.1'

  JenkinsSubnet:
    Type: AWS::EC2::Subnet::Id
    Description: Id of the private subnet that the jenkins ec2 instance is deployed to.
    Default: empty

  JavaVersion:
    Type: String
    Description: Java 8 or Java 11 (earlier versions of jenkins need java 8)
    Default: 11
    AllowedValues:
    - 8
    - 11

  # https://docs.aws.amazon.com/AmazonECS/latest/developerguide/retrieve-ecs-optimized_AMI.html
  EC2AMI:
    Description: AMI ID
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
    # Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id

  EC2InstanceType:
    Type: String
    Description: What type of EC2 instance should be used for hosting?
    AllowedValues:
    - t3.small
    - t3.medium
    - t3.large
    - t3.xlarge
    - m4.large
    - m4.xlarge
    - m5.large
    - m5.xlarge
    - c5.large
    - c5.xlarge
    ConstraintDescription: Specified instance type is not within selection list.
    Default: m5.xlarge

  JenkinsAdminPassword: 
    Type: String
    Description: The password of the Jenkins initial administrator
    NoEcho: true
    Default: empty

  LegacyAccountId:
    Type: String
    Description: The ID of the old kuali aws account.
    Default: '730096353738'

Conditions:
  CreateAdminSecret: !Not [!Equals [!Ref JenkinsAdminPassword, empty]]

Resources:

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VpcId
      GroupDescription: !Sub Security group for jenkins ec2 instance.
      GroupName: !Sub ${GlobalTag}-ec2-security-group
      SecurityGroupIngress:
      - Description: Allows inbound http access
        IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - Description: Allows inbound http access
        IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        CidrIp: 0.0.0.0/0
      - Description: Allows inbound https access
        IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${GlobalTag}-jenkins-security-group
        - Key: Service
          Value: !Ref Service
        - Key: Function
          Value: !Ref Function

  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      RoleName: !Sub ${GlobalTag}-ec2-role
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:

      - PolicyName:
          !Sub ${GlobalTag}-cloudformation
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: "cloudformation:*"
            Resource: arn:aws:cloudformation:*:*:stack/kuali*/*
          - Effect: Deny
            # Deny the main cloudformation actions (especially delete) as long of neither of the following are true:
            # The stack arn has "/kuali*/" in it
            # or...
            # The stack has a "service" tag with "research-administration" as the value
            Action: 
              - cloudformation:Cancel*
              - cloudformation:Delete*
              - cloudformation:Deregister*
              - cloudformation:Set*
              - cloudformation:Stop*
              - cloudformation:Update*
            NotResource: arn:aws:cloudformation:*:*:stack/kuali*/*
            Condition:
              StringNotEqualsIfExists: 
                aws:ResourceTag/Service: !Ref Service
          - Effect: Allow
            Action: "*"
            Resource: "*"
            # Allows any action, for research-administration or anything that is not explicitly tagged as part of another service.
            # This condition will only reach the desired effect on a resource if the same resource is also evaluated by a separate 
            # policy statement that is "flipped" (effect=deny, StringNotEqualsIfExists: "aws:ResourceTag/Service": [ !Ref Service ]).
            Condition:
              StringEqualsIfExists:
                aws:ResourceTag/Service: !Ref Service
          - Effect: Deny
            Action: [
              ec2:Delete*, ec2:Deregister*, ec2:Detach*, ec2:Disable*, ec2:Disassociate*, ec2:Modify*, ec2:Move*, ec2:Purchase*, ec2:Reboot*, ec2:Replace*, ec2:Reset*, ec2:Revoke*, ec2:Start*, ec2:Stop*, ec2:Terminate*, ec2:Unassign*, ec2:Update*, 
              ecs:Delete*, ecs:Put*, ecs:Register*, ecs:Run*, ecs:Start*, ecs:Stop*, ecs:Submit*, ecs:Tag*, ecs:Untag*, ecs:Update*, 
              iam:Add*, iam:Attach*, iam:Change*, iam:Deactivate*, iam:Delete*, iam:Put*, iam:Remove*, iam:Resync*, iam:Set*, iam:Tag*, iam:Untag*, iam:Update*, 
              rds:Add*, rds:Authorize*, rds:Cancel*, rds:Copy*, rds:Delete*, rds:Modify*, rds:Promote*, rds:Purchase*, rds:Register*, rds:Remove*, rds:Revoke*, rds:Start*, rds:Stop*, 
              elbv2:Add*, elbv2:Delete*, elbv2:Modify*, elbv2:Register*, elbv2:Remove*, elbv2:Set*, 
              ssm:Add*, ssm:Cancel*, ssm:Delete*, ssm:Deregister*, ssm:Put*, ssm:Start*, ssm:Stop*, ssm:Update*, 
              logs:Cancel*, logs:Delete*, logs:Disassociate*, logs:Filter*, logs:Put*, logs:Start*, logs:Stop*, logs:Tag*, logs:Untag*,
              wafv2:Associate*, wafv2:Delete*, wafv2:Disassociate*,
              route53:Associate*, route53:Change*, route53:Delete*, route53:Disassociate*, route53:Update*,
              athena:Delete*, athena:Start*, athena:Stop*, athena:Tag*, athena:Untag*, athena:Update*,
              glue:Cancel*, glue:Delete*, glue:Put*, glue:Reset*, glue:Start*, glue:Stop*, glue:Tag*, glue:Untag*, glue:Update*, 
              application-autoscaling:Delete*, application-autoscaling:Deregister*, application-autoscaling:Put*, application-autoscaling:Register*, 
              autoscaling:Attach*, autoscaling:Cancel*, autoscaling:Delete*, autoscaling:Detach*, autoscaling:Disable*, autoscaling:Enter*, autoscaling:Exit*, autoscaling:Put*, autoscaling:Resume*, autoscaling:Set*, autoscaling:Start*, autoscaling:Suspend*, autoscaling:Terminate*, autoscaling:Update*, 
              autoscaling-plans:Delete*, autoscaling-plans:Update*, 
              lambda:Add*, lambda:Delete*, lambda:Invoke*, lambda:Publish*, lambda:Put*, lambda:Remove*, lambda:Tag*, lambda:Untag*, lambda:Update*, 
              cloudwatch:Delete*, cloudwatch:Disable*, cloudwatch:Enable*, cloudwatch:Put*, cloudwatch:Set*, cloudwatch:Tag*, cloudwatch:Untag*, 
              apigateway:Delete*, apigateway:Put*, apigateway:Update*, 
              apigatewayv2:Delete*, apigateway2:Put*, apigateway2:Update*, 
              kinesis:Decrease*, kinesis:Delete*, kinesis:Deregister*, kinesis:Disable*, kinesis:Increase*, kinesis:Merge*, kinesis:Put*, kinesis:Register*, kinesis:Remove*, kinesis:Split*, kinesis:Start*, kinesis:Stop*, kinesis:Update*, 
              firehose:Delete*, firehose:Put*, firehose:Start*, firehose:Stop*, firehose:Tag*, firehose:Untag*, firehose:Update*
            ]
            Resource: "*"
            # The possibility of affecting other services during stack creation is unlikely, nonetheless tagging conventions in the account are 
            # used here to control access to certain actions. Disallowed are non-read only actions if the service tag explicitly indicates a service 
            # other than research-administration. This list comprises every action request that stack creation/deletion makes and helps prevent 
            # inadvertent spillover to other services, while still allowing for comprehensive read-only actions. This condition can only reach
            # the desired effect if also used with a separate policy statement that comprehensively allows actions.
            # 1) If a Service tag exists on the resource and it is "research-administration", the condition fails and the action is NOT denied.
            # 2) If a Service tag exists on the resource and it is NOT "research-administration", the condition succeeds and the action IS denied.
            # 3) If no service tag exists, the null check part of the condition takes over and prevents a default success due to an otherwise
            #    non-evaluation, and results in the action NOT being denied.
            # SEE: https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html
            Condition:
              "Null":
                aws:ResourceTag/Service: false
              StringNotEqualsIfExists: 
                aws:ResourceTag/Service: !Ref Service

      - PolicyName:
          !Sub ${GlobalTag}-s3-access
        PolicyDocument:
          Statement:
          - Effect: Allow
            Resource:
            - arn:aws:s3:::kuali-*
            Action: "*"
          - Effect: Deny
            NotResource:
            - arn:aws:s3:::kuali-*
            - arn:aws:s3:::solutions-*
            Action: [ s3:Move*, s3:Remove*, s3:Delete*, s3:GetObject ]


      # Unlike the tag-based policies, this one prevents non-readonly actions against resources that are BOTH tagged
      # with a Service value that is not "research-administration", AND has no Service tag.
      - PolicyName:
          !Sub ${GlobalTag}-read-secrets
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: secretsmanager:*
            Resource:
              - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:kuali/*/*
          - Effect: Deny
            Action: 
              - secretsmanager:Cancel*
              - secretsmanager:Delete*
              - secretsmanager:DescribeSecret
              - secretsmanager:Get*
              - secretsmanager:Put*
              - secretsmanager:RestoreSecret
              - secretsmanager:RotateSecret
              - secretsmanager:TagResource
              - secretsmanager:UntagResource
              - secretsmanager:Update*
            NotResource: !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:kuali/*/*

      - PolicyName:
          !Sub ${GlobalTag}-logging
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: "*"
            Resource:
              - arn:aws:logs:*:*:log-group:*kuali*
              - arn:aws:logs:*:*:log-group:*kuali*:log-stream:*

      - PolicyName:
          !Sub ${GlobalTag}-repository-access
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: ecr:*
            Resource:
              - !Sub arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/kuali*
          - Effect: Deny
            Action:
              - ecr:Delete*
              - ecr:Put*
              - ecr:Upload*
              - ecr:Set*
              - ecr:Start*
              - ecr:TagResource
              - ecr:UntagResource
            NotResource: !Sub arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/kuali*

      - PolicyName:
          !Sub ${GlobalTag}-error-handling
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: 
              - sts:DecodeAuthorizationMessage              
            Resource: "*"

      - PolicyName:
          !Sub ${GlobalTag}-cross-account-rds-read
        PolicyDocument:
          Statement:
          - Effect: Allow
            Resource:
            - !Sub arn:aws:rds::${LegacyAccountId}:db:*
            Action: [ rds:DescribeDBInstances ]
            Condition:
              StringEqualsIfExists:
                aws:ResourceTag/Service: !Ref Service
          - Effect: Allow
            Resource:
            - !Sub arn:aws:rds::${LegacyAccountId}:snapshot:*
            Action: [ rds:DescribeDBSnapshots ]
            Condition:
              StringEqualsIfExists:
                aws:ResourceTag/Service: !Ref Service

      - PolicyName:
          !Sub ${GlobalTag}-cross-account-send-command
        PolicyDocument:
          Statement:
          # - Effect: Allow
          #   Resource: 
          #   - !Sub arn:aws:ec2::${LegacyAccountId}:instance/*
          #   - !Sub arn:aws:ssm::${LegacyAccountId}:document/AWS-RunShellScript
          #   Action:
          #     - ssm:SendCommand
          #     - ssm:CancelCommand
          #   Condition:
          #     StringEqualsIfExists:
          #       aws:ResourceTag/Service: !Ref Service
          # - Effect: Allow
          #   Action:
          #     - iam:CreateServiceLinkedRole
          #   Resource: "*"
          #   Condition:
          #     StringEquals:
          #       iam:AWSServiceName:
          #         - ssm.amazonaws.com
          - Effect: Allow
            Action: sts:AssumeRole
            Resource: !Sub arn:aws:iam::${LegacyAccountId}:role/kuali-ssm-trusting-role


  JenkinsAdministrator:
    Type: AWS::SecretsManager::Secret
    Condition: CreateAdminSecret
    DeletionPolicy: Retain
    Properties: 
      Name: kuali/jenkins/administrator
      Description: !Sub |
        The name and password for the jenkins administrator.
      SecretString: !Sub |
        {
          "username": "admin", 
          "password": "${JenkinsAdminPassword}"
        }
      Tags: 
        - Key: Name
          Value: kuali/jenkins/administrator
        - Key: Service
          Value: !Ref Service
        - Key: Function
          Value: !Ref Function
        - Key: Landscape
          Value: Jenkins

  EC2InstanceLogsGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub ${GlobalTag}
      RetentionInDays: 30

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub ${GlobalTag}-profile
      Path: "/"
      Roles:
      - !Ref EC2Role

  EC2Instance:
    Type: AWS::EC2::Instance
    Description: EC2 instance for hosting jenkins.
    Properties:
      Tags:
      - Key: Name
        Value: !Sub ${GlobalTag}
      - Key: ShortName
        Value: jenkins  
      - Key: Service
        Value: !Ref Service
      - Key: Function
        Value: !Ref Function
      ImageId: 
        !Ref EC2AMI
      InstanceType:
        !Ref EC2InstanceType
      SecurityGroupIds:
      - !GetAtt EC2SecurityGroup.GroupId
      IamInstanceProfile:
        !Ref EC2InstanceProfile
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 64
            DeleteOnTermination: true
      SubnetId: !Ref JenkinsSubnet

      UserData: 
        "Fn::Base64": !Sub |
          #!/bin/bash

          yum install -y aws-cfn-bootstrap

          # Perform initialization, output is logged to /var/log/cfn-init.log
          /opt/aws/bin/cfn-init \
            -v --configsets AllConfigs \
            --region ${AWS::Region} \
            --stack ${AWS::StackName} \
            --resource EC2Instance
            
          # Now that all initialization is done signal success
          /opt/aws/bin/cfn-signal \
            -e $? \
            --region \
            ${AWS::Region}  \
            --stack ${AWS::StackName} \
            --resource EC2Instance

    Metadata:
      AWS::CloudFormation::Authentication:
        # This authentication will make possible replacing inline file content with paths to files in s3
        # https://aws.amazon.com/blogs/devops/authenticated-file-downloads-with-cloudformation/
        S3AccessCreds:
          type: S3
          roleName:
            !Ref EC2Role
          buckets:
          - !Ref TemplateBucketName

      AWS::CloudFormation::Init:
        configSets:
          AllConfigs:
            - ConfigSet: GetHelperScripts
            - ConfigSet: YumInstall
            - ConfigSet: InstallVarious
            - ConfigSet: InstallJenkins
            - ConfigSet: LoadPlugins
            - ConfigSet: PullJobsFromGit
            - ConfigSet: ConfigureJenkins
            - ConfigSet: GetAwardNoticeJar
            - ConfigSet: StartActiveChoicesDockerService
          GetHelperScripts:
            - 01_get_helper_scripts
          YumInstall:
            - 02_yum_install
          InstallVarious:
            - 03_install_various
          InstallJenkins:
            - 04_install_jenkins
          LoadPlugins:
            - 05_load_jenkins_plugins
          PullJobsFromGit:
            - 06_pull_jobs_from_git
          ConfigureJenkins:
            - 07_configure_jenkins
          GetAwardNoticeJar:
            - 08_get_award_notice_jar
          StartActiveChoicesDockerService:
            - 09_start_active_choices_docker_service
          

        01_get_helper_scripts:
          packages:
            yum:
              awslogs: []
          files:
            /etc/cfn/cfn-hup.conf:
              mode: "000400"
              owner: root
              group: root
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                # Change interval from default 15 minutes to 5
                interval=5
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.EC2Instance.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource EC2Instance --configsets GetHelperScripts
            /etc/awslogs/awscli.conf:
              content: !Sub |
                [plugins]
                cwlogs = cwlogs
                [default]
                region = ${AWS::Region}
            /etc/awslogs/awslogs.conf:
              content: !Sub |
                [general]
                state_file = /var/lib/awslogs/agent-state
                
                [/var/log/dmesg]
                file = /var/log/dmesg
                log_group_name = ${GlobalTag}
                log_stream_name = /var/log/dmesg
                
                [/var/log/messages]
                file = /var/log/messages
                log_group_name = ${GlobalTag}
                log_stream_name = /var/log/messages
                datetime_format = %b %d %H:%M:%S
                
                [/var/log/cfn-init]
                file = /var/log/cfn-init.log
                log_group_name = ${GlobalTag}
                log_stream_name = /var/log/cfn-init
                datetime_format = %Y-%m-%d %H:%M:%S
                # multi_line_start_pattern = \d{4}\-\d{2}\-\d{2} \d{2}:\d{2}:\d{2},\d{3}

                [/var/log/jenkins/jenkins.log]
                file = /var/log/jenkins/jenkins.log
                log_group_name = ${GlobalTag}
                log_stream_name = /var/log/jenkins/jenkins.log
                datetime_format = %Y-%m-%d %H:%M:%S

            /etc/init.d/jenkins-docker.sh:
              source: !Sub http://${TemplateBucketName}.s3.amazonaws.com/cloudformation/kuali_jenkins/scripts/jenkins-docker.sh
              mode: "000775"
              owner: root
              group: root

            /var/lib/jenkins/_cfn-config/README.txt:
              content: |
                All files in this directory comprise pieces of configuration that are used during the cloud-formation init period 
                by scripts in the cfn-scripts directory to adjust certain configurations before jenkins startup.
                
            /var/lib/jenkins/_cfn-scripts/README.txt:
              content: |
                All scripts in this directory perform configuration setup and adjustments of jenkins for security, plugins, jobs, restarts, 
                etc, during the cloud-formation init period. They replace what would otherwise be many laborious manual configurations
                required by an adminstrator to reproduce the current state of our kuali ci/cd that has been built up over time.

                Documentation: https://www.jenkins.io/doc/

            /var/lib/jenkins/_cfn-scripts/utils.sh:
              source: !Sub http://${TemplateBucketName}.s3.amazonaws.com/cloudformation/kuali_jenkins/scripts/cfn/utils.sh
              mode: "000775"
              owner: root
              group: root

            /var/lib/jenkins/_job-scripts/README.txt:
              content: |
                All files in this directory comprise scripts that are typically sourced in the "execute shell" of the build stage
                of a jenkins job. Normally you would put the code directly in the "execute shell" text area, but if it is significantly
                large and there is a need to run it through a test harness (local debugging), this alternative helps.

            /var/lib/jenkins/_job-scripts/main.sh:
              source: !Sub http://${TemplateBucketName}.s3.amazonaws.com/cloudformation/kuali_jenkins/scripts/job/main.sh
              mode: "000775"
              owner: root
              group: root

            /var/lib/jenkins/_job-scripts/kuali-research.sh:
              source: !Sub http://${TemplateBucketName}.s3.amazonaws.com/cloudformation/kuali_jenkins/scripts/job/kuali-research.sh
              mode: "000775"
              owner: root
              group: root

          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                - /etc/cfn/cfn-hup.conf
                - /etc/cfn/hooks.d/cfn-auto-reloader.conf
              # awslogs:
              # NOTE: If you are using Amazon Linux 2, the awslogs service is now called "awslogsd"
              awslogsd:
                enabled: true
                ensureRunning: true
                files:
                - /etc/awslogs/awslogs.conf
                - /etc/awslogs/awscli.conf
          commands:
            print_blank_lines:
              command: printf "\n\n"

        02_yum_install:
          files:
            /var/lib/jenkins/_cfn-scripts/02_yum_install.sh:
              source: !Sub http://${TemplateBucketName}.s3.amazonaws.com/cloudformation/kuali_jenkins/scripts/cfn/02_yum_install.sh
              mode: "000775"
              owner: root
              group: root
          commands:
            Update:
              cwd: /var/lib/jenkins/_cfn-scripts
              command: bash 02_yum_install.sh

        03_install_various:
          files:
            /var/lib/jenkins/_cfn-scripts/java_version.sh:
              content: !Sub JavaVersion=${JavaVersion}
              mode: "000775"
              owner: root
              group: root
            /var/lib/jenkins/_cfn-scripts/03_install_various.sh:
              source: !Sub http://${TemplateBucketName}.s3.amazonaws.com/cloudformation/kuali_jenkins/scripts/cfn/03_install_various.sh
              mode: "000775"
              owner: root
              group: root
          commands:
            Install:
              cwd: /var/lib/jenkins/_cfn-scripts
              command: bash 03_install_various.sh

        04_install_jenkins:
          files:
            /var/lib/jenkins/_cfn-scripts/04_install_jenkins.sh:
              source: !Sub http://${TemplateBucketName}.s3.amazonaws.com/cloudformation/kuali_jenkins/scripts/cfn/04_install_jenkins.sh
              mode: "000775"
              owner: root
              group: root
          commands:
            Install:
              cwd: /var/lib/jenkins/_cfn-scripts
              command: bash 04_install_jenkins.sh
              env:
                JENKINS_VERSION: !Ref JenkinsVersion

        05_load_jenkins_plugins:
          files:
            /var/lib/jenkins/plugin-list:
              content: |
                uno-choice:2.5.1
                maven-plugin:3.8
                build-timeout:1.20
                email-ext:2.80
                # environment-script:1.2.5
                git-parameter:0.9.13
                icon-shim:2.0.3
                workflow-aggregator:2.6
                saml:1.1.7
                ssh-agent:1.20
                ssh-slaves:1.31.3
                timestamper:1.11.8
                ws-cleanup:0.38
              mode: "000644"
              owner: jenkins
              group: jenkins
            /var/lib/jenkins/_cfn-scripts/05_load_jenkins_plugins.sh:
              source: !Sub http://${TemplateBucketName}.s3.amazonaws.com/cloudformation/kuali_jenkins/scripts/cfn/05_load_jenkins_plugins.sh
              mode: "000755"
              owner: jenkins
              group: jenkins
          commands:
            Install:
              cwd: /var/lib/jenkins
              command: bash /var/lib/jenkins/_cfn-scripts/05_load_jenkins_plugins.sh
              env:
                JENKINS_PLUGINS_S3_LOCATION: !Sub s3://${TemplateBucketName}/cloudformation/kuali_jenkins/plugin-files/${JenkinsVersion}/
                JENKINS_VERSION: !Ref JenkinsVersion

        06_pull_jobs_from_git:
          files:
            /var/lib/jenkins/.ssh/bu_github_id_coi_rsa:
              source: !Sub http://${TemplateBucketName}.s3.amazonaws.com/bu_github_id_coi_rsa
              mode: "000600"
              owner: jenkins
              group: jenkins
            /var/lib/jenkins/.ssh/bu_github_id_core_common_rsa:
              source: !Sub http://${TemplateBucketName}.s3.amazonaws.com/bu_github_id_core_common_rsa
              mode: "000600"
              owner: jenkins
              group: jenkins
            /var/lib/jenkins/.ssh/bu_github_id_core_rsa:
              source: !Sub http://${TemplateBucketName}.s3.amazonaws.com/bu_github_id_core_rsa
              mode: "000600"
              owner: jenkins
              group: jenkins
            /var/lib/jenkins/.ssh/bu_github_id_docker_rsa:
              source: !Sub http://${TemplateBucketName}.s3.amazonaws.com/bu_github_id_docker_rsa
              mode: "000600"
              owner: jenkins
              group: jenkins
            /var/lib/jenkins/.ssh/bu_github_id_jenkins_rsa:
              source: !Sub http://${TemplateBucketName}.s3.amazonaws.com/bu_github_id_jenkins_rsa
              mode: "000600"
              owner: jenkins
              group: jenkins
            /var/lib/jenkins/.ssh/bu_github_id_kc_rsa:
              source: !Sub http://${TemplateBucketName}.s3.amazonaws.com/bu_github_id_kc_rsa
              mode: "000600"
              owner: jenkins
              group: jenkins
            /var/lib/jenkins/.ssh/bu_github_id_research_portal_rsa:
              source: !Sub http://${TemplateBucketName}.s3.amazonaws.com/bu_github_id_research_portal_rsa
              mode: "000600"
              owner: jenkins
              group: jenkins
            /var/lib/jenkins/.ssh/bu_github_id_rice_rsa:
              source: !Sub http://${TemplateBucketName}.s3.amazonaws.com/bu_github_id_rice_rsa
              mode: "000600"
              owner: jenkins
              group: jenkins
            /var/lib/jenkins/.ssh/bu_github_id_schemaspy_rsa:
              source: !Sub http://${TemplateBucketName}.s3.amazonaws.com/bu_github_id_schemaspy_rsa
              mode: "000600"
              owner: jenkins
              group: jenkins
            /var/lib/jenkins/.ssh/bu_github_id_coeus-api_rsa:
              source: !Sub http://${TemplateBucketName}.s3.amazonaws.com/bu_github_id_coeus-api_rsa
              mode: "000600"
              owner: jenkins
              group: jenkins
            /var/lib/jenkins/.ssh/bu_github_id_coeus-s2sgen_rsa:
              source: !Sub http://${TemplateBucketName}.s3.amazonaws.com/bu_github_id_coeus-s2sgen_rsa
              mode: "000600"
              owner: jenkins
              group: jenkins
            /var/lib/jenkins/.ssh/bu_kuali_id_jenkins_rsa:
              source: !Sub http://${TemplateBucketName}.s3.amazonaws.com/bu_kuali_id_jenkins_rsa
              mode: "000600"
              owner: jenkins
              group: jenkins
            /var/lib/jenkins/.ssh/bu_github_id_kuali_cloudformation_rsa:
              source: !Sub http://${TemplateBucketName}.s3.amazonaws.com/bu_github_id_kuali_cloudformation_rsa
              mode: "000600"
              owner: jenkins
              group: jenkins
            /var/lib/jenkins/jobs/.gitignore:
              content: |
                # Ignore everything in subdirectories
                /*/*
                # ...except the config.xml file in those subdirectories
                !/**/config.xml
                #...and this file
                !.gitignore
                #...and javajobs
                !/javajobs/ContinuousIntegration/
                #...and the config.xml backup file
                !config.xml.bkp                
            /var/lib/jenkins/_cfn-scripts/06_pull_jobs_from_git.sh:
              source: !Sub http://${TemplateBucketName}.s3.amazonaws.com/cloudformation/kuali_jenkins/scripts/cfn/06_pull_jobs_from_git.sh
              mode: "000775"
              owner: jenkins
              group: jenkins
          commands:
            Install:
              cwd: /var/lib/jenkins
              command: bash /var/lib/jenkins/_cfn-scripts/06_pull_jobs_from_git.sh

        07_configure_jenkins:
          files:
            /var/lib/jenkins/_cfn-config/config.xml:
              content: |
                <?xml version='1.1' encoding='UTF-8'?>
                <hudson>
                  <disabledAdministrativeMonitors/>
                  <version>JENKINS_VERSION</version>
                  <installStateName>RUNNING</installStateName>
                  <numExecutors>5</numExecutors>
                  <mode>NORMAL</mode>
                  <useSecurity>true</useSecurity>
                  <authorizationStrategy class="hudson.security.FullControlOnceLoggedInAuthorizationStrategy">
                    <denyAnonymousReadAccess>true</denyAnonymousReadAccess>
                  </authorizationStrategy>
                  <securityRealm class="hudson.security.HudsonPrivateSecurityRealm">
                    <disableSignup>true</disableSignup>
                    <enableCaptcha>false</enableCaptcha>
                  </securityRealm>
                  <disableRememberMe>false</disableRememberMe>
                  <projectNamingStrategy class="jenkins.model.ProjectNamingStrategy$DefaultProjectNamingStrategy"/>
                  <workspaceDir>${JENKINS_HOME}/workspace/${ITEM_FULL_NAME}</workspaceDir>
                  <buildsDir>${ITEM_ROOTDIR}/builds</buildsDir>
                  <jdks>
                    <jdk>
                      <name>JAVA_SHORTNAME</name>
                      <home>JAVA_HOME/</home>
                      <properties/>
                    </jdk>
                  </jdks>
                  <viewsTabBar class="hudson.views.DefaultViewsTabBar"/>
                  <myViewsTabBar class="hudson.views.DefaultMyViewsTabBar"/>
                  <clouds/>
                  <quietPeriod>5</quietPeriod>
                  <scmCheckoutRetryCount>0</scmCheckoutRetryCount>
                  <views>
                    <hudson.model.AllView>
                      <owner class="hudson" reference="../../.."/>
                      <name>all</name>
                      <filterExecutors>false</filterExecutors>
                      <filterQueue>false</filterQueue>
                      <properties class="hudson.model.View$PropertyList"/>
                    </hudson.model.AllView>
                  </views>
                  <primaryView>all</primaryView>
                  <slaveAgentPort>-1</slaveAgentPort>
                  <label></label>
                  <crumbIssuer class="hudson.security.csrf.DefaultCrumbIssuer">
                    <excludeClientIPFromCrumb>false</excludeClientIPFromCrumb>
                  </crumbIssuer>
                  <nodeProperties/>
                  <globalNodeProperties/>
                </hudson>
              mode: "000644"
              owner: jenkins
              group: jenkins
            /var/lib/jenkins/_cfn-config/hudson.maven.MavenModuleSet.xml:
              content:
                <?xml version='1.1' encoding='UTF-8'?>
                <hudson.maven.MavenModuleSet_-DescriptorImpl plugin="maven-plugin@3.8">
                  <globalMavenOpts>-Xmx3072m -Xms512m -XX:MaxPermSize=256m</globalMavenOpts>
                  <mavenValidationLevels class="linked-hash-map">
                    <entry>
                      <string>DEFAULT</string>
                      <int>-1</int>
                    </entry>
                    <entry>
                      <string>LEVEL_MINIMAL</string>
                      <int>0</int>
                    </entry>
                    <entry>
                      <string>LEVEL_MAVEN_2_0</string>
                      <int>20</int>
                    </entry>
                    <entry>
                      <string>LEVEL_MAVEN_3_0</string>
                      <int>30</int>
                    </entry>
                    <entry>
                      <string>LEVEL_MAVEN_3_1</string>
                      <int>31</int>
                    </entry>
                    <entry>
                      <string>LEVEL_STRICT</string>
                      <int>30</int>
                    </entry>
                  </mavenValidationLevels>
                  <localRepository class="hudson.maven.local_repo.DefaultLocalRepositoryLocator"/>
                </hudson.maven.MavenModuleSet_-DescriptorImpl>
              mode: "000644"
              owner: jenkins
              group: jenkins
            /var/lib/jenkins/_cfn-config/hudson.tasks.Maven.xml:
              content:
                <?xml version='1.1' encoding='UTF-8'?>
                <hudson.tasks.Maven_-DescriptorImpl>
                  <installations>
                    <hudson.tasks.Maven_-MavenInstallation>
                      <name>MAVEN_SHORTNAME</name>
                      <home>MAVEN_HOME</home>
                      <properties/>
                    </hudson.tasks.Maven_-MavenInstallation>
                  </installations>
                </hudson.tasks.Maven_-DescriptorImpl>
              mode: "000644"
              owner: jenkins
              group: jenkins
            /var/lib/jenkins/_cfn-config/credentials.admin.xml:
              content:
                <com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl plugin="credentials@2.3.14">
                  <scope>GLOBAL</scope>
                  <id>admin</id>
                  <description>Credentials for global authorization</description>
                  <username>admin</username>
                  <password>
                    <secret-redacted/>
                  </password>
                </com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl>
              mode: "000644"
              owner: jenkins
              group: jenkins
            /var/lib/jenkins/_cfn-config/credentials.kualico.github.token.xml:
              content:
                <com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl plugin="credentials@2.3.14">
                  <scope>GLOBAL</scope>
                  <id>credentials.kualico.github.pat</id>
                  <description>Personal access token for user access to private kualico github repositories</description>
                  <username>bu-ist-user</username>
                  <password>
                    <secret-redacted/>
                  </password>
                </com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl>
              mode: "000644"
              owner: jenkins
              group: jenkins
            /var/lib/jenkins/_cfn-config/credentials.kualico.github.xml:
              content:
                <com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl plugin="credentials@2.3.14">
                  <scope>GLOBAL</scope>
                  <id>credentials.kualico.github</id>
                  <description>Credentials to gain access to private kualico github repositories</description>
                  <username>bu-ist-user</username>
                  <password>
                    <secret-redacted/>
                  </password>
                </com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl>
              mode: "000644"
              owner: jenkins
              group: jenkins
            /var/lib/jenkins/_cfn-config/credentials.kualico.dockerhub.xml:
              content:
                <com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl plugin="credentials@2.3.14">
                  <scope>GLOBAL</scope>
                  <id>credentials.kualico.dockerhub</id>
                  <description>Credentials to gain access to private kualico dockerhub repositories</description>
                  <username>buistuser</username>
                  <password>
                    <secret-redacted/>
                  </password>
                </com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl>
              mode: "000644"
              owner: jenkins
              group: jenkins
            /var/lib/jenkins/_cfn-config/credentials.bu.github.token.xml:
              content:
                <org.jenkinsci.plugins.plaincredentials.impl.StringCredentialsImpl plugin="plain-credentials@1.7">
                  <scope>GLOBAL</scope>
                  <id>credentials.bu.github.token</id>
                  <description>Personal access token for api access to BU github repos in the research administration team</description>
                  <secret>
                    <secret-redacted/>
                  </secret>
                </org.jenkinsci.plugins.plaincredentials.impl.StringCredentialsImpl>
              mode: "000644"
              owner: jenkins
              group: jenkins
            /var/lib/jenkins/_cfn-config/credentials.newrelic.license.key.xml:
              content:
                <org.jenkinsci.plugins.plaincredentials.impl.StringCredentialsImpl plugin="plain-credentials@1.7">
                  <scope>GLOBAL</scope>
                  <id>credentials.newrelic.license.key</id>
                  <description>Credentials to allow logging of telemetry with the newrelic java agent to our new relic account</description>
                  <secret>
                    <secret-redacted/>
                  </secret>
                </org.jenkinsci.plugins.plaincredentials.impl.StringCredentialsImpl>
              mode: "000644"
              owner: jenkins
              group: jenkins
            /var/lib/jenkins/_cfn-config/credentials.github.ssh.bu-ist.kc.xml:
              content:
                <com.cloudbees.jenkins.plugins.sshcredentials.impl.BasicSSHUserPrivateKey plugin="ssh-credentials@1.18.1">
                  <scope>GLOBAL</scope>
                  <id>credentials.github.ssh.bu-ist.kc</id>
                  <description>Gains ssh access to bu-ist kuali-research github repositor</description>
                  <username>bu-ist-user</username>
                  <privateKeySource class="com.cloudbees.jenkins.plugins.sshcredentials.impl.BasicSSHUserPrivateKey$DirectEntryPrivateKeySource">
                    <privateKey>
                      <secret-redacted/>
                    </privateKey>
                  </privateKeySource>
                </com.cloudbees.jenkins.plugins.sshcredentials.impl.BasicSSHUserPrivateKey>
              mode: "000644"
              owner: jenkins
              group: jenkins
            /var/lib/jenkins/_cfn-config/credentials.github.ssh.bu-ist.rice.xml:
              content:
                <com.cloudbees.jenkins.plugins.sshcredentials.impl.BasicSSHUserPrivateKey plugin="ssh-credentials@1.18.1">
                  <scope>GLOBAL</scope>
                  <id>credentials.github.ssh.bu-ist.rice</id>
                  <description>Gains ssh access to bu-ist kuali-kc-rice github repository</description>
                  <username>bu-ist-user</username>
                  <privateKeySource class="com.cloudbees.jenkins.plugins.sshcredentials.impl.BasicSSHUserPrivateKey$DirectEntryPrivateKeySource">
                    <privateKey>
                      <secret-redacted/>
                    </privateKey>
                  </privateKeySource>
                </com.cloudbees.jenkins.plugins.sshcredentials.impl.BasicSSHUserPrivateKey>
            /var/lib/jenkins/_cfn-scripts/07_configure_jenkins.sh:
              source: !Sub http://${TemplateBucketName}.s3.amazonaws.com/cloudformation/kuali_jenkins/scripts/cfn/07_configure_jenkins.sh
              mode: "000775"
              owner: jenkins
              group: jenkins
            /var/lib/jenkins/init.groovy.d/auto-approve-scripts.groovy:
              content: |
                import org.jenkinsci.plugins.scriptsecurity.scripts.ScriptApproval

                ScriptApproval scriptApproval = ScriptApproval.get()
                def hashesToApprove = []
                scriptApproval.pendingScripts.each {
                  /**
                  * Don't approve script here - you get concurrency issues if done in an each iteration.
                  * So, create an array and loop over that instead for approval
                  */
                  hashesToApprove.add(it.hash)
                }

                for (String hash : hashesToApprove) {
                  scriptApproval.approveScript(hash)
                }
              mode: "000775"
              owner: jenkins
              group: jenkins
          sources:
            /var/lib/jenkins/workspace/kuali-research-1-build-war/coeus-webapp/target: !Sub https://${TemplateBucketName}.s3.amazonaws.com/coeus-webapp-generated-web-sources.2001.0040.tar.gz
          commands:
            Install:
              cwd: /var/lib/jenkins
              command: bash /var/lib/jenkins/_cfn-scripts/07_configure_jenkins.sh

        08_get_award_notice_jar:
          files:
            /var/lib/jenkins/bu-awardnotice-1.1.jar.zip:
              source: !Sub https://${TemplateBucketName}.s3.amazonaws.com/bu-awardnotice-1.1.jar.zip
              mode: "000644"
              owner: jenkins
              group: jenkins
            /var/lib/jenkins/_cfn-scripts/08_get_award_notice_jar.sh:
              source: !Sub http://${TemplateBucketName}.s3.amazonaws.com/cloudformation/kuali_jenkins/scripts/cfn/08_get_award_notice_jar.sh
              mode: "000775"
              owner: jenkins
              group: jenkins
          commands:
            Install:
              cwd: /var/lib/jenkins
              command: bash /var/lib/jenkins/_cfn-scripts/08_get_award_notice_jar.sh

        09_start_active_choices_docker_service: 
          files:
            /var/lib/jenkins/_cfn-scripts/09_start_active_choices_docker_service.sh:
              source: !Sub https://${TemplateBucketName}.s3.amazonaws.com/cloudformation/kuali_jenkins/scripts/jenkins-docker.sh
              mode: "000775"
              owner: jenkins
              group: jenkins
          commands: 
            StartDocker:
              cwd: /var/lib/jenkins
              command: !Sub
                - bash ${scriptFile} ${taskArg} ${imageArg}
                - scriptFile: /var/lib/jenkins/_cfn-scripts/09_start_active_choices_docker_service.sh
                  taskArg: deploy
                  imageArg: !Sub KUALI_UI_IMAGE=${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/kuali-jenkins-http-server

Outputs:

  JenkinsPrivateUrl:
    Value:
      !Sub
        - http://${ec2_ip}:8080
        - ec2_ip: !GetAtt EC2Instance.PrivateIp

  InstanceId:
    Value:
      !Ref EC2Instance