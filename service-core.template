{
	"AWSTemplateFormatVersion" : "2010-09-09",

	"Description" : "This service contains one task that runs the kuali cor-main application",

	"Parameters" : {
        "GlobalPrefix" : {
		    "Type" : "String",
			"Description": "A common value that all resources in this template will prefix to their name to establish a bundling through naming convention. If a nested stack, this will most likely be the name of the top-most stack.",
			"Default" : "ECS-test"
        },
		"Landscape" : {
		  "Description": "Specify a landscape (sandbox, qa, etc... )",
		  "Type": "String",
		  "AllowedValues" : [ "sb", "ci", "qa", "stg", "prod" ],
		  "ConstraintDescription" : "This parameter is restricted to the following values: sb, ci, qa, stg, prod",
		  "Default" : "sb"
		},
        "vpcid" : {
            "Type" : "AWS::EC2::VPC::Id",
            "Description" : "The id of the vpc this is a subnet of."
        },
		"clusterid" : {
		    "Type" : "String",
			"Description" : "Please provide the ECS Cluster ID that this service should run on"
		},
        "DesiredCount" : {
            "Type" : "Number",
			"Description" : "How many instances of the cor-main task should we run across our cluster?",
			"AllowedValues" : [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ],
			"ConstraintDescription" : "Cluster size is limited between 1 and 10 instances.",
            "Default" : "3"
        },
        "MaxCount" : {
            "Type" : "Number",
			"Description" : "Maximum number of instances of the cor-main task we can run across our cluster",
			"AllowedValues" : [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ],
			"ConstraintDescription" : "Cluster size is limited between 1 and 10 instances.",
            "Default" : "4"
        },
		 "Listener" : {
		     "Type" : "String",
			  "Description" : "The Application Load Balancer listener to register with."
		 },
         "Path" : {
             "Type" : "String",
             "Description" : "The path to register with the Application Load Balancer.",
             "Default" : "/"
         },
         "ECSServiceAutoScalingRoleARN" : {
             "Type" : "String",
             "Description" : "The ECS service auto scaling role ARN."
         },
		"DockerImageVersion" : {
			"Type" : "String",
			"Description" : "The maven verion number for the kuali-research application that is to be deployed to the cluster. Example: 1808.0044. All other modules (core, coi, etc.) that run along with kuali-research borrow the same tag when they are pushed as docker images into the elastic container registry. This way, all container definitions of every task are grouped because the docker images on which they are based will conform with eachother in terms of api cross-compatiblility, equivalent release, etc.",
			"Default" : "1806.0044"
		}
	},

    "Metadata" : {
		"AWS::ECS::Service" : {
			"NOTES" : { "Fn::Join" : [ "\n", [
				"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-load-balancing.html",
				"Currently, Amazon ECS services can only specify a single load balancer or target group. ",
				"If your service requires access to multiple load balanced ports (for example, port 80 and port 443 for an HTTP/HTTPS service), ",
				"you must use a Classic Load Balancer with multiple listeners. To use an Application Load Balancer, separate the single ",
				"HTTP/HTTPS service into two services, where each handles requests for different ports. Then, each service could use a different ",
				"target group behind a single Application Load Balancer."
			]]}			
		},
		"AWS::ElasticLoadBalancingV2::ListenerRule" : {
			"NOTES" : { "Fn::Join" : [ "\n", [
				"https://forums.aws.amazon.com/thread.jspa?threadID=286855&start=25&tstart=0",
				"Recently released HTTPS redirection"
			]]}
		}
	},

	"Resources" : {
		"ServicePort80" : {
			"Type" : "AWS::ECS::Service",
            "DependsOn" : "ListenerRule",
			"Properties" : {
				"Cluster" : { "Ref" : "clusterid" },
                "Role" : { "Ref" : "ServiceRole" },
                "DesiredCount" : { "Ref" : "DesiredCount" },
				"TaskDefinition" : { "Ref" : "TaskDefinition" },
                "LoadBalancers" : [{
					"ContainerName" : "core",
                    "ContainerPort" : "80",
                    "TargetGroupArn" : { "Ref" : "TargetGroup80" }
				}]
			}
		},
        "TaskDefinition" : {
            "Type" : "AWS::ECS::TaskDefinition",
            "Properties" : {
                "Family" : "core-task", 
				"RequiresCompatibilities" : [ "EC2" ],
                "ContainerDefinitions" : [{
					"Name" : "core",
					"User" : "root",
					"Essential" : true,
					"Image" : { "Fn::Sub" : "730096353738.dkr.ecr.us-east-1.amazonaws.com/core:${DockerImageVersion}" },
					"Memory" : 256,
                    "Environment" : [
						{ "Name" : "LANDSCAPE", "Value" : { "Ref" : "Landscape" } }
					],
					"PortMappings" : [
						{ "HostPort" : "80", "ContainerPort" : "3000" },
						{ "HostPort" : "27017", "ContainerPort" : "27017" }
					],
                    "LogConfiguration" : {
						"LogDriver" : "awslogs",
                        "Options" : {
							"awslogs-group" : { "Ref" : "KualiECSCoreLogGroup" },
							"awslogs-region" : { "Ref" : "AWS::Region" },
							"awslogs-stream-prefix" : { "Ref" : "AWS::StackName" },
							"awslogs-create-group" : "false"
						}
					},
                    "MountPoints" : [{ 
						"SourceVolume" : "/var/kuali/s3", 
						"ContainerPath" : "/var/core-config", 
						"ReadOnly" : false
					}]
				}]
            }
        },
        "KualiECSCoreLogGroup" : {
            "Type" : "AWS::Logs::LogGroup",
            "Properties" : {
				"LogGroupName" : { "Fn::Sub" : "${GlobalPrefix}-${Landscape}-${AWS::StackName}-docker" },
                "RetentionInDays" : 90
            }
        },
        "TargetGroup80" : {
            "Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties" : {
				"VpcId" : { "Ref" : "vpcid" },
                "Port" : 80,
                "Protocol" : "HTTP",
                "Matcher" : { "HttpCode" : "200-299"},
                "HealthCheckIntervalSeconds" : 10,
                "HealthCheckPath" : "/apps/",
                "HealthCheckProtocol" : "HTTP",
                "HealthCheckTimeoutSeconds" : 5,
                "HealthyThresholdCount" : 2,
                "TargetGroupAttributes" : [
					{ "Key" : "stickiness.enabled", "Value" : "true" },
					{ "Key" : "stickiness.type", "Value" : "lb_cookie" },
					{ "Key" : "stickiness.lb_cookie.duration_seconds", "Value" : "86400" },
					{ "Key" : "deregistration_delay.timeout_seconds", "Value" : "300" },
					{ "Key" : "slow_start.duration_seconds", "Value" : "0" }
                ]                
            }
        },
        "ListenerRule" : {
            "Type" : "AWS::ElasticLoadBalancingV2::ListenerRule",
            "Properties" : {
                "ListenerArn" : { "Ref" : "Listener" },
                "Priority" : 1,
                "Actions" : [
					{ "TargetGroupArn" : { "Ref" : "TargetGroup80" }, "Type" : "forward" }
                ],
                "Conditions" : [
					{ "Field" : "path-pattern", "Values" : [ "/" ] }
                ]
            }
        },
        "ServiceRole" : {
            "Type" : "AWS::IAM::Role",
            "Properties" : {
				"RoleName" : { "Fn::Sub" : "${GlobalPrefix}-${Landscape}-${AWS::StackName}-ecs-core-service" },
                "AssumeRolePolicyDocument" : {
					"Statement": [{
						"Effect": "Allow",
						"Principal": { "Service": [ "ecs.amazonaws.com" ]},
						"Action": [ "sts:AssumeRole" ]
					}]
                },
                "Policies" : [
					{
						"PolicyName": { "Fn::Sub" : "${GlobalPrefix}-${Landscape}-ecs-host-policy" },
                        "PolicyDocument" : {
							"Statement" : [{
								"Effect" : "Allow",
								"Resource" : "*",
								"Action" : [
									"ec2:AuthorizeSecurityGroupIngress",
									"ec2:Describe*",
									"elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
									"elasticloadbalancing:Describe*",
									"elasticloadbalancing:RegisterInstancesWithLoadBalancer",
									"elasticloadbalancing:DeregisterTargets",
									"elasticloadbalancing:DescribeTargetGroups",
									"elasticloadbalancing:DescribeTargetHealth",
									"elasticloadbalancing:RegisterTargets"
								]
							}]
						}
					}
				]
			}
         },
        "ServiceScalableTarget" : {
            "Type" : "AWS::ApplicationAutoScaling::ScalableTarget",
            "Properties" : {
                "ResourceId"  : {"Fn::Join" : [ "/", [
					"service",
                    { "Ref" : "clusterid" },
                    {"Fn::GetAtt" : [ "ServicePort80", "Name"]}
				] ]},
                "MaxCapacity" : "",
                "MinCapacity" : "",
                "ScalableDimension" : "",
                "ServiceNamespace"  : ""
            }
        },
        "ServiceScaleOutPolicy" : {
            "Type" : "AWS::ApplicationAutoScaling::ScalingPolicy",
            "Properties" : {
                "PolicyName" : ""
            }
        },
        "ServiceScaleInPolicy" : {
            "Type" : "AWS::ApplicationAutoScaling::ScalingPolicy",
            "Properties" : {
                "PolicyName" : ""
            }
        },
        "CPUScaleOutAlarm" : {
            "Type" : "AWS::CloudWatch::Alarm",
            "Properties" : {
                "ComparisonOperator" : "",
                "EvaluationPeriods"  : "",
                "MetricName"         : "",
                "Namespace"          : "",
                "Period"             : "",
                "Statistic"          : "",
                "Threshold"          : ""
            }
        },
        "CUPScaleInAlarm" : {
            "Type" : "AWS::CloudWatch::Alarm",
            "Properties" : {
                "ComparisonOperator" : "",
                "EvaluationPeriods"  : "",
                "MetricName"         : "",
                "Namespace"          : "",
                "Period"             : "",
                "Statistic"          : "",
                "Threshold"          : ""
            }
        }
	},

	"Outputs" : {
	}
}
